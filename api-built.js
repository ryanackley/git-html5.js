(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        //Allow using this built library as an AMD module
        //in another project. That other project will only
        //see this AMD call, not the internal modules in
        //the closure below.
        define(factory);
    } else {
        //Browser globals case. Just assign the
        //result to a property on the global.
        root.GitApi = factory();
    }
}(this, function () {/**
 * almond 0.2.5 Copyright (c) 2011-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);

                name = baseParts.concat(name.split("/"));

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (typeof callback === 'function') {

            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback.apply(defined[name], args);

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        config = cfg;
        if (config.deps) {
            req(config.deps, config.callback);
        }
        return req;
    };

    define = function (name, deps, callback) {

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

define("thirdparty/almond", function(){});

/**
 * @license RequireJS text 2.0.6 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/requirejs/text for details
 */
/*jslint regexp: true */
/*global require, XMLHttpRequest, ActiveXObject,
  define, window, process, Packages,
  java, location, Components, FileUtils */

define('text',['module'], function (module) {
    'use strict';

    var text, fs, Cc, Ci,
        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],
        xmlRegExp = /^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,
        bodyRegExp = /<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,
        hasLocation = typeof location !== 'undefined' && location.href,
        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\:/, ''),
        defaultHostName = hasLocation && location.hostname,
        defaultPort = hasLocation && (location.port || undefined),
        buildMap = [],
        masterConfig = (module.config && module.config()) || {};

    text = {
        version: '2.0.6',

        strip: function (content) {
            //Strips <?xml ...?> declarations so that external SVG and XML
            //documents can be added to a document without worry. Also, if the string
            //is an HTML document, only the part inside the body tag is returned.
            if (content) {
                content = content.replace(xmlRegExp, "");
                var matches = content.match(bodyRegExp);
                if (matches) {
                    content = matches[1];
                }
            } else {
                content = "";
            }
            return content;
        },

        jsEscape: function (content) {
            return content.replace(/(['\\])/g, '\\$1')
                .replace(/[\f]/g, "\\f")
                .replace(/[\b]/g, "\\b")
                .replace(/[\n]/g, "\\n")
                .replace(/[\t]/g, "\\t")
                .replace(/[\r]/g, "\\r")
                .replace(/[\u2028]/g, "\\u2028")
                .replace(/[\u2029]/g, "\\u2029");
        },

        createXhr: masterConfig.createXhr || function () {
            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.
            var xhr, i, progId;
            if (typeof XMLHttpRequest !== "undefined") {
                return new XMLHttpRequest();
            } else if (typeof ActiveXObject !== "undefined") {
                for (i = 0; i < 3; i += 1) {
                    progId = progIds[i];
                    try {
                        xhr = new ActiveXObject(progId);
                    } catch (e) {}

                    if (xhr) {
                        progIds = [progId];  // so faster next time
                        break;
                    }
                }
            }

            return xhr;
        },

        /**
         * Parses a resource name into its component parts. Resource names
         * look like: module/name.ext!strip, where the !strip part is
         * optional.
         * @param {String} name the resource name
         * @returns {Object} with properties "moduleName", "ext" and "strip"
         * where strip is a boolean.
         */
        parseName: function (name) {
            var modName, ext, temp,
                strip = false,
                index = name.indexOf("."),
                isRelative = name.indexOf('./') === 0 ||
                             name.indexOf('../') === 0;

            if (index !== -1 && (!isRelative || index > 1)) {
                modName = name.substring(0, index);
                ext = name.substring(index + 1, name.length);
            } else {
                modName = name;
            }

            temp = ext || modName;
            index = temp.indexOf("!");
            if (index !== -1) {
                //Pull off the strip arg.
                strip = temp.substring(index + 1) === "strip";
                temp = temp.substring(0, index);
                if (ext) {
                    ext = temp;
                } else {
                    modName = temp;
                }
            }

            return {
                moduleName: modName,
                ext: ext,
                strip: strip
            };
        },

        xdRegExp: /^((\w+)\:)?\/\/([^\/\\]+)/,

        /**
         * Is an URL on another domain. Only works for browser use, returns
         * false in non-browser environments. Only used to know if an
         * optimized .js version of a text resource should be loaded
         * instead.
         * @param {String} url
         * @returns Boolean
         */
        useXhr: function (url, protocol, hostname, port) {
            var uProtocol, uHostName, uPort,
                match = text.xdRegExp.exec(url);
            if (!match) {
                return true;
            }
            uProtocol = match[2];
            uHostName = match[3];

            uHostName = uHostName.split(':');
            uPort = uHostName[1];
            uHostName = uHostName[0];

            return (!uProtocol || uProtocol === protocol) &&
                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&
                   ((!uPort && !uHostName) || uPort === port);
        },

        finishLoad: function (name, strip, content, onLoad) {
            content = strip ? text.strip(content) : content;
            if (masterConfig.isBuild) {
                buildMap[name] = content;
            }
            onLoad(content);
        },

        load: function (name, req, onLoad, config) {
            //Name has format: some.module.filext!strip
            //The strip part is optional.
            //if strip is present, then that means only get the string contents
            //inside a body tag in an HTML string. For XML/SVG content it means
            //removing the <?xml ...?> declarations so the content can be inserted
            //into the current doc without problems.

            // Do not bother with the work if a build and text will
            // not be inlined.
            if (config.isBuild && !config.inlineText) {
                onLoad();
                return;
            }

            masterConfig.isBuild = config.isBuild;

            var parsed = text.parseName(name),
                nonStripName = parsed.moduleName +
                    (parsed.ext ? '.' + parsed.ext : ''),
                url = req.toUrl(nonStripName),
                useXhr = (masterConfig.useXhr) ||
                         text.useXhr;

            //Load the text. Use XHR if possible and in a browser.
            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {
                text.get(url, function (content) {
                    text.finishLoad(name, parsed.strip, content, onLoad);
                }, function (err) {
                    if (onLoad.error) {
                        onLoad.error(err);
                    }
                });
            } else {
                //Need to fetch the resource across domains. Assume
                //the resource has been optimized into a JS module. Fetch
                //by the module name + extension, but do not include the
                //!strip part to avoid file system issues.
                req([nonStripName], function (content) {
                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,
                                    parsed.strip, content, onLoad);
                });
            }
        },

        write: function (pluginName, moduleName, write, config) {
            if (buildMap.hasOwnProperty(moduleName)) {
                var content = text.jsEscape(buildMap[moduleName]);
                write.asModule(pluginName + "!" + moduleName,
                               "define(function () { return '" +
                                   content +
                               "';});\n");
            }
        },

        writeFile: function (pluginName, moduleName, req, write, config) {
            var parsed = text.parseName(moduleName),
                extPart = parsed.ext ? '.' + parsed.ext : '',
                nonStripName = parsed.moduleName + extPart,
                //Use a '.js' file name so that it indicates it is a
                //script that can be loaded across domains.
                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';

            //Leverage own load() method to load plugin value, but only
            //write out values that do not have the strip argument,
            //to avoid any potential issues with ! in file names.
            text.load(nonStripName, req, function (value) {
                //Use own write() method to construct full module value.
                //But need to create shell that translates writeFile's
                //write() to the right interface.
                var textWrite = function (contents) {
                    return write(fileName, contents);
                };
                textWrite.asModule = function (moduleName, contents) {
                    return write.asModule(moduleName, fileName, contents);
                };

                text.write(pluginName, nonStripName, textWrite, config);
            }, config);
        }
    };

    if (masterConfig.env === 'node' || (!masterConfig.env &&
            typeof process !== "undefined" &&
            process.versions &&
            !!process.versions.node)) {
        //Using special require.nodeRequire, something added by r.js.
        fs = require.nodeRequire('fs');

        text.get = function (url, callback) {
            var file = fs.readFileSync(url, 'utf8');
            //Remove BOM (Byte Mark Order) from utf8 files if it is there.
            if (file.indexOf('\uFEFF') === 0) {
                file = file.substring(1);
            }
            callback(file);
        };
    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&
            text.createXhr())) {
        text.get = function (url, callback, errback, headers) {
            var xhr = text.createXhr(), header;
            xhr.open('GET', url, true);

            //Allow plugins direct access to xhr headers
            if (headers) {
                for (header in headers) {
                    if (headers.hasOwnProperty(header)) {
                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);
                    }
                }
            }

            //Allow overrides specified in config
            if (masterConfig.onXhr) {
                masterConfig.onXhr(xhr, url);
            }

            xhr.onreadystatechange = function (evt) {
                var status, err;
                //Do not explicitly handle errors, those should be
                //visible via console output in the browser.
                if (xhr.readyState === 4) {
                    status = xhr.status;
                    if (status > 399 && status < 600) {
                        //An http 4xx or 5xx error. Signal an error.
                        err = new Error(url + ' HTTP status: ' + status);
                        err.xhr = xhr;
                        errback(err);
                    } else {
                        callback(xhr.responseText);
                    }

                    if (masterConfig.onXhrComplete) {
                        masterConfig.onXhrComplete(xhr, url);
                    }
                }
            };
            xhr.send(null);
        };
    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&
            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {
        //Why Java, why is this so awkward?
        text.get = function (url, callback) {
            var stringBuffer, line,
                encoding = "utf-8",
                file = new java.io.File(url),
                lineSeparator = java.lang.System.getProperty("line.separator"),
                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),
                content = '';
            try {
                stringBuffer = new java.lang.StringBuffer();
                line = input.readLine();

                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324
                // http://www.unicode.org/faq/utf_bom.html

                // Note that when we use utf-8, the BOM should appear as "EF BB BF", but it doesn't due to this bug in the JDK:
                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058
                if (line && line.length() && line.charAt(0) === 0xfeff) {
                    // Eat the BOM, since we've already found the encoding on this file,
                    // and we plan to concatenating this buffer with others; the BOM should
                    // only appear at the top of a file.
                    line = line.substring(1);
                }

                stringBuffer.append(line);

                while ((line = input.readLine()) !== null) {
                    stringBuffer.append(lineSeparator);
                    stringBuffer.append(line);
                }
                //Make sure we return a JavaScript string and not a Java string.
                content = String(stringBuffer.toString()); //String
            } finally {
                input.close();
            }
            callback(content);
        };
    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&
            typeof Components !== 'undefined' && Components.classes &&
            Components.interfaces)) {
        //Avert your gaze!
        Cc = Components.classes,
        Ci = Components.interfaces;
        Components.utils['import']('resource://gre/modules/FileUtils.jsm');

        text.get = function (url, callback) {
            var inStream, convertStream,
                readData = {},
                fileObj = new FileUtils.File(url);

            //XPCOM, you so crazy
            try {
                inStream = Cc['@mozilla.org/network/file-input-stream;1']
                           .createInstance(Ci.nsIFileInputStream);
                inStream.init(fileObj, 1, 0, false);

                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']
                                .createInstance(Ci.nsIConverterInputStream);
                convertStream.init(inStream, "utf-8", inStream.available(),
                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);

                convertStream.readString(inStream.available(), readData);
                convertStream.close();
                inStream.close();
                callback(readData.value);
            } catch (e) {
                throw new Error((fileObj && fileObj.path || '') + ': ' + e);
            }
        };
    }
    return text;
});


define('text!workers/api-worker-built.js',[],function () { return 'var window = self;\r\n(function (root, factory) {\r\n    \r\n    var apiWorker = factory();\r\n    apiWorker();\r\n    \r\n}(this, function () {/**\r\n * almond 0.2.5 Copyright (c) 2011-2012, The Dojo Foundation All Rights Reserved.\r\n * Available via the MIT or new BSD license.\r\n * see: http://github.com/jrburke/almond for details\r\n */\r\n//Going sloppy to avoid \'use strict\' string cost, but strict practices should\r\n//be followed.\r\n/*jslint sloppy: true */\r\n/*global setTimeout: false */\r\n\r\nvar requirejs, require, define;\r\n(function (undef) {\r\n    var main, req, makeMap, handlers,\r\n        defined = {},\r\n        waiting = {},\r\n        config = {},\r\n        defining = {},\r\n        hasOwn = Object.prototype.hasOwnProperty,\r\n        aps = [].slice;\r\n\r\n    function hasProp(obj, prop) {\r\n        return hasOwn.call(obj, prop);\r\n    }\r\n\r\n    /**\r\n     * Given a relative module name, like ./something, normalize it to\r\n     * a real name that can be mapped to a path.\r\n     * @param {String} name the relative name\r\n     * @param {String} baseName a real name that the name arg is relative\r\n     * to.\r\n     * @returns {String} normalized name\r\n     */\r\n    function normalize(name, baseName) {\r\n        var nameParts, nameSegment, mapValue, foundMap,\r\n            foundI, foundStarMap, starI, i, j, part,\r\n            baseParts = baseName && baseName.split("/"),\r\n            map = config.map,\r\n            starMap = (map && map[\'*\']) || {};\r\n\r\n        //Adjust any relative paths.\r\n        if (name && name.charAt(0) === ".") {\r\n            //If have a base name, try to normalize against it,\r\n            //otherwise, assume it is a top-level require that will\r\n            //be relative to baseUrl in the end.\r\n            if (baseName) {\r\n                //Convert baseName to array, and lop off the last part,\r\n                //so that . matches that "directory" and not name of the baseName\'s\r\n                //module. For instance, baseName of "one/two/three", maps to\r\n                //"one/two/three.js", but we want the directory, "one/two" for\r\n                //this normalization.\r\n                baseParts = baseParts.slice(0, baseParts.length - 1);\r\n\r\n                name = baseParts.concat(name.split("/"));\r\n\r\n                //start trimDots\r\n                for (i = 0; i < name.length; i += 1) {\r\n                    part = name[i];\r\n                    if (part === ".") {\r\n                        name.splice(i, 1);\r\n                        i -= 1;\r\n                    } else if (part === "..") {\r\n                        if (i === 1 && (name[2] === \'..\' || name[0] === \'..\')) {\r\n                            //End of the line. Keep at least one non-dot\r\n                            //path segment at the front so it can be mapped\r\n                            //correctly to disk. Otherwise, there is likely\r\n                            //no path mapping for a path starting with \'..\'.\r\n                            //This can still fail, but catches the most reasonable\r\n                            //uses of ..\r\n                            break;\r\n                        } else if (i > 0) {\r\n                            name.splice(i - 1, 2);\r\n                            i -= 2;\r\n                        }\r\n                    }\r\n                }\r\n                //end trimDots\r\n\r\n                name = name.join("/");\r\n            } else if (name.indexOf(\'./\') === 0) {\r\n                // No baseName, so this is ID is resolved relative\r\n                // to baseUrl, pull off the leading dot.\r\n                name = name.substring(2);\r\n            }\r\n        }\r\n\r\n        //Apply map config if available.\r\n        if ((baseParts || starMap) && map) {\r\n            nameParts = name.split(\'/\');\r\n\r\n            for (i = nameParts.length; i > 0; i -= 1) {\r\n                nameSegment = nameParts.slice(0, i).join("/");\r\n\r\n                if (baseParts) {\r\n                    //Find the longest baseName segment match in the config.\r\n                    //So, do joins on the biggest to smallest lengths of baseParts.\r\n                    for (j = baseParts.length; j > 0; j -= 1) {\r\n                        mapValue = map[baseParts.slice(0, j).join(\'/\')];\r\n\r\n                        //baseName segment has  config, find if it has one for\r\n                        //this name.\r\n                        if (mapValue) {\r\n                            mapValue = mapValue[nameSegment];\r\n                            if (mapValue) {\r\n                                //Match, update name to the new value.\r\n                                foundMap = mapValue;\r\n                                foundI = i;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (foundMap) {\r\n                    break;\r\n                }\r\n\r\n                //Check for a star map match, but just hold on to it,\r\n                //if there is a shorter segment match later in a matching\r\n                //config, then favor over this star map.\r\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\r\n                    foundStarMap = starMap[nameSegment];\r\n                    starI = i;\r\n                }\r\n            }\r\n\r\n            if (!foundMap && foundStarMap) {\r\n                foundMap = foundStarMap;\r\n                foundI = starI;\r\n            }\r\n\r\n            if (foundMap) {\r\n                nameParts.splice(0, foundI, foundMap);\r\n                name = nameParts.join(\'/\');\r\n            }\r\n        }\r\n\r\n        return name;\r\n    }\r\n\r\n    function makeRequire(relName, forceSync) {\r\n        return function () {\r\n            //A version of a require function that passes a moduleName\r\n            //value for items that may need to\r\n            //look up paths relative to the moduleName\r\n            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));\r\n        };\r\n    }\r\n\r\n    function makeNormalize(relName) {\r\n        return function (name) {\r\n            return normalize(name, relName);\r\n        };\r\n    }\r\n\r\n    function makeLoad(depName) {\r\n        return function (value) {\r\n            defined[depName] = value;\r\n        };\r\n    }\r\n\r\n    function callDep(name) {\r\n        if (hasProp(waiting, name)) {\r\n            var args = waiting[name];\r\n            delete waiting[name];\r\n            defining[name] = true;\r\n            main.apply(undef, args);\r\n        }\r\n\r\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\r\n            throw new Error(\'No \' + name);\r\n        }\r\n        return defined[name];\r\n    }\r\n\r\n    //Turns a plugin!resource to [plugin, resource]\r\n    //with the plugin being undefined if the name\r\n    //did not have a plugin prefix.\r\n    function splitPrefix(name) {\r\n        var prefix,\r\n            index = name ? name.indexOf(\'!\') : -1;\r\n        if (index > -1) {\r\n            prefix = name.substring(0, index);\r\n            name = name.substring(index + 1, name.length);\r\n        }\r\n        return [prefix, name];\r\n    }\r\n\r\n    /**\r\n     * Makes a name map, normalizing the name, and using a plugin\r\n     * for normalization if necessary. Grabs a ref to plugin\r\n     * too, as an optimization.\r\n     */\r\n    makeMap = function (name, relName) {\r\n        var plugin,\r\n            parts = splitPrefix(name),\r\n            prefix = parts[0];\r\n\r\n        name = parts[1];\r\n\r\n        if (prefix) {\r\n            prefix = normalize(prefix, relName);\r\n            plugin = callDep(prefix);\r\n        }\r\n\r\n        //Normalize according\r\n        if (prefix) {\r\n            if (plugin && plugin.normalize) {\r\n                name = plugin.normalize(name, makeNormalize(relName));\r\n            } else {\r\n                name = normalize(name, relName);\r\n            }\r\n        } else {\r\n            name = normalize(name, relName);\r\n            parts = splitPrefix(name);\r\n            prefix = parts[0];\r\n            name = parts[1];\r\n            if (prefix) {\r\n                plugin = callDep(prefix);\r\n            }\r\n        }\r\n\r\n        //Using ridiculous property names for space reasons\r\n        return {\r\n            f: prefix ? prefix + \'!\' + name : name, //fullName\r\n            n: name,\r\n            pr: prefix,\r\n            p: plugin\r\n        };\r\n    };\r\n\r\n    function makeConfig(name) {\r\n        return function () {\r\n            return (config && config.config && config.config[name]) || {};\r\n        };\r\n    }\r\n\r\n    handlers = {\r\n        require: function (name) {\r\n            return makeRequire(name);\r\n        },\r\n        exports: function (name) {\r\n            var e = defined[name];\r\n            if (typeof e !== \'undefined\') {\r\n                return e;\r\n            } else {\r\n                return (defined[name] = {});\r\n            }\r\n        },\r\n        module: function (name) {\r\n            return {\r\n                id: name,\r\n                uri: \'\',\r\n                exports: defined[name],\r\n                config: makeConfig(name)\r\n            };\r\n        }\r\n    };\r\n\r\n    main = function (name, deps, callback, relName) {\r\n        var cjsModule, depName, ret, map, i,\r\n            args = [],\r\n            usingExports;\r\n\r\n        //Use name if no relName\r\n        relName = relName || name;\r\n\r\n        //Call the callback to define the module, if necessary.\r\n        if (typeof callback === \'function\') {\r\n\r\n            //Pull out the defined dependencies and pass the ordered\r\n            //values to the callback.\r\n            //Default to [require, exports, module] if no deps\r\n            deps = !deps.length && callback.length ? [\'require\', \'exports\', \'module\'] : deps;\r\n            for (i = 0; i < deps.length; i += 1) {\r\n                map = makeMap(deps[i], relName);\r\n                depName = map.f;\r\n\r\n                //Fast path CommonJS standard dependencies.\r\n                if (depName === "require") {\r\n                    args[i] = handlers.require(name);\r\n                } else if (depName === "exports") {\r\n                    //CommonJS module spec 1.1\r\n                    args[i] = handlers.exports(name);\r\n                    usingExports = true;\r\n                } else if (depName === "module") {\r\n                    //CommonJS module spec 1.1\r\n                    cjsModule = args[i] = handlers.module(name);\r\n                } else if (hasProp(defined, depName) ||\r\n                           hasProp(waiting, depName) ||\r\n                           hasProp(defining, depName)) {\r\n                    args[i] = callDep(depName);\r\n                } else if (map.p) {\r\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\r\n                    args[i] = defined[depName];\r\n                } else {\r\n                    throw new Error(name + \' missing \' + depName);\r\n                }\r\n            }\r\n\r\n            ret = callback.apply(defined[name], args);\r\n\r\n            if (name) {\r\n                //If setting exports via "module" is in play,\r\n                //favor that over return value and exports. After that,\r\n                //favor a non-undefined return value over exports use.\r\n                if (cjsModule && cjsModule.exports !== undef &&\r\n                        cjsModule.exports !== defined[name]) {\r\n                    defined[name] = cjsModule.exports;\r\n                } else if (ret !== undef || !usingExports) {\r\n                    //Use the return value from the function.\r\n                    defined[name] = ret;\r\n                }\r\n            }\r\n        } else if (name) {\r\n            //May just be an object definition for the module. Only\r\n            //worry about defining if have a module name.\r\n            defined[name] = callback;\r\n        }\r\n    };\r\n\r\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\r\n        if (typeof deps === "string") {\r\n            if (handlers[deps]) {\r\n                //callback in this case is really relName\r\n                return handlers[deps](callback);\r\n            }\r\n            //Just return the module wanted. In this scenario, the\r\n            //deps arg is the module name, and second arg (if passed)\r\n            //is just the relName.\r\n            //Normalize module name, if it contains . or ..\r\n            return callDep(makeMap(deps, callback).f);\r\n        } else if (!deps.splice) {\r\n            //deps is a config object, not an array.\r\n            config = deps;\r\n            if (callback.splice) {\r\n                //callback is an array, which means it is a dependency list.\r\n                //Adjust args if there are dependencies\r\n                deps = callback;\r\n                callback = relName;\r\n                relName = null;\r\n            } else {\r\n                deps = undef;\r\n            }\r\n        }\r\n\r\n        //Support require([\'a\'])\r\n        callback = callback || function () {};\r\n\r\n        //If relName is a function, it is an errback handler,\r\n        //so remove it.\r\n        if (typeof relName === \'function\') {\r\n            relName = forceSync;\r\n            forceSync = alt;\r\n        }\r\n\r\n        //Simulate async callback;\r\n        if (forceSync) {\r\n            main(undef, deps, callback, relName);\r\n        } else {\r\n            //Using a non-zero value because of concern for what old browsers\r\n            //do, and latest browsers "upgrade" to 4 if lower value is used:\r\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\r\n            //If want a value immediately, use require(\'id\') instead -- something\r\n            //that works in almond on the global level, but not guaranteed and\r\n            //unlikely to work in other AMD implementations.\r\n            setTimeout(function () {\r\n                main(undef, deps, callback, relName);\r\n            }, 4);\r\n        }\r\n\r\n        return req;\r\n    };\r\n\r\n    /**\r\n     * Just drops the config on the floor, but returns req in case\r\n     * the config return value is used.\r\n     */\r\n    req.config = function (cfg) {\r\n        config = cfg;\r\n        if (config.deps) {\r\n            req(config.deps, config.callback);\r\n        }\r\n        return req;\r\n    };\r\n\r\n    define = function (name, deps, callback) {\r\n\r\n        //This module may not have dependencies\r\n        if (!deps.splice) {\r\n            //deps is not an array, so probably means\r\n            //an object literal or factory function for\r\n            //the value. Adjust args.\r\n            callback = deps;\r\n            deps = [];\r\n        }\r\n\r\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\r\n            waiting[name] = [name, deps, callback];\r\n        }\r\n    };\r\n\r\n    define.amd = {\r\n        jQuery: true\r\n    };\r\n}());\r\n\ndefine("thirdparty/almond", function(){});\n\n/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */\r\n(function() {\'use strict\';var COMPILED = !0, goog = goog || {};\r\ngoog.global = this;\r\ngoog.DEBUG = !1;\r\ngoog.LOCALE = "en";\r\ngoog.provide = function(a) {\r\n  if(!COMPILED) {\r\n    if(goog.isProvided_(a)) {\r\n      throw Error(\'Namespace "\' + a + \'" already declared.\');\r\n    }\r\n    delete goog.implicitNamespaces_[a];\r\n    for(var b = a;(b = b.substring(0, b.lastIndexOf("."))) && !goog.getObjectByName(b);) {\r\n      goog.implicitNamespaces_[b] = !0\r\n    }\r\n  }\r\n  goog.exportPath_(a)\r\n};\r\ngoog.setTestOnly = function(a) {\r\n  if(COMPILED && !goog.DEBUG) {\r\n    throw a = a || "", Error("Importing test-only code into non-debug environment" + a ? ": " + a : ".");\r\n  }\r\n};\r\nCOMPILED || (goog.isProvided_ = function(a) {\r\n  return!goog.implicitNamespaces_[a] && !!goog.getObjectByName(a)\r\n}, goog.implicitNamespaces_ = {});\r\ngoog.exportPath_ = function(a, b, c) {\r\n  a = a.split(".");\r\n  c = c || goog.global;\r\n  !(a[0] in c) && c.execScript && c.execScript("var " + a[0]);\r\n  for(var d;a.length && (d = a.shift());) {\r\n    !a.length && goog.isDef(b) ? c[d] = b : c = c[d] ? c[d] : c[d] = {}\r\n  }\r\n};\r\ngoog.getObjectByName = function(a, b) {\r\n  for(var c = a.split("."), d = b || goog.global, e;e = c.shift();) {\r\n    if(goog.isDefAndNotNull(d[e])) {\r\n      d = d[e]\r\n    }else {\r\n      return null\r\n    }\r\n  }\r\n  return d\r\n};\r\ngoog.globalize = function(a, b) {\r\n  var c = b || goog.global, d;\r\n  for(d in a) {\r\n    c[d] = a[d]\r\n  }\r\n};\r\ngoog.addDependency = function(a, b, c) {\r\n  if(!COMPILED) {\r\n    for(var d, a = a.replace(/\\\\/g, "/"), e = goog.dependencies_, f = 0;d = b[f];f++) {\r\n      e.nameToPath[d] = a, a in e.pathToNames || (e.pathToNames[a] = {}), e.pathToNames[a][d] = !0\r\n    }\r\n    for(d = 0;b = c[d];d++) {\r\n      a in e.requires || (e.requires[a] = {}), e.requires[a][b] = !0\r\n    }\r\n  }\r\n};\r\ngoog.ENABLE_DEBUG_LOADER = !0;\r\ngoog.require = function(a) {\r\n  if(!COMPILED && !goog.isProvided_(a)) {\r\n    if(goog.ENABLE_DEBUG_LOADER) {\r\n      var b = goog.getPathFromDeps_(a);\r\n      if(b) {\r\n        goog.included_[b] = !0;\r\n        goog.writeScripts_();\r\n        return\r\n      }\r\n    }\r\n    a = "goog.require could not find: " + a;\r\n    goog.global.console && goog.global.console.error(a);\r\n    throw Error(a);\r\n  }\r\n};\r\ngoog.basePath = "";\r\ngoog.nullFunction = function() {\r\n};\r\ngoog.identityFunction = function(a) {\r\n  return a\r\n};\r\ngoog.abstractMethod = function() {\r\n  throw Error("unimplemented abstract method");\r\n};\r\ngoog.addSingletonGetter = function(a) {\r\n  a.getInstance = function() {\r\n    if(a.instance_) {\r\n      return a.instance_\r\n    }\r\n    goog.DEBUG && (goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = a);\r\n    return a.instance_ = new a\r\n  }\r\n};\r\ngoog.instantiatedSingletons_ = [];\r\n!COMPILED && goog.ENABLE_DEBUG_LOADER && (goog.included_ = {}, goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}}, goog.inHtmlDocument_ = function() {\r\n  var a = goog.global.document;\r\n  return"undefined" != typeof a && "write" in a\r\n}, goog.findBasePath_ = function() {\r\n  if(goog.global.CLOSURE_BASE_PATH) {\r\n    goog.basePath = goog.global.CLOSURE_BASE_PATH\r\n  }else {\r\n    if(goog.inHtmlDocument_()) {\r\n      for(var a = goog.global.document.getElementsByTagName("script"), b = a.length - 1;0 <= b;--b) {\r\n        var c = a[b].src, d = c.lastIndexOf("?"), d = -1 == d ? c.length : d;\r\n        if("base.js" == c.substr(d - 7, 7)) {\r\n          goog.basePath = c.substr(0, d - 7);\r\n          break\r\n        }\r\n      }\r\n    }\r\n  }\r\n}, goog.importScript_ = function(a) {\r\n  var b = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;\r\n  !goog.dependencies_.written[a] && b(a) && (goog.dependencies_.written[a] = !0)\r\n}, goog.writeScriptTag_ = function(a) {\r\n  return goog.inHtmlDocument_() ? (goog.global.document.write(\'<script type="text/javascript" src="\' + a + \'"><\\/script>\'), !0) : !1\r\n}, goog.writeScripts_ = function() {\r\n  function a(e) {\r\n    if(!(e in d.written)) {\r\n      if(!(e in d.visited) && (d.visited[e] = !0, e in d.requires)) {\r\n        for(var g in d.requires[e]) {\r\n          if(!goog.isProvided_(g)) {\r\n            if(g in d.nameToPath) {\r\n              a(d.nameToPath[g])\r\n            }else {\r\n              throw Error("Undefined nameToPath for " + g);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      e in c || (c[e] = !0, b.push(e))\r\n    }\r\n  }\r\n  var b = [], c = {}, d = goog.dependencies_, e;\r\n  for(e in goog.included_) {\r\n    d.written[e] || a(e)\r\n  }\r\n  for(e = 0;e < b.length;e++) {\r\n    if(b[e]) {\r\n      goog.importScript_(goog.basePath + b[e])\r\n    }else {\r\n      throw Error("Undefined script input");\r\n    }\r\n  }\r\n}, goog.getPathFromDeps_ = function(a) {\r\n  return a in goog.dependencies_.nameToPath ? goog.dependencies_.nameToPath[a] : null\r\n}, goog.findBasePath_(), goog.global.CLOSURE_NO_DEPS || goog.importScript_(goog.basePath + "deps.js"));\r\ngoog.typeOf = function(a) {\r\n  var b = typeof a;\r\n  if("object" == b) {\r\n    if(a) {\r\n      if(a instanceof Array) {\r\n        return"array"\r\n      }\r\n      if(a instanceof Object) {\r\n        return b\r\n      }\r\n      var c = Object.prototype.toString.call(a);\r\n      if("[object Window]" == c) {\r\n        return"object"\r\n      }\r\n      if("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) {\r\n        return"array"\r\n      }\r\n      if("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) {\r\n        return"function"\r\n      }\r\n    }else {\r\n      return"null"\r\n    }\r\n  }else {\r\n    if("function" == b && "undefined" == typeof a.call) {\r\n      return"object"\r\n    }\r\n  }\r\n  return b\r\n};\r\ngoog.isDef = function(a) {\r\n  return void 0 !== a\r\n};\r\ngoog.isNull = function(a) {\r\n  return null === a\r\n};\r\ngoog.isDefAndNotNull = function(a) {\r\n  return null != a\r\n};\r\ngoog.isArray = function(a) {\r\n  return"array" == goog.typeOf(a)\r\n};\r\ngoog.isArrayLike = function(a) {\r\n  var b = goog.typeOf(a);\r\n  return"array" == b || "object" == b && "number" == typeof a.length\r\n};\r\ngoog.isDateLike = function(a) {\r\n  return goog.isObject(a) && "function" == typeof a.getFullYear\r\n};\r\ngoog.isString = function(a) {\r\n  return"string" == typeof a\r\n};\r\ngoog.isBoolean = function(a) {\r\n  return"boolean" == typeof a\r\n};\r\ngoog.isNumber = function(a) {\r\n  return"number" == typeof a\r\n};\r\ngoog.isFunction = function(a) {\r\n  return"function" == goog.typeOf(a)\r\n};\r\ngoog.isObject = function(a) {\r\n  var b = typeof a;\r\n  return"object" == b && null != a || "function" == b\r\n};\r\ngoog.getUid = function(a) {\r\n  return a[goog.UID_PROPERTY_] || (a[goog.UID_PROPERTY_] = ++goog.uidCounter_)\r\n};\r\ngoog.removeUid = function(a) {\r\n  "removeAttribute" in a && a.removeAttribute(goog.UID_PROPERTY_);\r\n  try {\r\n    delete a[goog.UID_PROPERTY_]\r\n  }catch(b) {\r\n  }\r\n};\r\ngoog.UID_PROPERTY_ = "closure_uid_" + Math.floor(2147483648 * Math.random()).toString(36);\r\ngoog.uidCounter_ = 0;\r\ngoog.getHashCode = goog.getUid;\r\ngoog.removeHashCode = goog.removeUid;\r\ngoog.cloneObject = function(a) {\r\n  var b = goog.typeOf(a);\r\n  if("object" == b || "array" == b) {\r\n    if(a.clone) {\r\n      return a.clone()\r\n    }\r\n    var b = "array" == b ? [] : {}, c;\r\n    for(c in a) {\r\n      b[c] = goog.cloneObject(a[c])\r\n    }\r\n    return b\r\n  }\r\n  return a\r\n};\r\ngoog.bindNative_ = function(a, b, c) {\r\n  return a.call.apply(a.bind, arguments)\r\n};\r\ngoog.bindJs_ = function(a, b, c) {\r\n  if(!a) {\r\n    throw Error();\r\n  }\r\n  if(2 < arguments.length) {\r\n    var d = Array.prototype.slice.call(arguments, 2);\r\n    return function() {\r\n      var c = Array.prototype.slice.call(arguments);\r\n      Array.prototype.unshift.apply(c, d);\r\n      return a.apply(b, c)\r\n    }\r\n  }\r\n  return function() {\r\n    return a.apply(b, arguments)\r\n  }\r\n};\r\ngoog.bind = function(a, b, c) {\r\n  goog.bind = Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? goog.bindNative_ : goog.bindJs_;\r\n  return goog.bind.apply(null, arguments)\r\n};\r\ngoog.partial = function(a, b) {\r\n  var c = Array.prototype.slice.call(arguments, 1);\r\n  return function() {\r\n    var b = Array.prototype.slice.call(arguments);\r\n    b.unshift.apply(b, c);\r\n    return a.apply(this, b)\r\n  }\r\n};\r\ngoog.mixin = function(a, b) {\r\n  for(var c in b) {\r\n    a[c] = b[c]\r\n  }\r\n};\r\ngoog.now = Date.now || function() {\r\n  return+new Date\r\n};\r\ngoog.globalEval = function(a) {\r\n  if(goog.global.execScript) {\r\n    goog.global.execScript(a, "JavaScript")\r\n  }else {\r\n    if(goog.global.eval) {\r\n      if(null == goog.evalWorksForGlobals_ && (goog.global.eval("var _et_ = 1;"), "undefined" != typeof goog.global._et_ ? (delete goog.global._et_, goog.evalWorksForGlobals_ = !0) : goog.evalWorksForGlobals_ = !1), goog.evalWorksForGlobals_) {\r\n        goog.global.eval(a)\r\n      }else {\r\n        var b = goog.global.document, c = b.createElement("script");\r\n        c.type = "text/javascript";\r\n        c.defer = !1;\r\n        c.appendChild(b.createTextNode(a));\r\n        b.body.appendChild(c);\r\n        b.body.removeChild(c)\r\n      }\r\n    }else {\r\n      throw Error("goog.globalEval not available");\r\n    }\r\n  }\r\n};\r\ngoog.evalWorksForGlobals_ = null;\r\ngoog.getCssName = function(a, b) {\r\n  var c = function(a) {\r\n    return goog.cssNameMapping_[a] || a\r\n  }, d = function(a) {\r\n    for(var a = a.split("-"), b = [], d = 0;d < a.length;d++) {\r\n      b.push(c(a[d]))\r\n    }\r\n    return b.join("-")\r\n  }, d = goog.cssNameMapping_ ? "BY_WHOLE" == goog.cssNameMappingStyle_ ? c : d : function(a) {\r\n    return a\r\n  };\r\n  return b ? a + "-" + d(b) : d(a)\r\n};\r\ngoog.setCssNameMapping = function(a, b) {\r\n  goog.cssNameMapping_ = a;\r\n  goog.cssNameMappingStyle_ = b\r\n};\r\n!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING && (goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING);\r\ngoog.getMsg = function(a, b) {\r\n  var c = b || {}, d;\r\n  for(d in c) {\r\n    var e = ("" + c[d]).replace(/\\$/g, "$$$$"), a = a.replace(RegExp("\\\\{\\\\$" + d + "\\\\}", "gi"), e)\r\n  }\r\n  return a\r\n};\r\ngoog.exportSymbol = function(a, b, c) {\r\n  goog.exportPath_(a, b, c)\r\n};\r\ngoog.exportProperty = function(a, b, c) {\r\n  a[b] = c\r\n};\r\ngoog.inherits = function(a, b) {\r\n  function c() {\r\n  }\r\n  c.prototype = b.prototype;\r\n  a.superClass_ = b.prototype;\r\n  a.prototype = new c;\r\n  a.prototype.constructor = a\r\n};\r\ngoog.base = function(a, b, c) {\r\n  var d = arguments.callee.caller;\r\n  if(d.superClass_) {\r\n    return d.superClass_.constructor.apply(a, Array.prototype.slice.call(arguments, 1))\r\n  }\r\n  for(var e = Array.prototype.slice.call(arguments, 2), f = !1, g = a.constructor;g;g = g.superClass_ && g.superClass_.constructor) {\r\n    if(g.prototype[b] === d) {\r\n      f = !0\r\n    }else {\r\n      if(f) {\r\n        return g.prototype[b].apply(a, e)\r\n      }\r\n    }\r\n  }\r\n  if(a[b] === d) {\r\n    return a.constructor.prototype[b].apply(a, e)\r\n  }\r\n  throw Error("goog.base called from a method of one name to a method of a different name");\r\n};\r\ngoog.scope = function(a) {\r\n  a.call(goog.global)\r\n};\r\nvar USE_TYPEDARRAY = "undefined" !== typeof Uint8Array && "undefined" !== typeof Uint16Array && "undefined" !== typeof Uint32Array;\r\nvar Zlib = {BitStream:function(a, b) {\r\n  this.index = "number" === typeof b ? b : 0;\r\n  this.bitindex = 0;\r\n  this.buffer = a instanceof (USE_TYPEDARRAY ? Uint8Array : Array) ? a : new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.BitStream.DefaultBlockSize);\r\n  if(2 * this.buffer.length <= this.index) {\r\n    throw Error("invalid index");\r\n  }\r\n  this.buffer.length <= this.index && this.expandBuffer()\r\n}};\r\nZlib.BitStream.DefaultBlockSize = 32768;\r\nZlib.BitStream.prototype.expandBuffer = function() {\r\n  var a = this.buffer, b, c = a.length, d = new (USE_TYPEDARRAY ? Uint8Array : Array)(c << 1);\r\n  if(USE_TYPEDARRAY) {\r\n    d.set(a)\r\n  }else {\r\n    for(b = 0;b < c;++b) {\r\n      d[b] = a[b]\r\n    }\r\n  }\r\n  return this.buffer = d\r\n};\r\nZlib.BitStream.prototype.writeBits = function(a, b, c) {\r\n  var d = this.buffer, e = this.index, f = this.bitindex, g = d[e];\r\n  c && 1 < b && (a = 8 < b ? (Zlib.BitStream.ReverseTable[a & 255] << 24 | Zlib.BitStream.ReverseTable[a >>> 8 & 255] << 16 | Zlib.BitStream.ReverseTable[a >>> 16 & 255] << 8 | Zlib.BitStream.ReverseTable[a >>> 24 & 255]) >> 32 - b : Zlib.BitStream.ReverseTable[a] >> 8 - b);\r\n  if(8 > b + f) {\r\n    g = g << b | a, f += b\r\n  }else {\r\n    for(c = 0;c < b;++c) {\r\n      g = g << 1 | a >> b - c - 1 & 1, 8 === ++f && (f = 0, d[e++] = Zlib.BitStream.ReverseTable[g], g = 0, e === d.length && (d = this.expandBuffer()))\r\n    }\r\n  }\r\n  d[e] = g;\r\n  this.buffer = d;\r\n  this.bitindex = f;\r\n  this.index = e\r\n};\r\nZlib.BitStream.prototype.finish = function() {\r\n  var a = this.buffer, b = this.index;\r\n  0 < this.bitindex && (a[b] <<= 8 - this.bitindex, a[b] = Zlib.BitStream.ReverseTable[a[b]], b++);\r\n  USE_TYPEDARRAY ? a = a.subarray(0, b) : a.length = b;\r\n  return a\r\n};\r\nZlib.BitStream.ReverseTable = function(a) {\r\n  return a\r\n}(function() {\r\n  var a = new (USE_TYPEDARRAY ? Uint8Array : Array)(256), b;\r\n  for(b = 0;256 > b;++b) {\r\n    for(var c = a, d = b, e = b, f = e, g = 7, e = e >>> 1;e;e >>>= 1) {\r\n      f <<= 1, f |= e & 1, --g\r\n    }\r\n    c[d] = (f << g & 255) >>> 0\r\n  }\r\n  return a\r\n}());\r\nZlib.CRC32 = {};\r\nZlib.CRC32.calc = function(a, b, c) {\r\n  return Zlib.CRC32.update(a, 0, b, c)\r\n};\r\nZlib.CRC32.update = function(a, b, c, d) {\r\n  for(var e = Zlib.CRC32.Table, f = "number" === typeof c ? c : c = 0, d = "number" === typeof d ? d : a.length, b = b ^ 4294967295, f = d & 7;f--;++c) {\r\n    b = b >>> 8 ^ e[(b ^ a[c]) & 255]\r\n  }\r\n  for(f = d >> 3;f--;c += 8) {\r\n    b = b >>> 8 ^ e[(b ^ a[c]) & 255], b = b >>> 8 ^ e[(b ^ a[c + 1]) & 255], b = b >>> 8 ^ e[(b ^ a[c + 2]) & 255], b = b >>> 8 ^ e[(b ^ a[c + 3]) & 255], b = b >>> 8 ^ e[(b ^ a[c + 4]) & 255], b = b >>> 8 ^ e[(b ^ a[c + 5]) & 255], b = b >>> 8 ^ e[(b ^ a[c + 6]) & 255], b = b >>> 8 ^ e[(b ^ a[c + 7]) & 255]\r\n  }\r\n  return(b ^ 4294967295) >>> 0\r\n};\r\nZlib.CRC32.Table = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint32Array(a) : a\r\n}([0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, \r\n2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, \r\n2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, \r\n2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, \r\n3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, \r\n414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918E3, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117]);\r\nZlib.exportObject = function(a, b) {\r\n  var c, d, e, f;\r\n  if(Object.keys) {\r\n    c = Object.keys(b)\r\n  }else {\r\n    for(d in c = [], e = 0, b) {\r\n      c[e++] = d\r\n    }\r\n  }\r\n  e = 0;\r\n  for(f = c.length;e < f;++e) {\r\n    d = c[e], goog.exportSymbol(a + "." + d, b[d])\r\n  }\r\n};\r\nZlib.GunzipMember = function() {\r\n};\r\nZlib.GunzipMember.prototype.getName = function() {\r\n  return this.name\r\n};\r\nZlib.GunzipMember.prototype.getData = function() {\r\n  return this.data\r\n};\r\nZlib.GunzipMember.prototype.getMtime = function() {\r\n  return this.mtime\r\n};\r\nZlib.Heap = function(a) {\r\n  this.buffer = new (USE_TYPEDARRAY ? Uint16Array : Array)(2 * a);\r\n  this.length = 0\r\n};\r\nZlib.Heap.prototype.getParent = function(a) {\r\n  return 2 * ((a - 2) / 4 | 0)\r\n};\r\nZlib.Heap.prototype.getChild = function(a) {\r\n  return 2 * a + 2\r\n};\r\nZlib.Heap.prototype.push = function(a, b) {\r\n  var c, d, e = this.buffer, f;\r\n  c = this.length;\r\n  e[this.length++] = b;\r\n  for(e[this.length++] = a;0 < c;) {\r\n    if(d = this.getParent(c), e[c] > e[d]) {\r\n      f = e[c], e[c] = e[d], e[d] = f, f = e[c + 1], e[c + 1] = e[d + 1], e[d + 1] = f, c = d\r\n    }else {\r\n      break\r\n    }\r\n  }\r\n  return this.length\r\n};\r\nZlib.Heap.prototype.pop = function() {\r\n  var a, b, c = this.buffer, d, e, f;\r\n  b = c[0];\r\n  a = c[1];\r\n  this.length -= 2;\r\n  c[0] = c[this.length];\r\n  c[1] = c[this.length + 1];\r\n  for(f = 0;;) {\r\n    e = this.getChild(f);\r\n    if(e >= this.length) {\r\n      break\r\n    }\r\n    e + 2 < this.length && c[e + 2] > c[e] && (e += 2);\r\n    if(c[e] > c[f]) {\r\n      d = c[f], c[f] = c[e], c[e] = d, d = c[f + 1], c[f + 1] = c[e + 1], c[e + 1] = d\r\n    }else {\r\n      break\r\n    }\r\n    f = e\r\n  }\r\n  return{index:a, value:b, length:this.length}\r\n};\r\nZlib.Huffman = {};\r\nZlib.Huffman.buildHuffmanTable = function(a) {\r\n  var b = a.length, c = 0, d = Number.POSITIVE_INFINITY, e, f, g, h, i, j, l, m, k;\r\n  for(m = 0;m < b;++m) {\r\n    a[m] > c && (c = a[m]), a[m] < d && (d = a[m])\r\n  }\r\n  e = 1 << c;\r\n  f = new (USE_TYPEDARRAY ? Uint32Array : Array)(e);\r\n  g = 1;\r\n  h = 0;\r\n  for(i = 2;g <= c;) {\r\n    for(m = 0;m < b;++m) {\r\n      if(a[m] === g) {\r\n        j = 0;\r\n        l = h;\r\n        for(k = 0;k < g;++k) {\r\n          j = j << 1 | l & 1, l >>= 1\r\n        }\r\n        for(k = j;k < e;k += i) {\r\n          f[k] = g << 16 | m\r\n        }\r\n        ++h\r\n      }\r\n    }\r\n    ++g;\r\n    h <<= 1;\r\n    i <<= 1\r\n  }\r\n  return[f, c, d]\r\n};\r\nZlib.RawDeflate = function(a, b) {\r\n  this.compressionType = Zlib.RawDeflate.CompressionType.DYNAMIC;\r\n  this.lazy = 0;\r\n  this.input = a;\r\n  this.op = 0;\r\n  b && (b.lazy && (this.lazy = b.lazy), "number" === typeof b.compressionType && (this.compressionType = b.compressionType), b.outputBuffer && (this.output = USE_TYPEDARRAY && b.outputBuffer instanceof Array ? new Uint8Array(b.outputBuffer) : b.outputBuffer), "number" === typeof b.outputIndex && (this.op = b.outputIndex));\r\n  this.output || (this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(32768))\r\n};\r\nZlib.RawDeflate.CompressionType = {NONE:0, FIXED:1, DYNAMIC:2, RESERVED:3};\r\nZlib.RawDeflate.Lz77MinLength = 3;\r\nZlib.RawDeflate.Lz77MaxLength = 258;\r\nZlib.RawDeflate.WindowSize = 32768;\r\nZlib.RawDeflate.MaxCodeLength = 16;\r\nZlib.RawDeflate.HUFMAX = 286;\r\nZlib.RawDeflate.FixedHuffmanTable = function() {\r\n  var a = [], b;\r\n  for(b = 0;288 > b;b++) {\r\n    switch(!0) {\r\n      case 143 >= b:\r\n        a.push([b + 48, 8]);\r\n        break;\r\n      case 255 >= b:\r\n        a.push([b - 144 + 400, 9]);\r\n        break;\r\n      case 279 >= b:\r\n        a.push([b - 256 + 0, 7]);\r\n        break;\r\n      case 287 >= b:\r\n        a.push([b - 280 + 192, 8]);\r\n        break;\r\n      default:\r\n        throw"invalid literal: " + b;\r\n    }\r\n  }\r\n  return a\r\n}();\r\nZlib.RawDeflate.prototype.compress = function() {\r\n  var a, b, c, d = this.input;\r\n  switch(this.compressionType) {\r\n    case Zlib.RawDeflate.CompressionType.NONE:\r\n      b = 0;\r\n      for(c = d.length;b < c;) {\r\n        a = USE_TYPEDARRAY ? d.subarray(b, b + 65535) : d.slice(b, b + 65535), b += a.length, this.makeNocompressBlock(a, b === c)\r\n      }\r\n      break;\r\n    case Zlib.RawDeflate.CompressionType.FIXED:\r\n      this.output = this.makeFixedHuffmanBlock(d, !0);\r\n      this.op = this.output.length;\r\n      break;\r\n    case Zlib.RawDeflate.CompressionType.DYNAMIC:\r\n      this.output = this.makeDynamicHuffmanBlock(d, !0);\r\n      this.op = this.output.length;\r\n      break;\r\n    default:\r\n      throw"invalid compression type";\r\n  }\r\n  return this.output\r\n};\r\nZlib.RawDeflate.prototype.makeNocompressBlock = function(a, b) {\r\n  var c, d, e = this.output, f = this.op;\r\n  if(USE_TYPEDARRAY) {\r\n    for(e = new Uint8Array(this.output.buffer);e.length <= f + a.length + 5;) {\r\n      e = new Uint8Array(e.length << 1)\r\n    }\r\n    e.set(this.output)\r\n  }\r\n  c = Zlib.RawDeflate.CompressionType.NONE;\r\n  e[f++] = (b ? 1 : 0) | c << 1;\r\n  c = a.length;\r\n  d = ~c + 65536 & 65535;\r\n  e[f++] = c & 255;\r\n  e[f++] = c >>> 8 & 255;\r\n  e[f++] = d & 255;\r\n  e[f++] = d >>> 8 & 255;\r\n  if(USE_TYPEDARRAY) {\r\n    e.set(a, f), f += a.length, e = e.subarray(0, f)\r\n  }else {\r\n    c = 0;\r\n    for(d = a.length;c < d;++c) {\r\n      e[f++] = a[c]\r\n    }\r\n    e.length = f\r\n  }\r\n  this.op = f;\r\n  return this.output = e\r\n};\r\nZlib.RawDeflate.prototype.makeFixedHuffmanBlock = function(a, b) {\r\n  var c = new Zlib.BitStream(new Uint8Array(this.output.buffer), this.op), d;\r\n  d = Zlib.RawDeflate.CompressionType.FIXED;\r\n  c.writeBits(b ? 1 : 0, 1, !0);\r\n  c.writeBits(d, 2, !0);\r\n  d = this.lz77(a);\r\n  this.fixedHuffman(d, c);\r\n  return c.finish()\r\n};\r\nZlib.RawDeflate.prototype.makeDynamicHuffmanBlock = function(a, b) {\r\n  var c = new Zlib.BitStream(new Uint8Array(this.output), this.op), d, e, f, g, h = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], i, j, l, m, k, n, q = Array(19), p;\r\n  d = Zlib.RawDeflate.CompressionType.DYNAMIC;\r\n  c.writeBits(b ? 1 : 0, 1, !0);\r\n  c.writeBits(d, 2, !0);\r\n  d = this.lz77(a);\r\n  i = this.getLengths_(this.freqsLitLen, 15);\r\n  j = this.getCodesFromLengths_(i);\r\n  l = this.getLengths_(this.freqsDist, 7);\r\n  m = this.getCodesFromLengths_(l);\r\n  for(e = 286;257 < e && 0 === i[e - 1];e--) {\r\n  }\r\n  for(f = 30;1 < f && 0 === l[f - 1];f--) {\r\n  }\r\n  k = this.getTreeSymbols_(e, i, f, l);\r\n  n = this.getLengths_(k.freqs, 7);\r\n  for(p = 0;19 > p;p++) {\r\n    q[p] = n[h[p]]\r\n  }\r\n  for(g = 19;4 < g && 0 === q[g - 1];g--) {\r\n  }\r\n  h = this.getCodesFromLengths_(n);\r\n  c.writeBits(e - 257, 5, !0);\r\n  c.writeBits(f - 1, 5, !0);\r\n  c.writeBits(g - 4, 4, !0);\r\n  for(p = 0;p < g;p++) {\r\n    c.writeBits(q[p], 3, !0)\r\n  }\r\n  p = 0;\r\n  for(q = k.codes.length;p < q;p++) {\r\n    if(e = k.codes[p], c.writeBits(h[e], n[e], !0), 16 <= e) {\r\n      p++;\r\n      switch(e) {\r\n        case 16:\r\n          e = 2;\r\n          break;\r\n        case 17:\r\n          e = 3;\r\n          break;\r\n        case 18:\r\n          e = 7;\r\n          break;\r\n        default:\r\n          throw"invalid code: " + e;\r\n      }\r\n      c.writeBits(k.codes[p], e, !0)\r\n    }\r\n  }\r\n  this.dynamicHuffman(d, [j, i], [m, l], c);\r\n  return c.finish()\r\n};\r\nZlib.RawDeflate.prototype.dynamicHuffman = function(a, b, c, d) {\r\n  var e, f, g, h, i;\r\n  g = b[0];\r\n  b = b[1];\r\n  h = c[0];\r\n  i = c[1];\r\n  c = 0;\r\n  for(e = a.length;c < e;++c) {\r\n    if(f = a[c], d.writeBits(g[f], b[f], !0), 256 < f) {\r\n      d.writeBits(a[++c], a[++c], !0), f = a[++c], d.writeBits(h[f], i[f], !0), d.writeBits(a[++c], a[++c], !0)\r\n    }else {\r\n      if(256 === f) {\r\n        break\r\n      }\r\n    }\r\n  }\r\n  return d\r\n};\r\nZlib.RawDeflate.prototype.fixedHuffman = function(a, b) {\r\n  var c, d, e;\r\n  c = 0;\r\n  for(d = a.length;c < d;c++) {\r\n    if(e = a[c], Zlib.BitStream.prototype.writeBits.apply(b, Zlib.RawDeflate.FixedHuffmanTable[e]), 256 < e) {\r\n      b.writeBits(a[++c], a[++c], !0), b.writeBits(a[++c], 5), b.writeBits(a[++c], a[++c], !0)\r\n    }else {\r\n      if(256 === e) {\r\n        break\r\n      }\r\n    }\r\n  }\r\n  return b\r\n};\r\nZlib.RawDeflate.Lz77Match = function(a, b) {\r\n  this.length = a;\r\n  this.backwardDistance = b\r\n};\r\nZlib.RawDeflate.Lz77Match.LengthCodeTable = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint32Array(a) : a\r\n}(function() {\r\n  function a(a) {\r\n    switch(!0) {\r\n      case 3 === a:\r\n        return[257, a - 3, 0];\r\n      case 4 === a:\r\n        return[258, a - 4, 0];\r\n      case 5 === a:\r\n        return[259, a - 5, 0];\r\n      case 6 === a:\r\n        return[260, a - 6, 0];\r\n      case 7 === a:\r\n        return[261, a - 7, 0];\r\n      case 8 === a:\r\n        return[262, a - 8, 0];\r\n      case 9 === a:\r\n        return[263, a - 9, 0];\r\n      case 10 === a:\r\n        return[264, a - 10, 0];\r\n      case 12 >= a:\r\n        return[265, a - 11, 1];\r\n      case 14 >= a:\r\n        return[266, a - 13, 1];\r\n      case 16 >= a:\r\n        return[267, a - 15, 1];\r\n      case 18 >= a:\r\n        return[268, a - 17, 1];\r\n      case 22 >= a:\r\n        return[269, a - 19, 2];\r\n      case 26 >= a:\r\n        return[270, a - 23, 2];\r\n      case 30 >= a:\r\n        return[271, a - 27, 2];\r\n      case 34 >= a:\r\n        return[272, a - 31, 2];\r\n      case 42 >= a:\r\n        return[273, a - 35, 3];\r\n      case 50 >= a:\r\n        return[274, a - 43, 3];\r\n      case 58 >= a:\r\n        return[275, a - 51, 3];\r\n      case 66 >= a:\r\n        return[276, a - 59, 3];\r\n      case 82 >= a:\r\n        return[277, a - 67, 4];\r\n      case 98 >= a:\r\n        return[278, a - 83, 4];\r\n      case 114 >= a:\r\n        return[279, a - 99, 4];\r\n      case 130 >= a:\r\n        return[280, a - 115, 4];\r\n      case 162 >= a:\r\n        return[281, a - 131, 5];\r\n      case 194 >= a:\r\n        return[282, a - 163, 5];\r\n      case 226 >= a:\r\n        return[283, a - 195, 5];\r\n      case 257 >= a:\r\n        return[284, a - 227, 5];\r\n      case 258 === a:\r\n        return[285, a - 258, 0];\r\n      default:\r\n        throw"invalid length: " + a;\r\n    }\r\n  }\r\n  var b = [], c, d;\r\n  for(c = 3;258 >= c;c++) {\r\n    d = a(c), b[c] = d[2] << 24 | d[1] << 16 | d[0]\r\n  }\r\n  return b\r\n}());\r\nZlib.RawDeflate.Lz77Match.prototype.getDistanceCode_ = function(a) {\r\n  switch(!0) {\r\n    case 1 === a:\r\n      a = [0, a - 1, 0];\r\n      break;\r\n    case 2 === a:\r\n      a = [1, a - 2, 0];\r\n      break;\r\n    case 3 === a:\r\n      a = [2, a - 3, 0];\r\n      break;\r\n    case 4 === a:\r\n      a = [3, a - 4, 0];\r\n      break;\r\n    case 6 >= a:\r\n      a = [4, a - 5, 1];\r\n      break;\r\n    case 8 >= a:\r\n      a = [5, a - 7, 1];\r\n      break;\r\n    case 12 >= a:\r\n      a = [6, a - 9, 2];\r\n      break;\r\n    case 16 >= a:\r\n      a = [7, a - 13, 2];\r\n      break;\r\n    case 24 >= a:\r\n      a = [8, a - 17, 3];\r\n      break;\r\n    case 32 >= a:\r\n      a = [9, a - 25, 3];\r\n      break;\r\n    case 48 >= a:\r\n      a = [10, a - 33, 4];\r\n      break;\r\n    case 64 >= a:\r\n      a = [11, a - 49, 4];\r\n      break;\r\n    case 96 >= a:\r\n      a = [12, a - 65, 5];\r\n      break;\r\n    case 128 >= a:\r\n      a = [13, a - 97, 5];\r\n      break;\r\n    case 192 >= a:\r\n      a = [14, a - 129, 6];\r\n      break;\r\n    case 256 >= a:\r\n      a = [15, a - 193, 6];\r\n      break;\r\n    case 384 >= a:\r\n      a = [16, a - 257, 7];\r\n      break;\r\n    case 512 >= a:\r\n      a = [17, a - 385, 7];\r\n      break;\r\n    case 768 >= a:\r\n      a = [18, a - 513, 8];\r\n      break;\r\n    case 1024 >= a:\r\n      a = [19, a - 769, 8];\r\n      break;\r\n    case 1536 >= a:\r\n      a = [20, a - 1025, 9];\r\n      break;\r\n    case 2048 >= a:\r\n      a = [21, a - 1537, 9];\r\n      break;\r\n    case 3072 >= a:\r\n      a = [22, a - 2049, 10];\r\n      break;\r\n    case 4096 >= a:\r\n      a = [23, a - 3073, 10];\r\n      break;\r\n    case 6144 >= a:\r\n      a = [24, a - 4097, 11];\r\n      break;\r\n    case 8192 >= a:\r\n      a = [25, a - 6145, 11];\r\n      break;\r\n    case 12288 >= a:\r\n      a = [26, a - 8193, 12];\r\n      break;\r\n    case 16384 >= a:\r\n      a = [27, a - 12289, 12];\r\n      break;\r\n    case 24576 >= a:\r\n      a = [28, a - 16385, 13];\r\n      break;\r\n    case 32768 >= a:\r\n      a = [29, a - 24577, 13];\r\n      break;\r\n    default:\r\n      throw"invalid distance";\r\n  }\r\n  return a\r\n};\r\nZlib.RawDeflate.Lz77Match.prototype.toLz77Array = function() {\r\n  var a = this.backwardDistance, b = [], c = 0, d;\r\n  d = Zlib.RawDeflate.Lz77Match.LengthCodeTable[this.length];\r\n  b[c++] = d & 65535;\r\n  b[c++] = d >> 16 & 255;\r\n  b[c++] = d >> 24;\r\n  d = this.getDistanceCode_(a);\r\n  b[c++] = d[0];\r\n  b[c++] = d[1];\r\n  b[c++] = d[2];\r\n  return b\r\n};\r\nZlib.RawDeflate.prototype.lz77 = function(a) {\r\n  function b(a, b) {\r\n    var c = a.toLz77Array(), d, e;\r\n    d = 0;\r\n    for(e = c.length;d < e;++d) {\r\n      l[m++] = c[d]\r\n    }\r\n    n[c[0]]++;\r\n    q[c[3]]++;\r\n    k = a.length + b - 1;\r\n    j = null\r\n  }\r\n  var c, d, e, f, g, h = {}, i = Zlib.RawDeflate.WindowSize, j, l = USE_TYPEDARRAY ? new Uint16Array(2 * a.length) : [], m = 0, k = 0, n = new (USE_TYPEDARRAY ? Uint32Array : Array)(286), q = new (USE_TYPEDARRAY ? Uint32Array : Array)(30), p = this.lazy;\r\n  if(!USE_TYPEDARRAY) {\r\n    for(e = 0;285 >= e;) {\r\n      n[e++] = 0\r\n    }\r\n    for(e = 0;29 >= e;) {\r\n      q[e++] = 0\r\n    }\r\n  }\r\n  n[256] = 1;\r\n  c = 0;\r\n  for(d = a.length;c < d;++c) {\r\n    e = g = 0;\r\n    for(f = Zlib.RawDeflate.Lz77MinLength;e < f && c + e !== d;++e) {\r\n      g = g << 8 | a[c + e]\r\n    }\r\n    void 0 === h[g] && (h[g] = []);\r\n    e = h[g];\r\n    if(!(0 < k--)) {\r\n      for(;0 < e.length && c - e[0] > i;) {\r\n        e.shift()\r\n      }\r\n      if(c + Zlib.RawDeflate.Lz77MinLength >= d) {\r\n        j && b(j, -1);\r\n        e = 0;\r\n        for(f = d - c;e < f;++e) {\r\n          g = a[c + e], l[m++] = g, ++n[g]\r\n        }\r\n        break\r\n      }\r\n      0 < e.length ? (f = this.searchLongestMatch_(a, c, e), j ? j.length < f.length ? (g = a[c - 1], l[m++] = g, ++n[g], b(f, 0)) : b(j, -1) : f.length < p ? j = f : b(f, 0)) : j ? b(j, -1) : (g = a[c], l[m++] = g, ++n[g])\r\n    }\r\n    e.push(c)\r\n  }\r\n  l[m++] = 256;\r\n  n[256]++;\r\n  this.freqsLitLen = n;\r\n  this.freqsDist = q;\r\n  return USE_TYPEDARRAY ? l.subarray(0, m) : l\r\n};\r\nZlib.RawDeflate.prototype.searchLongestMatch_ = function(a, b, c) {\r\n  var d, e, f = 0, g, h, i, j = a.length;\r\n  h = 0;\r\n  i = c.length;\r\n  a:for(;h < i;h++) {\r\n    d = c[i - h - 1];\r\n    g = Zlib.RawDeflate.Lz77MinLength;\r\n    if(f > Zlib.RawDeflate.Lz77MinLength) {\r\n      for(g = f;g > Zlib.RawDeflate.Lz77MinLength;g--) {\r\n        if(a[d + g - 1] !== a[b + g - 1]) {\r\n          continue a\r\n        }\r\n      }\r\n      g = f\r\n    }\r\n    for(;g < Zlib.RawDeflate.Lz77MaxLength && b + g < j && a[d + g] === a[b + g];) {\r\n      ++g\r\n    }\r\n    g > f && (e = d, f = g);\r\n    if(g === Zlib.RawDeflate.Lz77MaxLength) {\r\n      break\r\n    }\r\n  }\r\n  return new Zlib.RawDeflate.Lz77Match(f, b - e)\r\n};\r\nZlib.RawDeflate.prototype.getTreeSymbols_ = function(a, b, c, d) {\r\n  var e = new (USE_TYPEDARRAY ? Uint32Array : Array)(a + c), f, g, h = new (USE_TYPEDARRAY ? Uint32Array : Array)(316), i = new (USE_TYPEDARRAY ? Uint8Array : Array)(19);\r\n  for(f = g = 0;f < a;f++) {\r\n    e[g++] = b[f]\r\n  }\r\n  for(f = 0;f < c;f++) {\r\n    e[g++] = d[f]\r\n  }\r\n  if(!USE_TYPEDARRAY) {\r\n    f = 0;\r\n    for(b = i.length;f < b;++f) {\r\n      i[f] = 0\r\n    }\r\n  }\r\n  f = c = 0;\r\n  for(b = e.length;f < b;f += g) {\r\n    for(g = 1;f + g < b && e[f + g] === e[f];++g) {\r\n    }\r\n    a = g;\r\n    if(0 === e[f]) {\r\n      if(3 > a) {\r\n        for(;0 < a--;) {\r\n          h[c++] = 0, i[0]++\r\n        }\r\n      }else {\r\n        for(;0 < a;) {\r\n          d = 138 > a ? a : 138, d > a - 3 && d < a && (d = a - 3), 10 >= d ? (h[c++] = 17, h[c++] = d - 3, i[17]++) : (h[c++] = 18, h[c++] = d - 11, i[18]++), a -= d\r\n        }\r\n      }\r\n    }else {\r\n      if(h[c++] = e[f], i[e[f]]++, a--, 3 > a) {\r\n        for(;0 < a--;) {\r\n          h[c++] = e[f], i[e[f]]++\r\n        }\r\n      }else {\r\n        for(;0 < a;) {\r\n          d = 6 > a ? a : 6, d > a - 3 && d < a && (d = a - 3), h[c++] = 16, h[c++] = d - 3, i[16]++, a -= d\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return{codes:USE_TYPEDARRAY ? h.subarray(0, c) : h.slice(0, c), freqs:i}\r\n};\r\nZlib.RawDeflate.prototype.getLengths_ = function(a, b) {\r\n  var c = a.length, d = new Zlib.Heap(2 * Zlib.RawDeflate.HUFMAX), e = new (USE_TYPEDARRAY ? Uint8Array : Array)(c), f, g, h;\r\n  if(!USE_TYPEDARRAY) {\r\n    for(g = 0;g < c;g++) {\r\n      e[g] = 0\r\n    }\r\n  }\r\n  for(g = 0;g < c;++g) {\r\n    0 < a[g] && d.push(g, a[g])\r\n  }\r\n  c = Array(d.length / 2);\r\n  f = new (USE_TYPEDARRAY ? Uint32Array : Array)(d.length / 2);\r\n  if(1 === c.length) {\r\n    return e[d.pop().index] = 1, e\r\n  }\r\n  g = 0;\r\n  for(h = d.length / 2;g < h;++g) {\r\n    c[g] = d.pop(), f[g] = c[g].value\r\n  }\r\n  d = this.reversePackageMerge_(f, f.length, b);\r\n  g = 0;\r\n  for(h = c.length;g < h;++g) {\r\n    e[c[g].index] = d[g]\r\n  }\r\n  return e\r\n};\r\nZlib.RawDeflate.prototype.reversePackageMerge_ = function(a, b, c) {\r\n  function d(a) {\r\n    var c = i[a][j[a]];\r\n    c === b ? (d(a + 1), d(a + 1)) : --g[c];\r\n    ++j[a]\r\n  }\r\n  var e = new (USE_TYPEDARRAY ? Uint16Array : Array)(c), f = new (USE_TYPEDARRAY ? Uint8Array : Array)(c), g = new (USE_TYPEDARRAY ? Uint8Array : Array)(b), h = Array(c), i = Array(c), j = Array(c), l = (1 << c) - b, m = 1 << c - 1, k, n;\r\n  e[c - 1] = b;\r\n  for(k = 0;k < c;++k) {\r\n    l < m ? f[k] = 0 : (f[k] = 1, l -= m), l <<= 1, e[c - 2 - k] = (e[c - 1 - k] / 2 | 0) + b\r\n  }\r\n  e[0] = f[0];\r\n  h[0] = Array(e[0]);\r\n  i[0] = Array(e[0]);\r\n  for(k = 1;k < c;++k) {\r\n    e[k] > 2 * e[k - 1] + f[k] && (e[k] = 2 * e[k - 1] + f[k]), h[k] = Array(e[k]), i[k] = Array(e[k])\r\n  }\r\n  for(l = 0;l < b;++l) {\r\n    g[l] = c\r\n  }\r\n  for(m = 0;m < e[c - 1];++m) {\r\n    h[c - 1][m] = a[m], i[c - 1][m] = m\r\n  }\r\n  for(l = 0;l < c;++l) {\r\n    j[l] = 0\r\n  }\r\n  1 === f[c - 1] && (--g[0], ++j[c - 1]);\r\n  for(k = c - 2;0 <= k;--k) {\r\n    c = l = 0;\r\n    n = j[k + 1];\r\n    for(m = 0;m < e[k];m++) {\r\n      c = h[k + 1][n] + h[k + 1][n + 1], c > a[l] ? (h[k][m] = c, i[k][m] = b, n += 2) : (h[k][m] = a[l], i[k][m] = l, ++l)\r\n    }\r\n    j[k] = 0;\r\n    1 === f[k] && d(k)\r\n  }\r\n  return g\r\n};\r\nZlib.RawDeflate.prototype.getCodesFromLengths_ = function(a) {\r\n  var b = new (USE_TYPEDARRAY ? Uint16Array : Array)(a.length), c = [], d = [], e = 0, f, g, h;\r\n  f = 0;\r\n  for(g = a.length;f < g;f++) {\r\n    c[a[f]] = (c[a[f]] | 0) + 1\r\n  }\r\n  f = 1;\r\n  for(g = Zlib.RawDeflate.MaxCodeLength;f <= g;f++) {\r\n    d[f] = e, e += c[f] | 0, e <<= 1\r\n  }\r\n  f = 0;\r\n  for(g = a.length;f < g;f++) {\r\n    e = d[a[f]];\r\n    d[a[f]] += 1;\r\n    c = b[f] = 0;\r\n    for(h = a[f];c < h;c++) {\r\n      b[f] = b[f] << 1 | e & 1, e >>>= 1\r\n    }\r\n  }\r\n  return b\r\n};\r\nZlib.Gzip = function(a, b) {\r\n  this.input = a;\r\n  this.op = this.ip = 0;\r\n  this.flags = {};\r\n  b && (b.flags && (this.flags = b.flags), "string" === typeof b.filename && (this.filename = b.filename), "string" === typeof b.comment && (this.comment = b.comment), b.deflateOptions && (this.deflateOptions = b.deflateOptions));\r\n  this.deflateOptions || (this.deflateOptions = {})\r\n};\r\nZlib.Gzip.DefaultBufferSize = 32768;\r\nZlib.Gzip.prototype.compress = function() {\r\n  var a, b, c, d, e, f = new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.Gzip.DefaultBufferSize);\r\n  c = 0;\r\n  var g = this.input, h = this.ip;\r\n  b = this.filename;\r\n  var i = this.comment;\r\n  f[c++] = 31;\r\n  f[c++] = 139;\r\n  f[c++] = 8;\r\n  a = 0;\r\n  this.flags.fname && (a |= Zlib.Gzip.FlagsMask.FNAME);\r\n  this.flags.fcomment && (a |= Zlib.Gzip.FlagsMask.FCOMMENT);\r\n  this.flags.fhcrc && (a |= Zlib.Gzip.FlagsMask.FHCRC);\r\n  f[c++] = a;\r\n  a = (Date.now ? Date.now() : +new Date) / 1E3 | 0;\r\n  f[c++] = a & 255;\r\n  f[c++] = a >>> 8 & 255;\r\n  f[c++] = a >>> 16 & 255;\r\n  f[c++] = a >>> 24 & 255;\r\n  f[c++] = 0;\r\n  f[c++] = Zlib.Gzip.OperatingSystem.UNKNOWN;\r\n  if(void 0 !== this.flags.fname) {\r\n    d = 0;\r\n    for(e = b.length;d < e;++d) {\r\n      a = b.charCodeAt(d), 255 < a && (f[c++] = a >>> 8 & 255), f[c++] = a & 255\r\n    }\r\n    f[c++] = 0\r\n  }\r\n  if(this.flags.comment) {\r\n    d = 0;\r\n    for(e = i.length;d < e;++d) {\r\n      a = i.charCodeAt(d), 255 < a && (f[c++] = a >>> 8 & 255), f[c++] = a & 255\r\n    }\r\n    f[c++] = 0\r\n  }\r\n  this.flags.fhcrc && (b = Zlib.CRC32.calc(f, 0, c) & 65535, f[c++] = b & 255, f[c++] = b >>> 8 & 255);\r\n  this.deflateOptions.outputBuffer = f;\r\n  this.deflateOptions.outputIndex = c;\r\n  c = new Zlib.RawDeflate(g, this.deflateOptions);\r\n  f = c.compress();\r\n  c = c.op;\r\n  USE_TYPEDARRAY && (c + 8 > f.buffer.byteLength ? (this.output = new Uint8Array(c + 8), this.output.set(new Uint8Array(f.buffer)), f = this.output) : f = new Uint8Array(f.buffer));\r\n  b = Zlib.CRC32.calc(g);\r\n  f[c++] = b & 255;\r\n  f[c++] = b >>> 8 & 255;\r\n  f[c++] = b >>> 16 & 255;\r\n  f[c++] = b >>> 24 & 255;\r\n  e = g.length;\r\n  f[c++] = e & 255;\r\n  f[c++] = e >>> 8 & 255;\r\n  f[c++] = e >>> 16 & 255;\r\n  f[c++] = e >>> 24 & 255;\r\n  this.ip = h;\r\n  USE_TYPEDARRAY && c < f.length && (this.output = f = f.subarray(0, c));\r\n  return f\r\n};\r\nZlib.Gzip.OperatingSystem = {FAT:0, AMIGA:1, VMS:2, UNIX:3, VM_CMS:4, ATARI_TOS:5, HPFS:6, MACINTOSH:7, Z_SYSTEM:8, CP_M:9, TOPS_20:10, NTFS:11, QDOS:12, ACORN_RISCOS:13, UNKNOWN:255};\r\nZlib.Gzip.FlagsMask = {FTEXT:1, FHCRC:2, FEXTRA:4, FNAME:8, FCOMMENT:16};\r\nvar ZLIB_RAW_INFLATE_BUFFER_SIZE = 32768;\r\nZlib.RawInflate = function(a, b) {\r\n  this.blocks = [];\r\n  this.bufferSize = ZLIB_RAW_INFLATE_BUFFER_SIZE;\r\n  this.bitsbuflen = this.bitsbuf = this.ip = this.totalpos = 0;\r\n  this.input = USE_TYPEDARRAY ? new Uint8Array(a) : a;\r\n  this.bfinal = !1;\r\n  this.bufferType = Zlib.RawInflate.BufferType.ADAPTIVE;\r\n  this.resize = !1;\r\n  if(b || !(b = {})) {\r\n    b.index && (this.ip = b.index), b.bufferSize && (this.bufferSize = b.bufferSize), b.bufferType && (this.bufferType = b.bufferType), b.resize && (this.resize = b.resize)\r\n  }\r\n  switch(this.bufferType) {\r\n    case Zlib.RawInflate.BufferType.BLOCK:\r\n      this.op = Zlib.RawInflate.MaxBackwardLength;\r\n      this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.RawInflate.MaxBackwardLength + this.bufferSize + Zlib.RawInflate.MaxCopyLength);\r\n      break;\r\n    case Zlib.RawInflate.BufferType.ADAPTIVE:\r\n      this.op = 0;\r\n      this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(this.bufferSize);\r\n      this.expandBuffer = this.expandBufferAdaptive;\r\n      this.concatBuffer = this.concatBufferDynamic;\r\n      this.decodeHuffman = this.decodeHuffmanAdaptive;\r\n      break;\r\n    default:\r\n      throw Error("invalid inflate mode");\r\n  }\r\n};\r\nZlib.RawInflate.BufferType = {BLOCK:0, ADAPTIVE:1};\r\nZlib.RawInflate.prototype.decompress = function() {\r\n  for(;!this.bfinal;) {\r\n    this.parseBlock()\r\n  }\r\n  return this.concatBuffer()\r\n};\r\nZlib.RawInflate.MaxBackwardLength = 32768;\r\nZlib.RawInflate.MaxCopyLength = 258;\r\nZlib.RawInflate.Order = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint16Array(a) : a\r\n}([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\r\nZlib.RawInflate.LengthCodeTable = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint16Array(a) : a\r\n}([3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 258, 258]);\r\nZlib.RawInflate.LengthExtraTable = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint8Array(a) : a\r\n}([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]);\r\nZlib.RawInflate.DistCodeTable = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint16Array(a) : a\r\n}([1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]);\r\nZlib.RawInflate.DistExtraTable = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint8Array(a) : a\r\n}([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);\r\nZlib.RawInflate.FixedLiteralLengthTable = function(a) {\r\n  return a\r\n}(function() {\r\n  var a = new (USE_TYPEDARRAY ? Uint8Array : Array)(288), b, c;\r\n  b = 0;\r\n  for(c = a.length;b < c;++b) {\r\n    a[b] = 143 >= b ? 8 : 255 >= b ? 9 : 279 >= b ? 7 : 8\r\n  }\r\n  return(0,Zlib.Huffman.buildHuffmanTable)(a)\r\n}());\r\nZlib.RawInflate.FixedDistanceTable = function(a) {\r\n  return a\r\n}(function() {\r\n  var a = new (USE_TYPEDARRAY ? Uint8Array : Array)(30), b, c;\r\n  b = 0;\r\n  for(c = a.length;b < c;++b) {\r\n    a[b] = 5\r\n  }\r\n  return(0,Zlib.Huffman.buildHuffmanTable)(a)\r\n}());\r\nZlib.RawInflate.prototype.parseBlock = function() {\r\n  var a = this.readBits(3);\r\n  a & 1 && (this.bfinal = !0);\r\n  a >>>= 1;\r\n  switch(a) {\r\n    case 0:\r\n      this.parseUncompressedBlock();\r\n      break;\r\n    case 1:\r\n      this.parseFixedHuffmanBlock();\r\n      break;\r\n    case 2:\r\n      this.parseDynamicHuffmanBlock();\r\n      break;\r\n    default:\r\n      throw Error("unknown BTYPE: " + a);\r\n  }\r\n};\r\nZlib.RawInflate.prototype.readBits = function(a) {\r\n  for(var b = this.bitsbuf, c = this.bitsbuflen, d = this.input, e = this.ip, f;c < a;) {\r\n    f = d[e++];\r\n    if(void 0 === f) {\r\n      throw Error("input buffer is broken");\r\n    }\r\n    b |= f << c;\r\n    c += 8\r\n  }\r\n  f = b & (1 << a) - 1;\r\n  this.bitsbuf = b >>> a;\r\n  this.bitsbuflen = c - a;\r\n  this.ip = e;\r\n  return f\r\n};\r\nZlib.RawInflate.prototype.readCodeByTable = function(a) {\r\n  for(var b = this.bitsbuf, c = this.bitsbuflen, d = this.input, e = this.ip, f = a[0], a = a[1], g;c < a;) {\r\n    g = d[e++];\r\n    if(void 0 === g) {\r\n      throw Error("input buffer is broken");\r\n    }\r\n    b |= g << c;\r\n    c += 8\r\n  }\r\n  d = f[b & (1 << a) - 1];\r\n  f = d >>> 16;\r\n  this.bitsbuf = b >> f;\r\n  this.bitsbuflen = c - f;\r\n  this.ip = e;\r\n  return d & 65535\r\n};\r\nZlib.RawInflate.prototype.parseUncompressedBlock = function() {\r\n  var a = this.input, b = this.ip, c = this.output, d = this.op, e, f, g, h = c.length;\r\n  this.bitsbuflen = this.bitsbuf = 0;\r\n  e = a[b++];\r\n  if(void 0 === e) {\r\n    throw Error("invalid uncompressed block header: LEN (first byte)");\r\n  }\r\n  f = e;\r\n  e = a[b++];\r\n  if(void 0 === e) {\r\n    throw Error("invalid uncompressed block header: LEN (second byte)");\r\n  }\r\n  f |= e << 8;\r\n  e = a[b++];\r\n  if(void 0 === e) {\r\n    throw Error("invalid uncompressed block header: NLEN (first byte)");\r\n  }\r\n  g = e;\r\n  e = a[b++];\r\n  if(void 0 === e) {\r\n    throw Error("invalid uncompressed block header: NLEN (second byte)");\r\n  }\r\n  if(f === ~(g | e << 8)) {\r\n    throw Error("invalid uncompressed block header: length verify");\r\n  }\r\n  if(b + f > a.length) {\r\n    throw Error("input buffer is broken");\r\n  }\r\n  switch(this.bufferType) {\r\n    case Zlib.RawInflate.BufferType.BLOCK:\r\n      for(;d + f > c.length;) {\r\n        e = h - d;\r\n        f -= e;\r\n        if(USE_TYPEDARRAY) {\r\n          c.set(a.subarray(b, b + e), d), d += e, b += e\r\n        }else {\r\n          for(;e--;) {\r\n            c[d++] = a[b++]\r\n          }\r\n        }\r\n        this.op = d;\r\n        c = this.expandBuffer();\r\n        d = this.op\r\n      }\r\n      break;\r\n    case Zlib.RawInflate.BufferType.ADAPTIVE:\r\n      for(;d + f > c.length;) {\r\n        c = this.expandBuffer({fixRatio:2})\r\n      }\r\n      break;\r\n    default:\r\n      throw Error("invalid inflate mode");\r\n  }\r\n  if(USE_TYPEDARRAY) {\r\n    c.set(a.subarray(b, b + f), d), d += f, b += f\r\n  }else {\r\n    for(;f--;) {\r\n      c[d++] = a[b++]\r\n    }\r\n  }\r\n  this.ip = b;\r\n  this.op = d;\r\n  this.output = c\r\n};\r\nZlib.RawInflate.prototype.parseFixedHuffmanBlock = function() {\r\n  this.decodeHuffman(Zlib.RawInflate.FixedLiteralLengthTable, Zlib.RawInflate.FixedDistanceTable)\r\n};\r\nZlib.RawInflate.prototype.parseDynamicHuffmanBlock = function() {\r\n  function a(a, b, c) {\r\n    var d, e, f;\r\n    for(f = 0;f < a;) {\r\n      switch(d = this.readCodeByTable(b), d) {\r\n        case 16:\r\n          for(d = 3 + this.readBits(2);d--;) {\r\n            c[f++] = e\r\n          }\r\n          break;\r\n        case 17:\r\n          for(d = 3 + this.readBits(3);d--;) {\r\n            c[f++] = 0\r\n          }\r\n          e = 0;\r\n          break;\r\n        case 18:\r\n          for(d = 11 + this.readBits(7);d--;) {\r\n            c[f++] = 0\r\n          }\r\n          e = 0;\r\n          break;\r\n        default:\r\n          e = c[f++] = d\r\n      }\r\n    }\r\n    return c\r\n  }\r\n  var b = this.readBits(5) + 257, c = this.readBits(5) + 1, d = this.readBits(4) + 4, e = new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.RawInflate.Order.length), f;\r\n  for(f = 0;f < d;++f) {\r\n    e[Zlib.RawInflate.Order[f]] = this.readBits(3)\r\n  }\r\n  d = (0,Zlib.Huffman.buildHuffmanTable)(e);\r\n  e = new (USE_TYPEDARRAY ? Uint8Array : Array)(b);\r\n  f = new (USE_TYPEDARRAY ? Uint8Array : Array)(c);\r\n  this.decodeHuffman((0,Zlib.Huffman.buildHuffmanTable)(a.call(this, b, d, e)), (0,Zlib.Huffman.buildHuffmanTable)(a.call(this, c, d, f)))\r\n};\r\nZlib.RawInflate.prototype.decodeHuffman = function(a, b) {\r\n  var c = this.output, d = this.op;\r\n  this.currentLitlenTable = a;\r\n  for(var e = c.length - Zlib.RawInflate.MaxCopyLength, f, g, h;256 !== (f = this.readCodeByTable(a));) {\r\n    if(256 > f) {\r\n      d >= e && (this.op = d, c = this.expandBuffer(), d = this.op), c[d++] = f\r\n    }else {\r\n      f -= 257;\r\n      h = Zlib.RawInflate.LengthCodeTable[f];\r\n      0 < Zlib.RawInflate.LengthExtraTable[f] && (h += this.readBits(Zlib.RawInflate.LengthExtraTable[f]));\r\n      f = this.readCodeByTable(b);\r\n      g = Zlib.RawInflate.DistCodeTable[f];\r\n      0 < Zlib.RawInflate.DistExtraTable[f] && (g += this.readBits(Zlib.RawInflate.DistExtraTable[f]));\r\n      d >= e && (this.op = d, c = this.expandBuffer(), d = this.op);\r\n      for(;h--;) {\r\n        c[d] = c[d++ - g]\r\n      }\r\n    }\r\n  }\r\n  for(;8 <= this.bitsbuflen;) {\r\n    this.bitsbuflen -= 8, this.ip--\r\n  }\r\n  this.op = d\r\n};\r\nZlib.RawInflate.prototype.decodeHuffmanAdaptive = function(a, b) {\r\n  var c = this.output, d = this.op;\r\n  this.currentLitlenTable = a;\r\n  for(var e = c.length, f, g, h;256 !== (f = this.readCodeByTable(a));) {\r\n    if(256 > f) {\r\n      d >= e && (c = this.expandBuffer(), e = c.length), c[d++] = f\r\n    }else {\r\n      f -= 257;\r\n      h = Zlib.RawInflate.LengthCodeTable[f];\r\n      0 < Zlib.RawInflate.LengthExtraTable[f] && (h += this.readBits(Zlib.RawInflate.LengthExtraTable[f]));\r\n      f = this.readCodeByTable(b);\r\n      g = Zlib.RawInflate.DistCodeTable[f];\r\n      0 < Zlib.RawInflate.DistExtraTable[f] && (g += this.readBits(Zlib.RawInflate.DistExtraTable[f]));\r\n      d + h > e && (c = this.expandBuffer(), e = c.length);\r\n      for(;h--;) {\r\n        c[d] = c[d++ - g]\r\n      }\r\n    }\r\n  }\r\n  for(;8 <= this.bitsbuflen;) {\r\n    this.bitsbuflen -= 8, this.ip--\r\n  }\r\n  this.op = d\r\n};\r\nZlib.RawInflate.prototype.expandBuffer = function() {\r\n  var a = new (USE_TYPEDARRAY ? Uint8Array : Array)(this.op - Zlib.RawInflate.MaxBackwardLength), b = this.op - Zlib.RawInflate.MaxBackwardLength, c, d, e = this.output;\r\n  if(USE_TYPEDARRAY) {\r\n    a.set(e.subarray(Zlib.RawInflate.MaxBackwardLength, a.length))\r\n  }else {\r\n    c = 0;\r\n    for(d = a.length;c < d;++c) {\r\n      a[c] = e[c + Zlib.RawInflate.MaxBackwardLength]\r\n    }\r\n  }\r\n  this.blocks.push(a);\r\n  this.totalpos += a.length;\r\n  if(USE_TYPEDARRAY) {\r\n    e.set(e.subarray(b, b + Zlib.RawInflate.MaxBackwardLength))\r\n  }else {\r\n    for(c = 0;c < Zlib.RawInflate.MaxBackwardLength;++c) {\r\n      e[c] = e[b + c]\r\n    }\r\n  }\r\n  this.op = Zlib.RawInflate.MaxBackwardLength;\r\n  return e\r\n};\r\nZlib.RawInflate.prototype.expandBufferAdaptive = function(a) {\r\n  var b = this.input.length / this.ip + 1 | 0, c = this.input, d = this.output;\r\n  a && ("number" === typeof a.fixRatio && (b = a.fixRatio), "number" === typeof a.addRatio && (b += a.addRatio));\r\n  2 > b ? (a = (c.length - this.ip) / this.currentLitlenTable[2], a = 258 * (a / 2) | 0, a = a < d.length ? d.length + a : d.length << 1) : a = d.length * b;\r\n  USE_TYPEDARRAY ? (a = new Uint8Array(a), a.set(d)) : a = d;\r\n  return this.output = a\r\n};\r\nZlib.RawInflate.prototype.concatBuffer = function() {\r\n  var a = 0, b = this.output, c = this.blocks, d, e = new (USE_TYPEDARRAY ? Uint8Array : Array)(this.totalpos + (this.op - Zlib.RawInflate.MaxBackwardLength)), f, g, h, i;\r\n  if(0 === c.length) {\r\n    return USE_TYPEDARRAY ? this.output.subarray(Zlib.RawInflate.MaxBackwardLength, this.op) : this.output.slice(Zlib.RawInflate.MaxBackwardLength, this.op)\r\n  }\r\n  f = 0;\r\n  for(g = c.length;f < g;++f) {\r\n    d = c[f];\r\n    h = 0;\r\n    for(i = d.length;h < i;++h) {\r\n      e[a++] = d[h]\r\n    }\r\n  }\r\n  f = Zlib.RawInflate.MaxBackwardLength;\r\n  for(g = this.op;f < g;++f) {\r\n    e[a++] = b[f]\r\n  }\r\n  this.blocks = [];\r\n  return this.buffer = e\r\n};\r\nZlib.RawInflate.prototype.concatBufferDynamic = function() {\r\n  var a, b = this.op;\r\n  USE_TYPEDARRAY ? this.resize ? (a = new Uint8Array(b), a.set(this.output.subarray(0, b))) : a = this.output.subarray(0, b) : (this.output.length > b && (this.output.length = b), a = this.output);\r\n  return this.buffer = a\r\n};\r\nZlib.Gunzip = function(a) {\r\n  this.input = a;\r\n  this.ip = 0;\r\n  this.member = [];\r\n  this.decompressed = !1\r\n};\r\nZlib.Gunzip.prototype.getMembers = function() {\r\n  this.decompressed || this.decompress();\r\n  return this.member.slice()\r\n};\r\nZlib.Gunzip.prototype.decompress = function() {\r\n  for(var a = this.input.length;this.ip < a;) {\r\n    this.decodeMember()\r\n  }\r\n  this.decompressed = !0;\r\n  return this.concatMember()\r\n};\r\nZlib.Gunzip.prototype.decodeMember = function() {\r\n  var a = new Zlib.GunzipMember, b, c, d, e, f, g = this.input;\r\n  c = this.ip;\r\n  a.id1 = g[c++];\r\n  a.id2 = g[c++];\r\n  if(31 !== a.id1 || 139 !== a.id2) {\r\n    throw Error("invalid file signature:" + a.id1 + "," + a.id2);\r\n  }\r\n  a.cm = g[c++];\r\n  switch(a.cm) {\r\n    case 8:\r\n      break;\r\n    default:\r\n      throw Error("unknown compression method: " + a.cm);\r\n  }\r\n  a.flg = g[c++];\r\n  b = g[c++] | g[c++] << 8 | g[c++] << 16 | g[c++] << 24;\r\n  a.mtime = new Date(1E3 * b);\r\n  a.xfl = g[c++];\r\n  a.os = g[c++];\r\n  0 < (a.flg & Zlib.Gzip.FlagsMask.FEXTRA) && (a.xlen = g[c++] | g[c++] << 8, c = this.decodeSubField(c, a.xlen));\r\n  if(0 < (a.flg & Zlib.Gzip.FlagsMask.FNAME)) {\r\n    f = [];\r\n    for(e = 0;0 < (b = g[c++]);) {\r\n      f[e++] = String.fromCharCode(b)\r\n    }\r\n    a.name = f.join("")\r\n  }\r\n  if(0 < (a.flg & Zlib.Gzip.FlagsMask.FCOMMENT)) {\r\n    f = [];\r\n    for(e = 0;0 < (b = g[c++]);) {\r\n      f[e++] = String.fromCharCode(b)\r\n    }\r\n    a.comment = f.join("")\r\n  }\r\n  if(0 < (a.flg & Zlib.Gzip.FlagsMask.FHCRC) && (a.crc16 = Zlib.CRC32.calc(g, 0, c) & 65535, a.crc16 !== (g[c++] | g[c++] << 8))) {\r\n    throw Error("invalid header crc16");\r\n  }\r\n  b = g[g.length - 4] | g[g.length - 3] << 8 | g[g.length - 2] << 16 | g[g.length - 1] << 24;\r\n  g.length - c - 4 - 4 < 512 * b && (d = b);\r\n  c = new Zlib.RawInflate(g, {index:c, bufferSize:d});\r\n  a.data = d = c.decompress();\r\n  c = c.ip;\r\n  a.crc32 = b = (g[c++] | g[c++] << 8 | g[c++] << 16 | g[c++] << 24) >>> 0;\r\n  if(Zlib.CRC32.calc(d) !== b) {\r\n    throw Error("invalid CRC-32 checksum: 0x" + Zlib.CRC32.calc(d).toString(16) + " / 0x" + b.toString(16));\r\n  }\r\n  a.isize = b = (g[c++] | g[c++] << 8 | g[c++] << 16 | g[c++] << 24) >>> 0;\r\n  if((d.length & 4294967295) !== b) {\r\n    throw Error("invalid input size: " + (d.length & 4294967295) + " / " + b);\r\n  }\r\n  this.member.push(a);\r\n  this.ip = c\r\n};\r\nZlib.Gunzip.prototype.decodeSubField = function(a, b) {\r\n  return a + b\r\n};\r\nZlib.Gunzip.prototype.concatMember = function() {\r\n  var a = this.member, b, c, d = 0, e = 0;\r\n  b = 0;\r\n  for(c = a.length;b < c;++b) {\r\n    e += a[b].data.length\r\n  }\r\n  if(USE_TYPEDARRAY) {\r\n    e = new Uint8Array(e);\r\n    for(b = 0;b < c;++b) {\r\n      e.set(a[b].data, d), d += a[b].data.length\r\n    }\r\n  }else {\r\n    e = [];\r\n    for(b = 0;b < c;++b) {\r\n      e[b] = a[b].data\r\n    }\r\n    e = Array.prototype.concat.apply([], e)\r\n  }\r\n  return e\r\n};\r\nvar ZLIB_STREAM_RAW_INFLATE_BUFFER_SIZE = 32768;\r\nZlib.RawInflateStream = function(a, b, c) {\r\n  this.blocks = [];\r\n  this.bufferSize = c ? c : ZLIB_STREAM_RAW_INFLATE_BUFFER_SIZE;\r\n  this.totalpos = 0;\r\n  this.ip = void 0 === b ? 0 : b;\r\n  this.bitsbuflen = this.bitsbuf = 0;\r\n  this.input = USE_TYPEDARRAY ? new Uint8Array(a) : a;\r\n  this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(this.bufferSize);\r\n  this.op = 0;\r\n  this.resize = this.bfinal = !1;\r\n  this.sp = 0;\r\n  this.status = Zlib.RawInflateStream.Status.INITIALIZED\r\n};\r\nZlib.RawInflateStream.BlockType = {UNCOMPRESSED:0, FIXED:1, DYNAMIC:2};\r\nZlib.RawInflateStream.Status = {INITIALIZED:0, BLOCK_HEADER_START:1, BLOCK_HEADER_END:2, BLOCK_BODY_START:3, BLOCK_BODY_END:4, DECODE_BLOCK_START:5, DECODE_BLOCK_END:6};\r\nZlib.RawInflateStream.prototype.decompress = function(a, b) {\r\n  var c = !1;\r\n  void 0 !== a && (this.input = a);\r\n  void 0 !== b && (this.ip = b);\r\n  for(;!c;) {\r\n    switch(this.status) {\r\n      case Zlib.RawInflateStream.Status.INITIALIZED:\r\n      ;\r\n      case Zlib.RawInflateStream.Status.BLOCK_HEADER_START:\r\n        0 > this.readBlockHeader() && (c = !0);\r\n        break;\r\n      case Zlib.RawInflateStream.Status.BLOCK_HEADER_END:\r\n      ;\r\n      case Zlib.RawInflateStream.Status.BLOCK_BODY_START:\r\n        switch(this.currentBlockType) {\r\n          case Zlib.RawInflateStream.BlockType.UNCOMPRESSED:\r\n            0 > this.readUncompressedBlockHeader() && (c = !0);\r\n            break;\r\n          case Zlib.RawInflateStream.BlockType.FIXED:\r\n            0 > this.parseFixedHuffmanBlock() && (c = !0);\r\n            break;\r\n          case Zlib.RawInflateStream.BlockType.DYNAMIC:\r\n            0 > this.parseDynamicHuffmanBlock() && (c = !0)\r\n        }\r\n        break;\r\n      case Zlib.RawInflateStream.Status.BLOCK_BODY_END:\r\n      ;\r\n      case Zlib.RawInflateStream.Status.DECODE_BLOCK_START:\r\n        switch(this.currentBlockType) {\r\n          case Zlib.RawInflateStream.BlockType.UNCOMPRESSED:\r\n            0 > this.parseUncompressedBlock() && (c = !0);\r\n            break;\r\n          case Zlib.RawInflateStream.BlockType.FIXED:\r\n          ;\r\n          case Zlib.RawInflateStream.BlockType.DYNAMIC:\r\n            0 > this.decodeHuffman() && (c = !0)\r\n        }\r\n        break;\r\n      case Zlib.RawInflateStream.Status.DECODE_BLOCK_END:\r\n        this.bfinal ? c = !0 : this.status = Zlib.RawInflateStream.Status.INITIALIZED\r\n    }\r\n  }\r\n  return this.concatBuffer()\r\n};\r\nZlib.RawInflateStream.MaxBackwardLength = 32768;\r\nZlib.RawInflateStream.MaxCopyLength = 258;\r\nZlib.RawInflateStream.Order = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint16Array(a) : a\r\n}([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\r\nZlib.RawInflateStream.LengthCodeTable = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint16Array(a) : a\r\n}([3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 258, 258]);\r\nZlib.RawInflateStream.LengthExtraTable = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint8Array(a) : a\r\n}([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]);\r\nZlib.RawInflateStream.DistCodeTable = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint16Array(a) : a\r\n}([1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]);\r\nZlib.RawInflateStream.DistExtraTable = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint8Array(a) : a\r\n}([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);\r\nZlib.RawInflateStream.FixedLiteralLengthTable = function(a) {\r\n  return a\r\n}(function() {\r\n  var a = new (USE_TYPEDARRAY ? Uint8Array : Array)(288), b, c;\r\n  b = 0;\r\n  for(c = a.length;b < c;++b) {\r\n    a[b] = 143 >= b ? 8 : 255 >= b ? 9 : 279 >= b ? 7 : 8\r\n  }\r\n  return(0,Zlib.Huffman.buildHuffmanTable)(a)\r\n}());\r\nZlib.RawInflateStream.FixedDistanceTable = function(a) {\r\n  return a\r\n}(function() {\r\n  var a = new (USE_TYPEDARRAY ? Uint8Array : Array)(30), b, c;\r\n  b = 0;\r\n  for(c = a.length;b < c;++b) {\r\n    a[b] = 5\r\n  }\r\n  return(0,Zlib.Huffman.buildHuffmanTable)(a)\r\n}());\r\nZlib.RawInflateStream.prototype.readBlockHeader = function() {\r\n  var a;\r\n  this.status = Zlib.RawInflateStream.Status.BLOCK_HEADER_START;\r\n  this.save_();\r\n  if(0 > (a = this.readBits(3))) {\r\n    return this.restore_(), -1\r\n  }\r\n  a & 1 && (this.bfinal = !0);\r\n  a >>>= 1;\r\n  switch(a) {\r\n    case 0:\r\n      this.currentBlockType = Zlib.RawInflateStream.BlockType.UNCOMPRESSED;\r\n      break;\r\n    case 1:\r\n      this.currentBlockType = Zlib.RawInflateStream.BlockType.FIXED;\r\n      break;\r\n    case 2:\r\n      this.currentBlockType = Zlib.RawInflateStream.BlockType.DYNAMIC;\r\n      break;\r\n    default:\r\n      throw Error("unknown BTYPE: " + a);\r\n  }\r\n  this.status = Zlib.RawInflateStream.Status.BLOCK_HEADER_END\r\n};\r\nZlib.RawInflateStream.prototype.readBits = function(a) {\r\n  for(var b = this.bitsbuf, c = this.bitsbuflen, d = this.input, e = this.ip, f;c < a;) {\r\n    f = d[e++];\r\n    if(void 0 === f) {\r\n      return-1\r\n    }\r\n    b |= f << c;\r\n    c += 8\r\n  }\r\n  f = b & (1 << a) - 1;\r\n  this.bitsbuf = b >>> a;\r\n  this.bitsbuflen = c - a;\r\n  this.ip = e;\r\n  return f\r\n};\r\nZlib.RawInflateStream.prototype.readCodeByTable = function(a) {\r\n  for(var b = this.bitsbuf, c = this.bitsbuflen, d = this.input, e = this.ip, f = a[0], a = a[1], g;c < a;) {\r\n    g = d[e++];\r\n    if(void 0 === g) {\r\n      return-1\r\n    }\r\n    b |= g << c;\r\n    c += 8\r\n  }\r\n  d = f[b & (1 << a) - 1];\r\n  f = d >>> 16;\r\n  this.bitsbuf = b >> f;\r\n  this.bitsbuflen = c - f;\r\n  this.ip = e;\r\n  return d & 65535\r\n};\r\nZlib.RawInflateStream.prototype.readUncompressedBlockHeader = function() {\r\n  var a, b, c, d = this.input, e = this.ip;\r\n  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_START;\r\n  a = d[e++];\r\n  if(void 0 === a) {\r\n    return-1\r\n  }\r\n  b = a;\r\n  a = d[e++];\r\n  if(void 0 === a) {\r\n    return-1\r\n  }\r\n  b |= a << 8;\r\n  a = d[e++];\r\n  if(void 0 === a) {\r\n    return-1\r\n  }\r\n  c = a;\r\n  a = d[e++];\r\n  if(void 0 === a) {\r\n    return-1\r\n  }\r\n  if(b === ~(c | a << 8)) {\r\n    throw Error("invalid uncompressed block header: length verify");\r\n  }\r\n  this.bitsbuflen = this.bitsbuf = 0;\r\n  this.ip = e;\r\n  this.blockLength = b;\r\n  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_END\r\n};\r\nZlib.RawInflateStream.prototype.parseUncompressedBlock = function() {\r\n  var a = this.input, b = this.ip, c = this.output, d = this.op, e = this.blockLength;\r\n  for(this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_START;e--;) {\r\n    d === c.length && (c = this.expandBuffer());\r\n    if(void 0 === a[b]) {\r\n      return this.ip = b, this.op = d, this.blockLength = e + 1, -1\r\n    }\r\n    c[d++] = a[b++]\r\n  }\r\n  0 > e && (this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_END);\r\n  this.ip = b;\r\n  this.op = d;\r\n  return 0\r\n};\r\nZlib.RawInflateStream.prototype.parseFixedHuffmanBlock = function() {\r\n  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_START;\r\n  this.litlenTable = Zlib.RawInflateStream.FixedLiteralLengthTable;\r\n  this.distTable = Zlib.RawInflateStream.FixedDistanceTable;\r\n  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_END;\r\n  return 0\r\n};\r\nZlib.RawInflateStream.prototype.save_ = function() {\r\n  this.ip_ = this.ip;\r\n  this.bitsbuflen_ = this.bitsbuflen;\r\n  this.bitsbuf_ = this.bitsbuf\r\n};\r\nZlib.RawInflateStream.prototype.restore_ = function() {\r\n  this.ip = this.ip_;\r\n  this.bitsbuflen = this.bitsbuflen_;\r\n  this.bitsbuf = this.bitsbuf_\r\n};\r\nZlib.RawInflateStream.prototype.parseDynamicHuffmanBlock = function() {\r\n  var a, b, c, d = new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.RawInflateStream.Order.length), e, f, g, h = 0;\r\n  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_START;\r\n  this.save_();\r\n  a = this.readBits(5) + 257;\r\n  b = this.readBits(5) + 1;\r\n  c = this.readBits(4) + 4;\r\n  if(0 > a || 0 > b || 0 > c) {\r\n    return this.restore_(), -1\r\n  }\r\n  try {\r\n    for(var i = function(a, b, c) {\r\n      for(var d, e, f = 0, f = 0;f < a;) {\r\n        d = this.readCodeByTable(b);\r\n        if(0 > d) {\r\n          throw Error("not enough input");\r\n        }\r\n        switch(d) {\r\n          case 16:\r\n            if(0 > (d = this.readBits(2))) {\r\n              throw Error("not enough input");\r\n            }\r\n            for(d = 3 + d;d--;) {\r\n              c[f++] = e\r\n            }\r\n            break;\r\n          case 17:\r\n            if(0 > (d = this.readBits(3))) {\r\n              throw Error("not enough input");\r\n            }\r\n            for(d = 3 + d;d--;) {\r\n              c[f++] = 0\r\n            }\r\n            e = 0;\r\n            break;\r\n          case 18:\r\n            if(0 > (d = this.readBits(7))) {\r\n              throw Error("not enough input");\r\n            }\r\n            for(d = 11 + d;d--;) {\r\n              c[f++] = 0\r\n            }\r\n            e = 0;\r\n            break;\r\n          default:\r\n            e = c[f++] = d\r\n        }\r\n      }\r\n      return c\r\n    }, j, h = 0;h < c;++h) {\r\n      if(0 > (j = this.readBits(3))) {\r\n        throw Error("not enough input");\r\n      }\r\n      d[Zlib.RawInflateStream.Order[h]] = j\r\n    }\r\n    e = (0,Zlib.Huffman.buildHuffmanTable)(d);\r\n    f = new (USE_TYPEDARRAY ? Uint8Array : Array)(a);\r\n    g = new (USE_TYPEDARRAY ? Uint8Array : Array)(b);\r\n    this.litlenTable = (0,Zlib.Huffman.buildHuffmanTable)(i.call(this, a, e, f));\r\n    this.distTable = (0,Zlib.Huffman.buildHuffmanTable)(i.call(this, b, e, g))\r\n  }catch(l) {\r\n    return this.restore_(), -1\r\n  }\r\n  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_END;\r\n  return 0\r\n};\r\nZlib.RawInflateStream.prototype.decodeHuffman = function() {\r\n  var a = this.output, b = this.op, c, d, e, f = this.litlenTable, g = this.distTable, h = a.length;\r\n  for(this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_START;;) {\r\n    this.save_();\r\n    c = this.readCodeByTable(f);\r\n    if(0 > c) {\r\n      return this.op = b, this.restore_(), -1\r\n    }\r\n    if(256 === c) {\r\n      break\r\n    }\r\n    if(256 > c) {\r\n      b === h && (a = this.expandBuffer(), h = a.length), a[b++] = c\r\n    }else {\r\n      d = c - 257;\r\n      e = Zlib.RawInflateStream.LengthCodeTable[d];\r\n      if(0 < Zlib.RawInflateStream.LengthExtraTable[d]) {\r\n        c = this.readBits(Zlib.RawInflateStream.LengthExtraTable[d]);\r\n        if(0 > c) {\r\n          return this.op = b, this.restore_(), -1\r\n        }\r\n        e += c\r\n      }\r\n      c = this.readCodeByTable(g);\r\n      if(0 > c) {\r\n        return this.op = b, this.restore_(), -1\r\n      }\r\n      d = Zlib.RawInflateStream.DistCodeTable[c];\r\n      if(0 < Zlib.RawInflateStream.DistExtraTable[c]) {\r\n        c = this.readBits(Zlib.RawInflateStream.DistExtraTable[c]);\r\n        if(0 > c) {\r\n          return this.op = b, this.restore_(), -1\r\n        }\r\n        d += c\r\n      }\r\n      b + e >= h && (a = this.expandBuffer(), h = a.length);\r\n      for(;e--;) {\r\n        a[b] = a[b++ - d]\r\n      }\r\n      if(this.ip === this.input.length) {\r\n        return this.op = b, -1\r\n      }\r\n    }\r\n  }\r\n  for(;8 <= this.bitsbuflen;) {\r\n    this.bitsbuflen -= 8, this.ip--\r\n  }\r\n  this.op = b;\r\n  this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_END\r\n};\r\nZlib.RawInflateStream.prototype.expandBuffer = function(a) {\r\n  var b = this.input.length / this.ip + 1 | 0, c = this.input, d = this.output;\r\n  a && ("number" === typeof a.fixRatio && (b = a.fixRatio), "number" === typeof a.addRatio && (b += a.addRatio));\r\n  2 > b ? (a = (c.length - this.ip) / this.litlenTable[2], a = 258 * (a / 2) | 0, a = a < d.length ? d.length + a : d.length << 1) : a = d.length * b;\r\n  USE_TYPEDARRAY ? (a = new Uint8Array(a), a.set(d)) : a = d;\r\n  return this.output = a\r\n};\r\nZlib.RawInflateStream.prototype.concatBuffer = function() {\r\n  var a, b = this.op;\r\n  this.resize ? USE_TYPEDARRAY ? (a = new Uint8Array(b), a.set(this.output.subarray(this.sp, b))) : a = this.output.slice(this.sp, b) : a = USE_TYPEDARRAY ? this.output.subarray(this.sp, b) : this.output.slice(this.sp, b);\r\n  this.buffer = a;\r\n  this.sp = b;\r\n  return this.buffer\r\n};\r\nZlib.RawInflateStream.prototype.getBytes = function() {\r\n  return USE_TYPEDARRAY ? this.output.subarray(0, this.op) : this.output.slice(0, this.op)\r\n};\r\nZlib.InflateStream = function(a) {\r\n  this.input = void 0 === a ? new (USE_TYPEDARRAY ? Uint8Array : Array) : a;\r\n  this.ip = 0;\r\n  this.rawinflate = new Zlib.RawInflateStream(this.input, this.ip);\r\n  this.output = this.rawinflate.output\r\n};\r\nZlib.InflateStream.prototype.decompress = function(a) {\r\n  if(void 0 !== a) {\r\n    if(USE_TYPEDARRAY) {\r\n      var b = new Uint8Array(this.input.length + a.length);\r\n      b.set(this.input, 0);\r\n      b.set(a, this.input.length);\r\n      this.input = b\r\n    }else {\r\n      this.input = this.input.concat(a)\r\n    }\r\n  }\r\n  if(void 0 === this.method && 0 > this.readHeader()) {\r\n    return new (USE_TYPEDARRAY ? Uint8Array : Array)\r\n  }\r\n  a = this.rawinflate.decompress(this.input, this.ip);\r\n  this.ip = this.rawinflate.ip;\r\n  return a\r\n};\r\nZlib.InflateStream.prototype.getBytes = function() {\r\n  return this.rawinflate.getBytes()\r\n};\r\nZlib.InflateStream.prototype.readHeader = function() {\r\n  var a = this.ip, b = this.input, c = b[a++], b = b[a++];\r\n  if(void 0 === c || void 0 === b) {\r\n    return-1\r\n  }\r\n  switch(c & 15) {\r\n    case Zlib.CompressionMethod.DEFLATE:\r\n      this.method = Zlib.CompressionMethod.DEFLATE;\r\n      break;\r\n    default:\r\n      throw Error("unsupported compression method");\r\n  }\r\n  if(0 !== ((c << 8) + b) % 31) {\r\n    throw Error("invalid fcheck flag:" + ((c << 8) + b) % 31);\r\n  }\r\n  if(b & 32) {\r\n    throw Error("fdict flag is not supported");\r\n  }\r\n  this.ip = a\r\n};\r\nZlib.Util = {};\r\nZlib.Util.stringToByteArray = function(a) {\r\n  var a = a.split(""), b, c;\r\n  b = 0;\r\n  for(c = a.length;b < c;b++) {\r\n    a[b] = (a[b].charCodeAt(0) & 255) >>> 0\r\n  }\r\n  return a\r\n};\r\nZlib.Adler32 = function(a) {\r\n  "string" === typeof a && (a = Zlib.Util.stringToByteArray(a));\r\n  return Zlib.Adler32.update(1, a)\r\n};\r\nZlib.Adler32.update = function(a, b) {\r\n  for(var c = a & 65535, d = a >>> 16 & 65535, e = b.length, f, g = 0;0 < e;) {\r\n    f = e > Zlib.Adler32.OptimizationParameter ? Zlib.Adler32.OptimizationParameter : e;\r\n    e -= f;\r\n    do {\r\n      c += b[g++], d += c\r\n    }while(--f);\r\n    c %= 65521;\r\n    d %= 65521\r\n  }\r\n  return(d << 16 | c) >>> 0\r\n};\r\nZlib.Adler32.OptimizationParameter = 1024;\r\nZlib.Deflate = function(a, b) {\r\n  this.input = a;\r\n  this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.Deflate.DefaultBufferSize);\r\n  this.compressionType = Zlib.Deflate.CompressionType.DYNAMIC;\r\n  var c = {}, d;\r\n  if((b || !(b = {})) && "number" === typeof b.compressionType) {\r\n    this.compressionType = b.compressionType\r\n  }\r\n  for(d in b) {\r\n    c[d] = b[d]\r\n  }\r\n  c.outputBuffer = this.output;\r\n  this.rawDeflate = new Zlib.RawDeflate(this.input, c)\r\n};\r\nZlib.Deflate.DefaultBufferSize = 32768;\r\nZlib.Deflate.CompressionType = Zlib.RawDeflate.CompressionType;\r\nZlib.Deflate.compress = function(a, b) {\r\n  return(new Zlib.Deflate(a, b)).compress()\r\n};\r\nZlib.Deflate.prototype.compress = function() {\r\n  var a, b, c, d = 0;\r\n  c = this.output;\r\n  a = Zlib.CompressionMethod.DEFLATE;\r\n  switch(a) {\r\n    case Zlib.CompressionMethod.DEFLATE:\r\n      b = Math.LOG2E * Math.log(Zlib.RawDeflate.WindowSize) - 8;\r\n      break;\r\n    default:\r\n      throw Error("invalid compression method");\r\n  }\r\n  b = b << 4 | a;\r\n  c[d++] = b;\r\n  switch(a) {\r\n    case Zlib.CompressionMethod.DEFLATE:\r\n      switch(this.compressionType) {\r\n        case Zlib.Deflate.CompressionType.NONE:\r\n          a = 0;\r\n          break;\r\n        case Zlib.Deflate.CompressionType.FIXED:\r\n          a = 1;\r\n          break;\r\n        case Zlib.Deflate.CompressionType.DYNAMIC:\r\n          a = 2;\r\n          break;\r\n        default:\r\n          throw Error("unsupported compression type");\r\n      }\r\n      break;\r\n    default:\r\n      throw Error("invalid compression method");\r\n  }\r\n  a = a << 6 | 0;\r\n  c[d++] = a | 31 - (256 * b + a) % 31;\r\n  b = Zlib.Adler32(this.input);\r\n  this.rawDeflate.op = d;\r\n  c = this.rawDeflate.compress();\r\n  d = c.length;\r\n  USE_TYPEDARRAY && (c = new Uint8Array(c.buffer), c.length <= d + 4 && (this.output = new Uint8Array(c.length + 4), this.output.set(c), c = this.output), c = c.subarray(0, d + 4));\r\n  c[d++] = b >> 24 & 255;\r\n  c[d++] = b >> 16 & 255;\r\n  c[d++] = b >> 8 & 255;\r\n  c[d++] = b & 255;\r\n  return c\r\n};\r\nZlib.Inflate = function(a, b) {\r\n  var c, d;\r\n  this.input = a;\r\n  this.ip = 0;\r\n  if(b || !(b = {})) {\r\n    b.index && (this.ip = b.index), b.verify && (this.verify = b.verify)\r\n  }\r\n  c = a[this.ip++];\r\n  d = a[this.ip++];\r\n  switch(c & 15) {\r\n    case Zlib.CompressionMethod.DEFLATE:\r\n      this.method = Zlib.CompressionMethod.DEFLATE;\r\n      break;\r\n    default:\r\n      throw Error("unsupported compression method");\r\n  }\r\n  if(0 !== ((c << 8) + d) % 31) {\r\n    throw Error("invalid fcheck flag:" + ((c << 8) + d) % 31);\r\n  }\r\n  if(d & 32) {\r\n    throw Error("fdict flag is not supported");\r\n  }\r\n  this.rawinflate = new Zlib.RawInflate(a, {index:this.ip, bufferSize:b.bufferSize, bufferType:b.bufferType, resize:b.resize})\r\n};\r\nZlib.Inflate.BufferType = Zlib.RawInflate.BufferType;\r\nZlib.Inflate.prototype.decompress = function() {\r\n  var a = this.input, b;\r\n  b = this.rawinflate.decompress();\r\n  this.ip = this.rawinflate.ip;\r\n  if(this.verify && (a = (a[this.ip++] << 24 | a[this.ip++] << 16 | a[this.ip++] << 8 | a[this.ip++]) >>> 0, a !== Zlib.Adler32(b))) {\r\n    throw Error("invalid adler-32 checksum");\r\n  }\r\n  return b\r\n};\r\ngoog.exportSymbol("Zlib.Inflate", Zlib.Inflate);\r\ngoog.exportSymbol("Zlib.Inflate.prototype.decompress", Zlib.Inflate.prototype.decompress);\r\nZlib.exportObject("Zlib.Inflate.BufferType", {ADAPTIVE:Zlib.Inflate.BufferType.ADAPTIVE, BLOCK:Zlib.Inflate.BufferType.BLOCK});\r\nZlib.Zip = function(a) {\r\n  a = a || {};\r\n  this.files = [];\r\n  this.comment = a.comment\r\n};\r\nZlib.Zip.prototype.addFile = function(a, b) {\r\n  var b = b || {}, c, d = a.length, e = 0;\r\n  USE_TYPEDARRAY && a instanceof Array && (a = new Uint8Array(a));\r\n  "number" !== typeof b.compressionMethod && (b.compressionMethod = Zlib.Zip.CompressionMethod.DEFLATE);\r\n  if(b.compress) {\r\n    switch(b.compressionMethod) {\r\n      case Zlib.Zip.CompressionMethod.STORE:\r\n        break;\r\n      case Zlib.Zip.CompressionMethod.DEFLATE:\r\n        e = Zlib.CRC32.calc(a);\r\n        a = this.deflateWithOption(a, b);\r\n        c = !0;\r\n        break;\r\n      default:\r\n        throw Error("unknown compression method:" + b.compressionMethod);\r\n    }\r\n  }\r\n  this.files.push({buffer:a, option:b, compressed:c, size:d, crc32:e})\r\n};\r\nZlib.Zip.CompressionMethod = {STORE:0, DEFLATE:8};\r\nZlib.Zip.OperatingSystem = {MSDOS:0, UNIX:3, MACINTOSH:7};\r\nZlib.Zip.prototype.compress = function() {\r\n  var a = this.files, b, c, d, e, f, g = 0, h = 0, i, j, l, m, k, n;\r\n  k = 0;\r\n  for(n = a.length;k < n;++k) {\r\n    b = a[k];\r\n    l = b.option.filename ? b.option.filename.length : 0;\r\n    m = b.option.comment ? b.option.comment.length : 0;\r\n    if(!b.compressed) {\r\n      switch(b.crc32 = Zlib.CRC32.calc(b.buffer), b.option.compressionMethod) {\r\n        case Zlib.Zip.CompressionMethod.STORE:\r\n          break;\r\n        case Zlib.Zip.CompressionMethod.DEFLATE:\r\n          b.buffer = this.deflateWithOption(b.buffer, b.option);\r\n          b.compressed = !0;\r\n          break;\r\n        default:\r\n          throw Error("unknown compression method:" + b.option.compressionMethod);\r\n      }\r\n    }\r\n    g += 30 + l + b.buffer.length;\r\n    h += 46 + l + m\r\n  }\r\n  c = new (USE_TYPEDARRAY ? Uint8Array : Array)(g + h + (46 + (this.comment ? this.comment.length : 0)));\r\n  d = 0;\r\n  e = g;\r\n  f = e + h;\r\n  k = 0;\r\n  for(n = a.length;k < n;++k) {\r\n    b = a[k];\r\n    l = b.option.filename ? b.option.filename.length : 0;\r\n    m = b.option.comment ? b.option.comment.length : 0;\r\n    i = d;\r\n    c[d++] = c[e++] = 80;\r\n    c[d++] = c[e++] = 75;\r\n    c[d++] = 3;\r\n    c[d++] = 4;\r\n    c[e++] = 1;\r\n    c[e++] = 2;\r\n    c[e++] = 20;\r\n    c[e++] = b.option.os || Zlib.Zip.OperatingSystem.MSDOS;\r\n    c[d++] = c[e++] = 20;\r\n    c[d++] = c[e++] = 0;\r\n    c[d++] = c[e++] = 0;\r\n    c[d++] = c[e++] = 0;\r\n    j = b.option.compressionMethod;\r\n    c[d++] = c[e++] = j & 255;\r\n    c[d++] = c[e++] = j >> 8 & 255;\r\n    j = b.option.date || new Date;\r\n    c[d++] = c[e++] = (j.getMinutes() & 7) << 5 | j.getSeconds() / 2 | 0;\r\n    c[d++] = c[e++] = j.getHours() << 3 | j.getMinutes() >> 3;\r\n    c[d++] = c[e++] = (j.getMonth() + 1 & 7) << 5 | j.getDate();\r\n    c[d++] = c[e++] = (j.getFullYear() - 1980 & 127) << 1 | j.getMonth() + 1 >> 3;\r\n    j = b.crc32;\r\n    c[d++] = c[e++] = j & 255;\r\n    c[d++] = c[e++] = j >> 8 & 255;\r\n    c[d++] = c[e++] = j >> 16 & 255;\r\n    c[d++] = c[e++] = j >> 24 & 255;\r\n    j = b.buffer.length;\r\n    c[d++] = c[e++] = j & 255;\r\n    c[d++] = c[e++] = j >> 8 & 255;\r\n    c[d++] = c[e++] = j >> 16 & 255;\r\n    c[d++] = c[e++] = j >> 24 & 255;\r\n    j = b.size;\r\n    c[d++] = c[e++] = j & 255;\r\n    c[d++] = c[e++] = j >> 8 & 255;\r\n    c[d++] = c[e++] = j >> 16 & 255;\r\n    c[d++] = c[e++] = j >> 24 & 255;\r\n    c[d++] = c[e++] = l & 255;\r\n    c[d++] = c[e++] = l >> 8 & 255;\r\n    c[d++] = c[e++] = 0;\r\n    c[d++] = c[e++] = 0;\r\n    c[e++] = m & 255;\r\n    c[e++] = m >> 8 & 255;\r\n    c[e++] = 0;\r\n    c[e++] = 0;\r\n    c[e++] = 0;\r\n    c[e++] = 0;\r\n    c[e++] = 0;\r\n    c[e++] = 0;\r\n    c[e++] = 0;\r\n    c[e++] = 0;\r\n    c[e++] = i & 255;\r\n    c[e++] = i >> 8 & 255;\r\n    c[e++] = i >> 16 & 255;\r\n    c[e++] = i >> 24 & 255;\r\n    if(j = b.option.filename) {\r\n      if(USE_TYPEDARRAY) {\r\n        c.set(j, d), c.set(j, e), d += l, e += l\r\n      }else {\r\n        for(i = 0;i < l;++i) {\r\n          c[d++] = c[e++] = j[i]\r\n        }\r\n      }\r\n    }\r\n    if(l = b.option.extraField) {\r\n      if(USE_TYPEDARRAY) {\r\n        c.set(l, d), c.set(l, e), d += 0, e += 0\r\n      }else {\r\n        for(i = 0;i < m;++i) {\r\n          c[d++] = c[e++] = l[i]\r\n        }\r\n      }\r\n    }\r\n    if(l = b.option.comment) {\r\n      if(USE_TYPEDARRAY) {\r\n        c.set(l, e), e += m\r\n      }else {\r\n        for(i = 0;i < m;++i) {\r\n          c[e++] = l[i]\r\n        }\r\n      }\r\n    }\r\n    if(USE_TYPEDARRAY) {\r\n      c.set(b.buffer, d), d += b.buffer.length\r\n    }else {\r\n      i = 0;\r\n      for(m = b.buffer.length;i < m;++i) {\r\n        c[d++] = b.buffer[i]\r\n      }\r\n    }\r\n  }\r\n  c[f++] = 80;\r\n  c[f++] = 75;\r\n  c[f++] = 5;\r\n  c[f++] = 6;\r\n  c[f++] = 0;\r\n  c[f++] = 0;\r\n  c[f++] = 0;\r\n  c[f++] = 0;\r\n  c[f++] = n & 255;\r\n  c[f++] = n >> 8 & 255;\r\n  c[f++] = n & 255;\r\n  c[f++] = n >> 8 & 255;\r\n  c[f++] = h & 255;\r\n  c[f++] = h >> 8 & 255;\r\n  c[f++] = h >> 16 & 255;\r\n  c[f++] = h >> 24 & 255;\r\n  c[f++] = g & 255;\r\n  c[f++] = g >> 8 & 255;\r\n  c[f++] = g >> 16 & 255;\r\n  c[f++] = g >> 24 & 255;\r\n  m = this.comment ? this.comment.length : 0;\r\n  c[f++] = m & 255;\r\n  c[f++] = m >> 8 & 255;\r\n  if(this.comment) {\r\n    if(USE_TYPEDARRAY) {\r\n      c.set(this.comment, f)\r\n    }else {\r\n      for(i = 0;i < m;++i) {\r\n        c[f++] = this.comment[i]\r\n      }\r\n    }\r\n  }\r\n  return c\r\n};\r\nZlib.Zip.prototype.deflateWithOption = function(a, b) {\r\n  return(new Zlib.RawDeflate(a, b.deflateOption)).compress()\r\n};\r\nZlib.Unzip = function(a, b) {\r\n  b = b || {};\r\n  this.input = USE_TYPEDARRAY && a instanceof Array ? new Uint8Array(a) : a;\r\n  this.ip = 0;\r\n  this.verify = b.verify || !1\r\n};\r\nZlib.Unzip.CompressionMethod = Zlib.Zip.CompressionMethod;\r\nZlib.Unzip.FileHeader = function(a, b) {\r\n  this.input = a;\r\n  this.offset = b\r\n};\r\nZlib.Unzip.FileHeader.prototype.parse = function() {\r\n  var a = this.input, b = this.offset;\r\n  if(80 !== a[b++] || 75 !== a[b++] || 1 !== a[b++] || 2 !== a[b++]) {\r\n    throw Error("invalid file header signature");\r\n  }\r\n  this.version = a[b++];\r\n  this.os = a[b++];\r\n  this.needVersion = a[b++] | a[b++] << 8;\r\n  this.flags = a[b++] | a[b++] << 8;\r\n  this.compression = a[b++] | a[b++] << 8;\r\n  this.time = a[b++] | a[b++] << 8;\r\n  this.date = a[b++] | a[b++] << 8;\r\n  this.crc32 = (a[b++] | a[b++] << 8 | a[b++] << 16 | a[b++] << 24) >>> 0;\r\n  this.compressedSize = a[b++] | a[b++] << 8 | a[b++] << 16 | a[b++] << 24;\r\n  this.plainSize = a[b++] | a[b++] << 8 | a[b++] << 16 | a[b++] << 24;\r\n  this.fileNameLength = a[b++] | a[b++] << 8;\r\n  this.extraFieldLength = a[b++] | a[b++] << 8;\r\n  this.fileCommentLength = a[b++] | a[b++] << 8;\r\n  this.diskNumberStart = a[b++] | a[b++] << 8;\r\n  this.internalFileAttributes = a[b++] | a[b++] << 8;\r\n  this.externalFileAttributes = a[b++] | a[b++] << 8 | a[b++] << 16 | a[b++] << 24;\r\n  this.relativeOffset = a[b++] | a[b++] << 8 | a[b++] << 16 | a[b++] << 24;\r\n  this.filename = String.fromCharCode.apply(null, USE_TYPEDARRAY ? a.subarray(b, b += this.fileNameLength) : a.slice(b, b += this.fileNameLength));\r\n  this.extraField = USE_TYPEDARRAY ? a.subarray(b, b += this.extraFieldLength) : a.slice(b, b += this.extraFieldLength);\r\n  this.comment = USE_TYPEDARRAY ? a.subarray(b, b + this.fileCommentLength) : a.slice(b, b + this.fileCommentLength);\r\n  this.length = b - this.offset\r\n};\r\nZlib.Unzip.LocalFileHeader = function(a, b) {\r\n  this.input = a;\r\n  this.offset = b\r\n};\r\nZlib.Unzip.LocalFileHeader.prototype.parse = function() {\r\n  var a = this.input, b = this.offset;\r\n  if(80 !== a[b++] || 75 !== a[b++] || 3 !== a[b++] || 4 !== a[b++]) {\r\n    throw Error("invalid local file header signature");\r\n  }\r\n  this.needVersion = a[b++] | a[b++] << 8;\r\n  this.flags = a[b++] | a[b++] << 8;\r\n  this.compression = a[b++] | a[b++] << 8;\r\n  this.time = a[b++] | a[b++] << 8;\r\n  this.date = a[b++] | a[b++] << 8;\r\n  this.crc32 = (a[b++] | a[b++] << 8 | a[b++] << 16 | a[b++] << 24) >>> 0;\r\n  this.compressedSize = a[b++] | a[b++] << 8 | a[b++] << 16 | a[b++] << 24;\r\n  this.plainSize = a[b++] | a[b++] << 8 | a[b++] << 16 | a[b++] << 24;\r\n  this.fileNameLength = a[b++] | a[b++] << 8;\r\n  this.extraFieldLength = a[b++] | a[b++] << 8;\r\n  this.filename = String.fromCharCode.apply(null, USE_TYPEDARRAY ? a.subarray(b, b += this.fileNameLength) : a.slice(b, b += this.fileNameLength));\r\n  this.extraField = USE_TYPEDARRAY ? a.subarray(b, b += this.extraFieldLength) : a.slice(b, b += this.extraFieldLength);\r\n  this.length = b - this.offset\r\n};\r\nZlib.Unzip.prototype.searchEndOfCentralDirectoryRecord = function() {\r\n  var a = this.input, b;\r\n  for(b = a.length - 12;0 < b;--b) {\r\n    if(80 === a[b] && 75 === a[b + 1] && 5 === a[b + 2] && 6 === a[b + 3]) {\r\n      this.eocdrOffset = b;\r\n      return\r\n    }\r\n  }\r\n  throw Error("End of Central Directory Record not found");\r\n};\r\nZlib.Unzip.prototype.parseEndOfCentralDirectoryRecord = function() {\r\n  var a = this.input, b;\r\n  this.eocdrOffset || this.searchEndOfCentralDirectoryRecord();\r\n  b = this.eocdrOffset;\r\n  if(80 !== a[b++] || 75 !== a[b++] || 5 !== a[b++] || 6 !== a[b++]) {\r\n    throw Error("invalid signature");\r\n  }\r\n  this.numberOfThisDisk = a[b++] | a[b++] << 8;\r\n  this.startDisk = a[b++] | a[b++] << 8;\r\n  this.totalEntriesThisDisk = a[b++] | a[b++] << 8;\r\n  this.totalEntries = a[b++] | a[b++] << 8;\r\n  this.centralDirectorySize = a[b++] | a[b++] << 8 | a[b++] << 16 | a[b++] << 24;\r\n  this.centralDirectoryOffset = a[b++] | a[b++] << 8 | a[b++] << 16 | a[b++] << 24;\r\n  this.commentLength = a[b++] | a[b++] << 8;\r\n  this.comment = USE_TYPEDARRAY ? a.subarray(b, b + this.commentLength) : a.slice(b, b + this.commentLength)\r\n};\r\nZlib.Unzip.prototype.parseFileHeader = function() {\r\n  var a = [], b = {}, c, d, e, f;\r\n  if(!this.fileHeaderList) {\r\n    void 0 === this.centralDirectoryOffset && this.parseEndOfCentralDirectoryRecord();\r\n    c = this.centralDirectoryOffset;\r\n    e = 0;\r\n    for(f = this.totalEntries;e < f;++e) {\r\n      d = new Zlib.Unzip.FileHeader(this.input, c), d.parse(), c += d.length, a[e] = d, b[d.filename] = e\r\n    }\r\n    if(this.centralDirectorySize < c - this.centralDirectoryOffset) {\r\n      throw Error("invalid file header size");\r\n    }\r\n    this.fileHeaderList = a;\r\n    this.filenameToIndex = b\r\n  }\r\n};\r\nZlib.Unzip.prototype.getFileData = function(a) {\r\n  var b = this.fileHeaderList, c;\r\n  b || this.parseFileHeader();\r\n  if(void 0 === b[a]) {\r\n    throw Error("wrong index");\r\n  }\r\n  b = b[a].relativeOffset;\r\n  a = new Zlib.Unzip.LocalFileHeader(this.input, b);\r\n  a.parse();\r\n  b += a.length;\r\n  c = a.compressedSize;\r\n  switch(a.compression) {\r\n    case Zlib.Unzip.CompressionMethod.STORE:\r\n      b = USE_TYPEDARRAY ? this.input.subarray(b, b + c) : this.input.slice(b, b + c);\r\n      break;\r\n    case Zlib.Unzip.CompressionMethod.DEFLATE:\r\n      b = (new Zlib.RawInflate(this.input, {index:b, bufferSize:a.plainSize})).decompress();\r\n      break;\r\n    default:\r\n      throw Error("unknown compression type");\r\n  }\r\n  if(this.verify && (c = Zlib.CRC32.calc(b), a.crc32 !== c)) {\r\n    throw Error("wrong crc: file=0x" + a.crc32.toString(16) + ", data=0x" + c.toString(16));\r\n  }\r\n  return b\r\n};\r\nZlib.Unzip.prototype.getFilenames = function() {\r\n  var a = [], b, c, d;\r\n  this.fileHeaderList || this.parseFileHeader();\r\n  d = this.fileHeaderList;\r\n  b = 0;\r\n  for(c = d.length;b < c;++b) {\r\n    a[b] = d[b].filename\r\n  }\r\n  return a\r\n};\r\nZlib.Unzip.prototype.decompress = function(a) {\r\n  var b;\r\n  this.filenameToIndex || this.parseFileHeader();\r\n  b = this.filenameToIndex[a];\r\n  if(void 0 === b) {\r\n    throw Error(a + " not found");\r\n  }\r\n  return this.getFileData(b)\r\n};\r\nZlib.CompressionMethod = {DEFLATE:8, RESERVED:15};\r\n}).call(this);\r\n\ndefine("thirdparty/inflate.min", function(){});\n\n/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */\r\n(function() {\'use strict\';var COMPILED = !0, goog = goog || {};\r\ngoog.global = this;\r\ngoog.DEBUG = !1;\r\ngoog.LOCALE = "en";\r\ngoog.provide = function(a) {\r\n  if(!COMPILED) {\r\n    if(goog.isProvided_(a)) {\r\n      throw Error(\'Namespace "\' + a + \'" already declared.\');\r\n    }\r\n    delete goog.implicitNamespaces_[a];\r\n    for(var b = a;(b = b.substring(0, b.lastIndexOf("."))) && !goog.getObjectByName(b);) {\r\n      goog.implicitNamespaces_[b] = !0\r\n    }\r\n  }\r\n  goog.exportPath_(a)\r\n};\r\ngoog.setTestOnly = function(a) {\r\n  if(COMPILED && !goog.DEBUG) {\r\n    throw a = a || "", Error("Importing test-only code into non-debug environment" + a ? ": " + a : ".");\r\n  }\r\n};\r\nCOMPILED || (goog.isProvided_ = function(a) {\r\n  return!goog.implicitNamespaces_[a] && !!goog.getObjectByName(a)\r\n}, goog.implicitNamespaces_ = {});\r\ngoog.exportPath_ = function(a, b, c) {\r\n  a = a.split(".");\r\n  c = c || goog.global;\r\n  !(a[0] in c) && c.execScript && c.execScript("var " + a[0]);\r\n  for(var d;a.length && (d = a.shift());) {\r\n    !a.length && goog.isDef(b) ? c[d] = b : c = c[d] ? c[d] : c[d] = {}\r\n  }\r\n};\r\ngoog.getObjectByName = function(a, b) {\r\n  for(var c = a.split("."), d = b || goog.global, e;e = c.shift();) {\r\n    if(goog.isDefAndNotNull(d[e])) {\r\n      d = d[e]\r\n    }else {\r\n      return null\r\n    }\r\n  }\r\n  return d\r\n};\r\ngoog.globalize = function(a, b) {\r\n  var c = b || goog.global, d;\r\n  for(d in a) {\r\n    c[d] = a[d]\r\n  }\r\n};\r\ngoog.addDependency = function(a, b, c) {\r\n  if(!COMPILED) {\r\n    for(var d, a = a.replace(/\\\\/g, "/"), e = goog.dependencies_, f = 0;d = b[f];f++) {\r\n      e.nameToPath[d] = a, a in e.pathToNames || (e.pathToNames[a] = {}), e.pathToNames[a][d] = !0\r\n    }\r\n    for(d = 0;b = c[d];d++) {\r\n      a in e.requires || (e.requires[a] = {}), e.requires[a][b] = !0\r\n    }\r\n  }\r\n};\r\ngoog.ENABLE_DEBUG_LOADER = !0;\r\ngoog.require = function(a) {\r\n  if(!COMPILED && !goog.isProvided_(a)) {\r\n    if(goog.ENABLE_DEBUG_LOADER) {\r\n      var b = goog.getPathFromDeps_(a);\r\n      if(b) {\r\n        goog.included_[b] = !0;\r\n        goog.writeScripts_();\r\n        return\r\n      }\r\n    }\r\n    a = "goog.require could not find: " + a;\r\n    goog.global.console && goog.global.console.error(a);\r\n    throw Error(a);\r\n  }\r\n};\r\ngoog.basePath = "";\r\ngoog.nullFunction = function() {\r\n};\r\ngoog.identityFunction = function(a) {\r\n  return a\r\n};\r\ngoog.abstractMethod = function() {\r\n  throw Error("unimplemented abstract method");\r\n};\r\ngoog.addSingletonGetter = function(a) {\r\n  a.getInstance = function() {\r\n    if(a.instance_) {\r\n      return a.instance_\r\n    }\r\n    goog.DEBUG && (goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = a);\r\n    return a.instance_ = new a\r\n  }\r\n};\r\ngoog.instantiatedSingletons_ = [];\r\n!COMPILED && goog.ENABLE_DEBUG_LOADER && (goog.included_ = {}, goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}}, goog.inHtmlDocument_ = function() {\r\n  var a = goog.global.document;\r\n  return"undefined" != typeof a && "write" in a\r\n}, goog.findBasePath_ = function() {\r\n  if(goog.global.CLOSURE_BASE_PATH) {\r\n    goog.basePath = goog.global.CLOSURE_BASE_PATH\r\n  }else {\r\n    if(goog.inHtmlDocument_()) {\r\n      for(var a = goog.global.document.getElementsByTagName("script"), b = a.length - 1;0 <= b;--b) {\r\n        var c = a[b].src, d = c.lastIndexOf("?"), d = -1 == d ? c.length : d;\r\n        if("base.js" == c.substr(d - 7, 7)) {\r\n          goog.basePath = c.substr(0, d - 7);\r\n          break\r\n        }\r\n      }\r\n    }\r\n  }\r\n}, goog.importScript_ = function(a) {\r\n  var b = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;\r\n  !goog.dependencies_.written[a] && b(a) && (goog.dependencies_.written[a] = !0)\r\n}, goog.writeScriptTag_ = function(a) {\r\n  return goog.inHtmlDocument_() ? (goog.global.document.write(\'<script type="text/javascript" src="\' + a + \'"><\\/script>\'), !0) : !1\r\n}, goog.writeScripts_ = function() {\r\n  function a(e) {\r\n    if(!(e in d.written)) {\r\n      if(!(e in d.visited) && (d.visited[e] = !0, e in d.requires)) {\r\n        for(var g in d.requires[e]) {\r\n          if(!goog.isProvided_(g)) {\r\n            if(g in d.nameToPath) {\r\n              a(d.nameToPath[g])\r\n            }else {\r\n              throw Error("Undefined nameToPath for " + g);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      e in c || (c[e] = !0, b.push(e))\r\n    }\r\n  }\r\n  var b = [], c = {}, d = goog.dependencies_, e;\r\n  for(e in goog.included_) {\r\n    d.written[e] || a(e)\r\n  }\r\n  for(e = 0;e < b.length;e++) {\r\n    if(b[e]) {\r\n      goog.importScript_(goog.basePath + b[e])\r\n    }else {\r\n      throw Error("Undefined script input");\r\n    }\r\n  }\r\n}, goog.getPathFromDeps_ = function(a) {\r\n  return a in goog.dependencies_.nameToPath ? goog.dependencies_.nameToPath[a] : null\r\n}, goog.findBasePath_(), goog.global.CLOSURE_NO_DEPS || goog.importScript_(goog.basePath + "deps.js"));\r\ngoog.typeOf = function(a) {\r\n  var b = typeof a;\r\n  if("object" == b) {\r\n    if(a) {\r\n      if(a instanceof Array) {\r\n        return"array"\r\n      }\r\n      if(a instanceof Object) {\r\n        return b\r\n      }\r\n      var c = Object.prototype.toString.call(a);\r\n      if("[object Window]" == c) {\r\n        return"object"\r\n      }\r\n      if("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) {\r\n        return"array"\r\n      }\r\n      if("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) {\r\n        return"function"\r\n      }\r\n    }else {\r\n      return"null"\r\n    }\r\n  }else {\r\n    if("function" == b && "undefined" == typeof a.call) {\r\n      return"object"\r\n    }\r\n  }\r\n  return b\r\n};\r\ngoog.isDef = function(a) {\r\n  return void 0 !== a\r\n};\r\ngoog.isNull = function(a) {\r\n  return null === a\r\n};\r\ngoog.isDefAndNotNull = function(a) {\r\n  return null != a\r\n};\r\ngoog.isArray = function(a) {\r\n  return"array" == goog.typeOf(a)\r\n};\r\ngoog.isArrayLike = function(a) {\r\n  var b = goog.typeOf(a);\r\n  return"array" == b || "object" == b && "number" == typeof a.length\r\n};\r\ngoog.isDateLike = function(a) {\r\n  return goog.isObject(a) && "function" == typeof a.getFullYear\r\n};\r\ngoog.isString = function(a) {\r\n  return"string" == typeof a\r\n};\r\ngoog.isBoolean = function(a) {\r\n  return"boolean" == typeof a\r\n};\r\ngoog.isNumber = function(a) {\r\n  return"number" == typeof a\r\n};\r\ngoog.isFunction = function(a) {\r\n  return"function" == goog.typeOf(a)\r\n};\r\ngoog.isObject = function(a) {\r\n  var b = typeof a;\r\n  return"object" == b && null != a || "function" == b\r\n};\r\ngoog.getUid = function(a) {\r\n  return a[goog.UID_PROPERTY_] || (a[goog.UID_PROPERTY_] = ++goog.uidCounter_)\r\n};\r\ngoog.removeUid = function(a) {\r\n  "removeAttribute" in a && a.removeAttribute(goog.UID_PROPERTY_);\r\n  try {\r\n    delete a[goog.UID_PROPERTY_]\r\n  }catch(b) {\r\n  }\r\n};\r\ngoog.UID_PROPERTY_ = "closure_uid_" + Math.floor(2147483648 * Math.random()).toString(36);\r\ngoog.uidCounter_ = 0;\r\ngoog.getHashCode = goog.getUid;\r\ngoog.removeHashCode = goog.removeUid;\r\ngoog.cloneObject = function(a) {\r\n  var b = goog.typeOf(a);\r\n  if("object" == b || "array" == b) {\r\n    if(a.clone) {\r\n      return a.clone()\r\n    }\r\n    var b = "array" == b ? [] : {}, c;\r\n    for(c in a) {\r\n      b[c] = goog.cloneObject(a[c])\r\n    }\r\n    return b\r\n  }\r\n  return a\r\n};\r\ngoog.bindNative_ = function(a, b, c) {\r\n  return a.call.apply(a.bind, arguments)\r\n};\r\ngoog.bindJs_ = function(a, b, c) {\r\n  if(!a) {\r\n    throw Error();\r\n  }\r\n  if(2 < arguments.length) {\r\n    var d = Array.prototype.slice.call(arguments, 2);\r\n    return function() {\r\n      var c = Array.prototype.slice.call(arguments);\r\n      Array.prototype.unshift.apply(c, d);\r\n      return a.apply(b, c)\r\n    }\r\n  }\r\n  return function() {\r\n    return a.apply(b, arguments)\r\n  }\r\n};\r\ngoog.bind = function(a, b, c) {\r\n  goog.bind = Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? goog.bindNative_ : goog.bindJs_;\r\n  return goog.bind.apply(null, arguments)\r\n};\r\ngoog.partial = function(a, b) {\r\n  var c = Array.prototype.slice.call(arguments, 1);\r\n  return function() {\r\n    var b = Array.prototype.slice.call(arguments);\r\n    b.unshift.apply(b, c);\r\n    return a.apply(this, b)\r\n  }\r\n};\r\ngoog.mixin = function(a, b) {\r\n  for(var c in b) {\r\n    a[c] = b[c]\r\n  }\r\n};\r\ngoog.now = Date.now || function() {\r\n  return+new Date\r\n};\r\ngoog.globalEval = function(a) {\r\n  if(goog.global.execScript) {\r\n    goog.global.execScript(a, "JavaScript")\r\n  }else {\r\n    if(goog.global.eval) {\r\n      if(null == goog.evalWorksForGlobals_ && (goog.global.eval("var _et_ = 1;"), "undefined" != typeof goog.global._et_ ? (delete goog.global._et_, goog.evalWorksForGlobals_ = !0) : goog.evalWorksForGlobals_ = !1), goog.evalWorksForGlobals_) {\r\n        goog.global.eval(a)\r\n      }else {\r\n        var b = goog.global.document, c = b.createElement("script");\r\n        c.type = "text/javascript";\r\n        c.defer = !1;\r\n        c.appendChild(b.createTextNode(a));\r\n        b.body.appendChild(c);\r\n        b.body.removeChild(c)\r\n      }\r\n    }else {\r\n      throw Error("goog.globalEval not available");\r\n    }\r\n  }\r\n};\r\ngoog.evalWorksForGlobals_ = null;\r\ngoog.getCssName = function(a, b) {\r\n  var c = function(a) {\r\n    return goog.cssNameMapping_[a] || a\r\n  }, d = function(a) {\r\n    for(var a = a.split("-"), b = [], d = 0;d < a.length;d++) {\r\n      b.push(c(a[d]))\r\n    }\r\n    return b.join("-")\r\n  }, d = goog.cssNameMapping_ ? "BY_WHOLE" == goog.cssNameMappingStyle_ ? c : d : function(a) {\r\n    return a\r\n  };\r\n  return b ? a + "-" + d(b) : d(a)\r\n};\r\ngoog.setCssNameMapping = function(a, b) {\r\n  goog.cssNameMapping_ = a;\r\n  goog.cssNameMappingStyle_ = b\r\n};\r\n!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING && (goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING);\r\ngoog.getMsg = function(a, b) {\r\n  var c = b || {}, d;\r\n  for(d in c) {\r\n    var e = ("" + c[d]).replace(/\\$/g, "$$$$"), a = a.replace(RegExp("\\\\{\\\\$" + d + "\\\\}", "gi"), e)\r\n  }\r\n  return a\r\n};\r\ngoog.exportSymbol = function(a, b, c) {\r\n  goog.exportPath_(a, b, c)\r\n};\r\ngoog.exportProperty = function(a, b, c) {\r\n  a[b] = c\r\n};\r\ngoog.inherits = function(a, b) {\r\n  function c() {\r\n  }\r\n  c.prototype = b.prototype;\r\n  a.superClass_ = b.prototype;\r\n  a.prototype = new c;\r\n  a.prototype.constructor = a\r\n};\r\ngoog.base = function(a, b, c) {\r\n  var d = arguments.callee.caller;\r\n  if(d.superClass_) {\r\n    return d.superClass_.constructor.apply(a, Array.prototype.slice.call(arguments, 1))\r\n  }\r\n  for(var e = Array.prototype.slice.call(arguments, 2), f = !1, g = a.constructor;g;g = g.superClass_ && g.superClass_.constructor) {\r\n    if(g.prototype[b] === d) {\r\n      f = !0\r\n    }else {\r\n      if(f) {\r\n        return g.prototype[b].apply(a, e)\r\n      }\r\n    }\r\n  }\r\n  if(a[b] === d) {\r\n    return a.constructor.prototype[b].apply(a, e)\r\n  }\r\n  throw Error("goog.base called from a method of one name to a method of a different name");\r\n};\r\ngoog.scope = function(a) {\r\n  a.call(goog.global)\r\n};\r\nvar USE_TYPEDARRAY = "undefined" !== typeof Uint8Array && "undefined" !== typeof Uint16Array && "undefined" !== typeof Uint32Array;\r\nvar Zlib = {BitStream:function(a, b) {\r\n  this.index = "number" === typeof b ? b : 0;\r\n  this.bitindex = 0;\r\n  this.buffer = a instanceof (USE_TYPEDARRAY ? Uint8Array : Array) ? a : new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.BitStream.DefaultBlockSize);\r\n  if(2 * this.buffer.length <= this.index) {\r\n    throw Error("invalid index");\r\n  }\r\n  this.buffer.length <= this.index && this.expandBuffer()\r\n}};\r\nZlib.BitStream.DefaultBlockSize = 32768;\r\nZlib.BitStream.prototype.expandBuffer = function() {\r\n  var a = this.buffer, b, c = a.length, d = new (USE_TYPEDARRAY ? Uint8Array : Array)(c << 1);\r\n  if(USE_TYPEDARRAY) {\r\n    d.set(a)\r\n  }else {\r\n    for(b = 0;b < c;++b) {\r\n      d[b] = a[b]\r\n    }\r\n  }\r\n  return this.buffer = d\r\n};\r\nZlib.BitStream.prototype.writeBits = function(a, b, c) {\r\n  var d = this.buffer, e = this.index, f = this.bitindex, g = d[e];\r\n  c && 1 < b && (a = 8 < b ? (Zlib.BitStream.ReverseTable[a & 255] << 24 | Zlib.BitStream.ReverseTable[a >>> 8 & 255] << 16 | Zlib.BitStream.ReverseTable[a >>> 16 & 255] << 8 | Zlib.BitStream.ReverseTable[a >>> 24 & 255]) >> 32 - b : Zlib.BitStream.ReverseTable[a] >> 8 - b);\r\n  if(8 > b + f) {\r\n    g = g << b | a, f += b\r\n  }else {\r\n    for(c = 0;c < b;++c) {\r\n      g = g << 1 | a >> b - c - 1 & 1, 8 === ++f && (f = 0, d[e++] = Zlib.BitStream.ReverseTable[g], g = 0, e === d.length && (d = this.expandBuffer()))\r\n    }\r\n  }\r\n  d[e] = g;\r\n  this.buffer = d;\r\n  this.bitindex = f;\r\n  this.index = e\r\n};\r\nZlib.BitStream.prototype.finish = function() {\r\n  var a = this.buffer, b = this.index;\r\n  0 < this.bitindex && (a[b] <<= 8 - this.bitindex, a[b] = Zlib.BitStream.ReverseTable[a[b]], b++);\r\n  USE_TYPEDARRAY ? a = a.subarray(0, b) : a.length = b;\r\n  return a\r\n};\r\nZlib.BitStream.ReverseTable = function(a) {\r\n  return a\r\n}(function() {\r\n  var a = new (USE_TYPEDARRAY ? Uint8Array : Array)(256), b;\r\n  for(b = 0;256 > b;++b) {\r\n    for(var c = a, d = b, e = b, f = e, g = 7, e = e >>> 1;e;e >>>= 1) {\r\n      f <<= 1, f |= e & 1, --g\r\n    }\r\n    c[d] = (f << g & 255) >>> 0\r\n  }\r\n  return a\r\n}());\r\nZlib.CRC32 = {};\r\nZlib.CRC32.calc = function(a, b, c) {\r\n  return Zlib.CRC32.update(a, 0, b, c)\r\n};\r\nZlib.CRC32.update = function(a, b, c, d) {\r\n  for(var e = Zlib.CRC32.Table, f = "number" === typeof c ? c : c = 0, d = "number" === typeof d ? d : a.length, b = b ^ 4294967295, f = d & 7;f--;++c) {\r\n    b = b >>> 8 ^ e[(b ^ a[c]) & 255]\r\n  }\r\n  for(f = d >> 3;f--;c += 8) {\r\n    b = b >>> 8 ^ e[(b ^ a[c]) & 255], b = b >>> 8 ^ e[(b ^ a[c + 1]) & 255], b = b >>> 8 ^ e[(b ^ a[c + 2]) & 255], b = b >>> 8 ^ e[(b ^ a[c + 3]) & 255], b = b >>> 8 ^ e[(b ^ a[c + 4]) & 255], b = b >>> 8 ^ e[(b ^ a[c + 5]) & 255], b = b >>> 8 ^ e[(b ^ a[c + 6]) & 255], b = b >>> 8 ^ e[(b ^ a[c + 7]) & 255]\r\n  }\r\n  return(b ^ 4294967295) >>> 0\r\n};\r\nZlib.CRC32.Table = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint32Array(a) : a\r\n}([0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, \r\n2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, \r\n2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, \r\n2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, \r\n3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, \r\n414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918E3, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117]);\r\nZlib.exportObject = function(a, b) {\r\n  var c, d, e, f;\r\n  if(Object.keys) {\r\n    c = Object.keys(b)\r\n  }else {\r\n    for(d in c = [], e = 0, b) {\r\n      c[e++] = d\r\n    }\r\n  }\r\n  e = 0;\r\n  for(f = c.length;e < f;++e) {\r\n    d = c[e], goog.exportSymbol(a + "." + d, b[d])\r\n  }\r\n};\r\nZlib.GunzipMember = function() {\r\n};\r\nZlib.GunzipMember.prototype.getName = function() {\r\n  return this.name\r\n};\r\nZlib.GunzipMember.prototype.getData = function() {\r\n  return this.data\r\n};\r\nZlib.GunzipMember.prototype.getMtime = function() {\r\n  return this.mtime\r\n};\r\nZlib.Heap = function(a) {\r\n  this.buffer = new (USE_TYPEDARRAY ? Uint16Array : Array)(2 * a);\r\n  this.length = 0\r\n};\r\nZlib.Heap.prototype.getParent = function(a) {\r\n  return 2 * ((a - 2) / 4 | 0)\r\n};\r\nZlib.Heap.prototype.getChild = function(a) {\r\n  return 2 * a + 2\r\n};\r\nZlib.Heap.prototype.push = function(a, b) {\r\n  var c, d, e = this.buffer, f;\r\n  c = this.length;\r\n  e[this.length++] = b;\r\n  for(e[this.length++] = a;0 < c;) {\r\n    if(d = this.getParent(c), e[c] > e[d]) {\r\n      f = e[c], e[c] = e[d], e[d] = f, f = e[c + 1], e[c + 1] = e[d + 1], e[d + 1] = f, c = d\r\n    }else {\r\n      break\r\n    }\r\n  }\r\n  return this.length\r\n};\r\nZlib.Heap.prototype.pop = function() {\r\n  var a, b, c = this.buffer, d, e, f;\r\n  b = c[0];\r\n  a = c[1];\r\n  this.length -= 2;\r\n  c[0] = c[this.length];\r\n  c[1] = c[this.length + 1];\r\n  for(f = 0;;) {\r\n    e = this.getChild(f);\r\n    if(e >= this.length) {\r\n      break\r\n    }\r\n    e + 2 < this.length && c[e + 2] > c[e] && (e += 2);\r\n    if(c[e] > c[f]) {\r\n      d = c[f], c[f] = c[e], c[e] = d, d = c[f + 1], c[f + 1] = c[e + 1], c[e + 1] = d\r\n    }else {\r\n      break\r\n    }\r\n    f = e\r\n  }\r\n  return{index:a, value:b, length:this.length}\r\n};\r\nZlib.Huffman = {};\r\nZlib.Huffman.buildHuffmanTable = function(a) {\r\n  var b = a.length, c = 0, d = Number.POSITIVE_INFINITY, e, f, g, h, i, j, l, m, k;\r\n  for(m = 0;m < b;++m) {\r\n    a[m] > c && (c = a[m]), a[m] < d && (d = a[m])\r\n  }\r\n  e = 1 << c;\r\n  f = new (USE_TYPEDARRAY ? Uint32Array : Array)(e);\r\n  g = 1;\r\n  h = 0;\r\n  for(i = 2;g <= c;) {\r\n    for(m = 0;m < b;++m) {\r\n      if(a[m] === g) {\r\n        j = 0;\r\n        l = h;\r\n        for(k = 0;k < g;++k) {\r\n          j = j << 1 | l & 1, l >>= 1\r\n        }\r\n        for(k = j;k < e;k += i) {\r\n          f[k] = g << 16 | m\r\n        }\r\n        ++h\r\n      }\r\n    }\r\n    ++g;\r\n    h <<= 1;\r\n    i <<= 1\r\n  }\r\n  return[f, c, d]\r\n};\r\nZlib.RawDeflate = function(a, b) {\r\n  this.compressionType = Zlib.RawDeflate.CompressionType.DYNAMIC;\r\n  this.lazy = 0;\r\n  this.input = a;\r\n  this.op = 0;\r\n  b && (b.lazy && (this.lazy = b.lazy), "number" === typeof b.compressionType && (this.compressionType = b.compressionType), b.outputBuffer && (this.output = USE_TYPEDARRAY && b.outputBuffer instanceof Array ? new Uint8Array(b.outputBuffer) : b.outputBuffer), "number" === typeof b.outputIndex && (this.op = b.outputIndex));\r\n  this.output || (this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(32768))\r\n};\r\nZlib.RawDeflate.CompressionType = {NONE:0, FIXED:1, DYNAMIC:2, RESERVED:3};\r\nZlib.RawDeflate.Lz77MinLength = 3;\r\nZlib.RawDeflate.Lz77MaxLength = 258;\r\nZlib.RawDeflate.WindowSize = 32768;\r\nZlib.RawDeflate.MaxCodeLength = 16;\r\nZlib.RawDeflate.HUFMAX = 286;\r\nZlib.RawDeflate.FixedHuffmanTable = function() {\r\n  var a = [], b;\r\n  for(b = 0;288 > b;b++) {\r\n    switch(!0) {\r\n      case 143 >= b:\r\n        a.push([b + 48, 8]);\r\n        break;\r\n      case 255 >= b:\r\n        a.push([b - 144 + 400, 9]);\r\n        break;\r\n      case 279 >= b:\r\n        a.push([b - 256 + 0, 7]);\r\n        break;\r\n      case 287 >= b:\r\n        a.push([b - 280 + 192, 8]);\r\n        break;\r\n      default:\r\n        throw"invalid literal: " + b;\r\n    }\r\n  }\r\n  return a\r\n}();\r\nZlib.RawDeflate.prototype.compress = function() {\r\n  var a, b, c, d = this.input;\r\n  switch(this.compressionType) {\r\n    case Zlib.RawDeflate.CompressionType.NONE:\r\n      b = 0;\r\n      for(c = d.length;b < c;) {\r\n        a = USE_TYPEDARRAY ? d.subarray(b, b + 65535) : d.slice(b, b + 65535), b += a.length, this.makeNocompressBlock(a, b === c)\r\n      }\r\n      break;\r\n    case Zlib.RawDeflate.CompressionType.FIXED:\r\n      this.output = this.makeFixedHuffmanBlock(d, !0);\r\n      this.op = this.output.length;\r\n      break;\r\n    case Zlib.RawDeflate.CompressionType.DYNAMIC:\r\n      this.output = this.makeDynamicHuffmanBlock(d, !0);\r\n      this.op = this.output.length;\r\n      break;\r\n    default:\r\n      throw"invalid compression type";\r\n  }\r\n  return this.output\r\n};\r\nZlib.RawDeflate.prototype.makeNocompressBlock = function(a, b) {\r\n  var c, d, e = this.output, f = this.op;\r\n  if(USE_TYPEDARRAY) {\r\n    for(e = new Uint8Array(this.output.buffer);e.length <= f + a.length + 5;) {\r\n      e = new Uint8Array(e.length << 1)\r\n    }\r\n    e.set(this.output)\r\n  }\r\n  c = Zlib.RawDeflate.CompressionType.NONE;\r\n  e[f++] = (b ? 1 : 0) | c << 1;\r\n  c = a.length;\r\n  d = ~c + 65536 & 65535;\r\n  e[f++] = c & 255;\r\n  e[f++] = c >>> 8 & 255;\r\n  e[f++] = d & 255;\r\n  e[f++] = d >>> 8 & 255;\r\n  if(USE_TYPEDARRAY) {\r\n    e.set(a, f), f += a.length, e = e.subarray(0, f)\r\n  }else {\r\n    c = 0;\r\n    for(d = a.length;c < d;++c) {\r\n      e[f++] = a[c]\r\n    }\r\n    e.length = f\r\n  }\r\n  this.op = f;\r\n  return this.output = e\r\n};\r\nZlib.RawDeflate.prototype.makeFixedHuffmanBlock = function(a, b) {\r\n  var c = new Zlib.BitStream(new Uint8Array(this.output.buffer), this.op), d;\r\n  d = Zlib.RawDeflate.CompressionType.FIXED;\r\n  c.writeBits(b ? 1 : 0, 1, !0);\r\n  c.writeBits(d, 2, !0);\r\n  d = this.lz77(a);\r\n  this.fixedHuffman(d, c);\r\n  return c.finish()\r\n};\r\nZlib.RawDeflate.prototype.makeDynamicHuffmanBlock = function(a, b) {\r\n  var c = new Zlib.BitStream(new Uint8Array(this.output), this.op), d, e, f, g, h = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], i, j, l, m, k, n, q = Array(19), p;\r\n  d = Zlib.RawDeflate.CompressionType.DYNAMIC;\r\n  c.writeBits(b ? 1 : 0, 1, !0);\r\n  c.writeBits(d, 2, !0);\r\n  d = this.lz77(a);\r\n  i = this.getLengths_(this.freqsLitLen, 15);\r\n  j = this.getCodesFromLengths_(i);\r\n  l = this.getLengths_(this.freqsDist, 7);\r\n  m = this.getCodesFromLengths_(l);\r\n  for(e = 286;257 < e && 0 === i[e - 1];e--) {\r\n  }\r\n  for(f = 30;1 < f && 0 === l[f - 1];f--) {\r\n  }\r\n  k = this.getTreeSymbols_(e, i, f, l);\r\n  n = this.getLengths_(k.freqs, 7);\r\n  for(p = 0;19 > p;p++) {\r\n    q[p] = n[h[p]]\r\n  }\r\n  for(g = 19;4 < g && 0 === q[g - 1];g--) {\r\n  }\r\n  h = this.getCodesFromLengths_(n);\r\n  c.writeBits(e - 257, 5, !0);\r\n  c.writeBits(f - 1, 5, !0);\r\n  c.writeBits(g - 4, 4, !0);\r\n  for(p = 0;p < g;p++) {\r\n    c.writeBits(q[p], 3, !0)\r\n  }\r\n  p = 0;\r\n  for(q = k.codes.length;p < q;p++) {\r\n    if(e = k.codes[p], c.writeBits(h[e], n[e], !0), 16 <= e) {\r\n      p++;\r\n      switch(e) {\r\n        case 16:\r\n          e = 2;\r\n          break;\r\n        case 17:\r\n          e = 3;\r\n          break;\r\n        case 18:\r\n          e = 7;\r\n          break;\r\n        default:\r\n          throw"invalid code: " + e;\r\n      }\r\n      c.writeBits(k.codes[p], e, !0)\r\n    }\r\n  }\r\n  this.dynamicHuffman(d, [j, i], [m, l], c);\r\n  return c.finish()\r\n};\r\nZlib.RawDeflate.prototype.dynamicHuffman = function(a, b, c, d) {\r\n  var e, f, g, h, i;\r\n  g = b[0];\r\n  b = b[1];\r\n  h = c[0];\r\n  i = c[1];\r\n  c = 0;\r\n  for(e = a.length;c < e;++c) {\r\n    if(f = a[c], d.writeBits(g[f], b[f], !0), 256 < f) {\r\n      d.writeBits(a[++c], a[++c], !0), f = a[++c], d.writeBits(h[f], i[f], !0), d.writeBits(a[++c], a[++c], !0)\r\n    }else {\r\n      if(256 === f) {\r\n        break\r\n      }\r\n    }\r\n  }\r\n  return d\r\n};\r\nZlib.RawDeflate.prototype.fixedHuffman = function(a, b) {\r\n  var c, d, e;\r\n  c = 0;\r\n  for(d = a.length;c < d;c++) {\r\n    if(e = a[c], Zlib.BitStream.prototype.writeBits.apply(b, Zlib.RawDeflate.FixedHuffmanTable[e]), 256 < e) {\r\n      b.writeBits(a[++c], a[++c], !0), b.writeBits(a[++c], 5), b.writeBits(a[++c], a[++c], !0)\r\n    }else {\r\n      if(256 === e) {\r\n        break\r\n      }\r\n    }\r\n  }\r\n  return b\r\n};\r\nZlib.RawDeflate.Lz77Match = function(a, b) {\r\n  this.length = a;\r\n  this.backwardDistance = b\r\n};\r\nZlib.RawDeflate.Lz77Match.LengthCodeTable = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint32Array(a) : a\r\n}(function() {\r\n  function a(a) {\r\n    switch(!0) {\r\n      case 3 === a:\r\n        return[257, a - 3, 0];\r\n      case 4 === a:\r\n        return[258, a - 4, 0];\r\n      case 5 === a:\r\n        return[259, a - 5, 0];\r\n      case 6 === a:\r\n        return[260, a - 6, 0];\r\n      case 7 === a:\r\n        return[261, a - 7, 0];\r\n      case 8 === a:\r\n        return[262, a - 8, 0];\r\n      case 9 === a:\r\n        return[263, a - 9, 0];\r\n      case 10 === a:\r\n        return[264, a - 10, 0];\r\n      case 12 >= a:\r\n        return[265, a - 11, 1];\r\n      case 14 >= a:\r\n        return[266, a - 13, 1];\r\n      case 16 >= a:\r\n        return[267, a - 15, 1];\r\n      case 18 >= a:\r\n        return[268, a - 17, 1];\r\n      case 22 >= a:\r\n        return[269, a - 19, 2];\r\n      case 26 >= a:\r\n        return[270, a - 23, 2];\r\n      case 30 >= a:\r\n        return[271, a - 27, 2];\r\n      case 34 >= a:\r\n        return[272, a - 31, 2];\r\n      case 42 >= a:\r\n        return[273, a - 35, 3];\r\n      case 50 >= a:\r\n        return[274, a - 43, 3];\r\n      case 58 >= a:\r\n        return[275, a - 51, 3];\r\n      case 66 >= a:\r\n        return[276, a - 59, 3];\r\n      case 82 >= a:\r\n        return[277, a - 67, 4];\r\n      case 98 >= a:\r\n        return[278, a - 83, 4];\r\n      case 114 >= a:\r\n        return[279, a - 99, 4];\r\n      case 130 >= a:\r\n        return[280, a - 115, 4];\r\n      case 162 >= a:\r\n        return[281, a - 131, 5];\r\n      case 194 >= a:\r\n        return[282, a - 163, 5];\r\n      case 226 >= a:\r\n        return[283, a - 195, 5];\r\n      case 257 >= a:\r\n        return[284, a - 227, 5];\r\n      case 258 === a:\r\n        return[285, a - 258, 0];\r\n      default:\r\n        throw"invalid length: " + a;\r\n    }\r\n  }\r\n  var b = [], c, d;\r\n  for(c = 3;258 >= c;c++) {\r\n    d = a(c), b[c] = d[2] << 24 | d[1] << 16 | d[0]\r\n  }\r\n  return b\r\n}());\r\nZlib.RawDeflate.Lz77Match.prototype.getDistanceCode_ = function(a) {\r\n  switch(!0) {\r\n    case 1 === a:\r\n      a = [0, a - 1, 0];\r\n      break;\r\n    case 2 === a:\r\n      a = [1, a - 2, 0];\r\n      break;\r\n    case 3 === a:\r\n      a = [2, a - 3, 0];\r\n      break;\r\n    case 4 === a:\r\n      a = [3, a - 4, 0];\r\n      break;\r\n    case 6 >= a:\r\n      a = [4, a - 5, 1];\r\n      break;\r\n    case 8 >= a:\r\n      a = [5, a - 7, 1];\r\n      break;\r\n    case 12 >= a:\r\n      a = [6, a - 9, 2];\r\n      break;\r\n    case 16 >= a:\r\n      a = [7, a - 13, 2];\r\n      break;\r\n    case 24 >= a:\r\n      a = [8, a - 17, 3];\r\n      break;\r\n    case 32 >= a:\r\n      a = [9, a - 25, 3];\r\n      break;\r\n    case 48 >= a:\r\n      a = [10, a - 33, 4];\r\n      break;\r\n    case 64 >= a:\r\n      a = [11, a - 49, 4];\r\n      break;\r\n    case 96 >= a:\r\n      a = [12, a - 65, 5];\r\n      break;\r\n    case 128 >= a:\r\n      a = [13, a - 97, 5];\r\n      break;\r\n    case 192 >= a:\r\n      a = [14, a - 129, 6];\r\n      break;\r\n    case 256 >= a:\r\n      a = [15, a - 193, 6];\r\n      break;\r\n    case 384 >= a:\r\n      a = [16, a - 257, 7];\r\n      break;\r\n    case 512 >= a:\r\n      a = [17, a - 385, 7];\r\n      break;\r\n    case 768 >= a:\r\n      a = [18, a - 513, 8];\r\n      break;\r\n    case 1024 >= a:\r\n      a = [19, a - 769, 8];\r\n      break;\r\n    case 1536 >= a:\r\n      a = [20, a - 1025, 9];\r\n      break;\r\n    case 2048 >= a:\r\n      a = [21, a - 1537, 9];\r\n      break;\r\n    case 3072 >= a:\r\n      a = [22, a - 2049, 10];\r\n      break;\r\n    case 4096 >= a:\r\n      a = [23, a - 3073, 10];\r\n      break;\r\n    case 6144 >= a:\r\n      a = [24, a - 4097, 11];\r\n      break;\r\n    case 8192 >= a:\r\n      a = [25, a - 6145, 11];\r\n      break;\r\n    case 12288 >= a:\r\n      a = [26, a - 8193, 12];\r\n      break;\r\n    case 16384 >= a:\r\n      a = [27, a - 12289, 12];\r\n      break;\r\n    case 24576 >= a:\r\n      a = [28, a - 16385, 13];\r\n      break;\r\n    case 32768 >= a:\r\n      a = [29, a - 24577, 13];\r\n      break;\r\n    default:\r\n      throw"invalid distance";\r\n  }\r\n  return a\r\n};\r\nZlib.RawDeflate.Lz77Match.prototype.toLz77Array = function() {\r\n  var a = this.backwardDistance, b = [], c = 0, d;\r\n  d = Zlib.RawDeflate.Lz77Match.LengthCodeTable[this.length];\r\n  b[c++] = d & 65535;\r\n  b[c++] = d >> 16 & 255;\r\n  b[c++] = d >> 24;\r\n  d = this.getDistanceCode_(a);\r\n  b[c++] = d[0];\r\n  b[c++] = d[1];\r\n  b[c++] = d[2];\r\n  return b\r\n};\r\nZlib.RawDeflate.prototype.lz77 = function(a) {\r\n  function b(a, b) {\r\n    var c = a.toLz77Array(), d, e;\r\n    d = 0;\r\n    for(e = c.length;d < e;++d) {\r\n      l[m++] = c[d]\r\n    }\r\n    n[c[0]]++;\r\n    q[c[3]]++;\r\n    k = a.length + b - 1;\r\n    j = null\r\n  }\r\n  var c, d, e, f, g, h = {}, i = Zlib.RawDeflate.WindowSize, j, l = USE_TYPEDARRAY ? new Uint16Array(2 * a.length) : [], m = 0, k = 0, n = new (USE_TYPEDARRAY ? Uint32Array : Array)(286), q = new (USE_TYPEDARRAY ? Uint32Array : Array)(30), p = this.lazy;\r\n  if(!USE_TYPEDARRAY) {\r\n    for(e = 0;285 >= e;) {\r\n      n[e++] = 0\r\n    }\r\n    for(e = 0;29 >= e;) {\r\n      q[e++] = 0\r\n    }\r\n  }\r\n  n[256] = 1;\r\n  c = 0;\r\n  for(d = a.length;c < d;++c) {\r\n    e = g = 0;\r\n    for(f = Zlib.RawDeflate.Lz77MinLength;e < f && c + e !== d;++e) {\r\n      g = g << 8 | a[c + e]\r\n    }\r\n    void 0 === h[g] && (h[g] = []);\r\n    e = h[g];\r\n    if(!(0 < k--)) {\r\n      for(;0 < e.length && c - e[0] > i;) {\r\n        e.shift()\r\n      }\r\n      if(c + Zlib.RawDeflate.Lz77MinLength >= d) {\r\n        j && b(j, -1);\r\n        e = 0;\r\n        for(f = d - c;e < f;++e) {\r\n          g = a[c + e], l[m++] = g, ++n[g]\r\n        }\r\n        break\r\n      }\r\n      0 < e.length ? (f = this.searchLongestMatch_(a, c, e), j ? j.length < f.length ? (g = a[c - 1], l[m++] = g, ++n[g], b(f, 0)) : b(j, -1) : f.length < p ? j = f : b(f, 0)) : j ? b(j, -1) : (g = a[c], l[m++] = g, ++n[g])\r\n    }\r\n    e.push(c)\r\n  }\r\n  l[m++] = 256;\r\n  n[256]++;\r\n  this.freqsLitLen = n;\r\n  this.freqsDist = q;\r\n  return USE_TYPEDARRAY ? l.subarray(0, m) : l\r\n};\r\nZlib.RawDeflate.prototype.searchLongestMatch_ = function(a, b, c) {\r\n  var d, e, f = 0, g, h, i, j = a.length;\r\n  h = 0;\r\n  i = c.length;\r\n  a:for(;h < i;h++) {\r\n    d = c[i - h - 1];\r\n    g = Zlib.RawDeflate.Lz77MinLength;\r\n    if(f > Zlib.RawDeflate.Lz77MinLength) {\r\n      for(g = f;g > Zlib.RawDeflate.Lz77MinLength;g--) {\r\n        if(a[d + g - 1] !== a[b + g - 1]) {\r\n          continue a\r\n        }\r\n      }\r\n      g = f\r\n    }\r\n    for(;g < Zlib.RawDeflate.Lz77MaxLength && b + g < j && a[d + g] === a[b + g];) {\r\n      ++g\r\n    }\r\n    g > f && (e = d, f = g);\r\n    if(g === Zlib.RawDeflate.Lz77MaxLength) {\r\n      break\r\n    }\r\n  }\r\n  return new Zlib.RawDeflate.Lz77Match(f, b - e)\r\n};\r\nZlib.RawDeflate.prototype.getTreeSymbols_ = function(a, b, c, d) {\r\n  var e = new (USE_TYPEDARRAY ? Uint32Array : Array)(a + c), f, g, h = new (USE_TYPEDARRAY ? Uint32Array : Array)(316), i = new (USE_TYPEDARRAY ? Uint8Array : Array)(19);\r\n  for(f = g = 0;f < a;f++) {\r\n    e[g++] = b[f]\r\n  }\r\n  for(f = 0;f < c;f++) {\r\n    e[g++] = d[f]\r\n  }\r\n  if(!USE_TYPEDARRAY) {\r\n    f = 0;\r\n    for(b = i.length;f < b;++f) {\r\n      i[f] = 0\r\n    }\r\n  }\r\n  f = c = 0;\r\n  for(b = e.length;f < b;f += g) {\r\n    for(g = 1;f + g < b && e[f + g] === e[f];++g) {\r\n    }\r\n    a = g;\r\n    if(0 === e[f]) {\r\n      if(3 > a) {\r\n        for(;0 < a--;) {\r\n          h[c++] = 0, i[0]++\r\n        }\r\n      }else {\r\n        for(;0 < a;) {\r\n          d = 138 > a ? a : 138, d > a - 3 && d < a && (d = a - 3), 10 >= d ? (h[c++] = 17, h[c++] = d - 3, i[17]++) : (h[c++] = 18, h[c++] = d - 11, i[18]++), a -= d\r\n        }\r\n      }\r\n    }else {\r\n      if(h[c++] = e[f], i[e[f]]++, a--, 3 > a) {\r\n        for(;0 < a--;) {\r\n          h[c++] = e[f], i[e[f]]++\r\n        }\r\n      }else {\r\n        for(;0 < a;) {\r\n          d = 6 > a ? a : 6, d > a - 3 && d < a && (d = a - 3), h[c++] = 16, h[c++] = d - 3, i[16]++, a -= d\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return{codes:USE_TYPEDARRAY ? h.subarray(0, c) : h.slice(0, c), freqs:i}\r\n};\r\nZlib.RawDeflate.prototype.getLengths_ = function(a, b) {\r\n  var c = a.length, d = new Zlib.Heap(2 * Zlib.RawDeflate.HUFMAX), e = new (USE_TYPEDARRAY ? Uint8Array : Array)(c), f, g, h;\r\n  if(!USE_TYPEDARRAY) {\r\n    for(g = 0;g < c;g++) {\r\n      e[g] = 0\r\n    }\r\n  }\r\n  for(g = 0;g < c;++g) {\r\n    0 < a[g] && d.push(g, a[g])\r\n  }\r\n  c = Array(d.length / 2);\r\n  f = new (USE_TYPEDARRAY ? Uint32Array : Array)(d.length / 2);\r\n  if(1 === c.length) {\r\n    return e[d.pop().index] = 1, e\r\n  }\r\n  g = 0;\r\n  for(h = d.length / 2;g < h;++g) {\r\n    c[g] = d.pop(), f[g] = c[g].value\r\n  }\r\n  d = this.reversePackageMerge_(f, f.length, b);\r\n  g = 0;\r\n  for(h = c.length;g < h;++g) {\r\n    e[c[g].index] = d[g]\r\n  }\r\n  return e\r\n};\r\nZlib.RawDeflate.prototype.reversePackageMerge_ = function(a, b, c) {\r\n  function d(a) {\r\n    var c = i[a][j[a]];\r\n    c === b ? (d(a + 1), d(a + 1)) : --g[c];\r\n    ++j[a]\r\n  }\r\n  var e = new (USE_TYPEDARRAY ? Uint16Array : Array)(c), f = new (USE_TYPEDARRAY ? Uint8Array : Array)(c), g = new (USE_TYPEDARRAY ? Uint8Array : Array)(b), h = Array(c), i = Array(c), j = Array(c), l = (1 << c) - b, m = 1 << c - 1, k, n;\r\n  e[c - 1] = b;\r\n  for(k = 0;k < c;++k) {\r\n    l < m ? f[k] = 0 : (f[k] = 1, l -= m), l <<= 1, e[c - 2 - k] = (e[c - 1 - k] / 2 | 0) + b\r\n  }\r\n  e[0] = f[0];\r\n  h[0] = Array(e[0]);\r\n  i[0] = Array(e[0]);\r\n  for(k = 1;k < c;++k) {\r\n    e[k] > 2 * e[k - 1] + f[k] && (e[k] = 2 * e[k - 1] + f[k]), h[k] = Array(e[k]), i[k] = Array(e[k])\r\n  }\r\n  for(l = 0;l < b;++l) {\r\n    g[l] = c\r\n  }\r\n  for(m = 0;m < e[c - 1];++m) {\r\n    h[c - 1][m] = a[m], i[c - 1][m] = m\r\n  }\r\n  for(l = 0;l < c;++l) {\r\n    j[l] = 0\r\n  }\r\n  1 === f[c - 1] && (--g[0], ++j[c - 1]);\r\n  for(k = c - 2;0 <= k;--k) {\r\n    c = l = 0;\r\n    n = j[k + 1];\r\n    for(m = 0;m < e[k];m++) {\r\n      c = h[k + 1][n] + h[k + 1][n + 1], c > a[l] ? (h[k][m] = c, i[k][m] = b, n += 2) : (h[k][m] = a[l], i[k][m] = l, ++l)\r\n    }\r\n    j[k] = 0;\r\n    1 === f[k] && d(k)\r\n  }\r\n  return g\r\n};\r\nZlib.RawDeflate.prototype.getCodesFromLengths_ = function(a) {\r\n  var b = new (USE_TYPEDARRAY ? Uint16Array : Array)(a.length), c = [], d = [], e = 0, f, g, h;\r\n  f = 0;\r\n  for(g = a.length;f < g;f++) {\r\n    c[a[f]] = (c[a[f]] | 0) + 1\r\n  }\r\n  f = 1;\r\n  for(g = Zlib.RawDeflate.MaxCodeLength;f <= g;f++) {\r\n    d[f] = e, e += c[f] | 0, e <<= 1\r\n  }\r\n  f = 0;\r\n  for(g = a.length;f < g;f++) {\r\n    e = d[a[f]];\r\n    d[a[f]] += 1;\r\n    c = b[f] = 0;\r\n    for(h = a[f];c < h;c++) {\r\n      b[f] = b[f] << 1 | e & 1, e >>>= 1\r\n    }\r\n  }\r\n  return b\r\n};\r\nZlib.Gzip = function(a, b) {\r\n  this.input = a;\r\n  this.op = this.ip = 0;\r\n  this.flags = {};\r\n  b && (b.flags && (this.flags = b.flags), "string" === typeof b.filename && (this.filename = b.filename), "string" === typeof b.comment && (this.comment = b.comment), b.deflateOptions && (this.deflateOptions = b.deflateOptions));\r\n  this.deflateOptions || (this.deflateOptions = {})\r\n};\r\nZlib.Gzip.DefaultBufferSize = 32768;\r\nZlib.Gzip.prototype.compress = function() {\r\n  var a, b, c, d, e, f = new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.Gzip.DefaultBufferSize);\r\n  c = 0;\r\n  var g = this.input, h = this.ip;\r\n  b = this.filename;\r\n  var i = this.comment;\r\n  f[c++] = 31;\r\n  f[c++] = 139;\r\n  f[c++] = 8;\r\n  a = 0;\r\n  this.flags.fname && (a |= Zlib.Gzip.FlagsMask.FNAME);\r\n  this.flags.fcomment && (a |= Zlib.Gzip.FlagsMask.FCOMMENT);\r\n  this.flags.fhcrc && (a |= Zlib.Gzip.FlagsMask.FHCRC);\r\n  f[c++] = a;\r\n  a = (Date.now ? Date.now() : +new Date) / 1E3 | 0;\r\n  f[c++] = a & 255;\r\n  f[c++] = a >>> 8 & 255;\r\n  f[c++] = a >>> 16 & 255;\r\n  f[c++] = a >>> 24 & 255;\r\n  f[c++] = 0;\r\n  f[c++] = Zlib.Gzip.OperatingSystem.UNKNOWN;\r\n  if(void 0 !== this.flags.fname) {\r\n    d = 0;\r\n    for(e = b.length;d < e;++d) {\r\n      a = b.charCodeAt(d), 255 < a && (f[c++] = a >>> 8 & 255), f[c++] = a & 255\r\n    }\r\n    f[c++] = 0\r\n  }\r\n  if(this.flags.comment) {\r\n    d = 0;\r\n    for(e = i.length;d < e;++d) {\r\n      a = i.charCodeAt(d), 255 < a && (f[c++] = a >>> 8 & 255), f[c++] = a & 255\r\n    }\r\n    f[c++] = 0\r\n  }\r\n  this.flags.fhcrc && (b = Zlib.CRC32.calc(f, 0, c) & 65535, f[c++] = b & 255, f[c++] = b >>> 8 & 255);\r\n  this.deflateOptions.outputBuffer = f;\r\n  this.deflateOptions.outputIndex = c;\r\n  c = new Zlib.RawDeflate(g, this.deflateOptions);\r\n  f = c.compress();\r\n  c = c.op;\r\n  USE_TYPEDARRAY && (c + 8 > f.buffer.byteLength ? (this.output = new Uint8Array(c + 8), this.output.set(new Uint8Array(f.buffer)), f = this.output) : f = new Uint8Array(f.buffer));\r\n  b = Zlib.CRC32.calc(g);\r\n  f[c++] = b & 255;\r\n  f[c++] = b >>> 8 & 255;\r\n  f[c++] = b >>> 16 & 255;\r\n  f[c++] = b >>> 24 & 255;\r\n  e = g.length;\r\n  f[c++] = e & 255;\r\n  f[c++] = e >>> 8 & 255;\r\n  f[c++] = e >>> 16 & 255;\r\n  f[c++] = e >>> 24 & 255;\r\n  this.ip = h;\r\n  USE_TYPEDARRAY && c < f.length && (this.output = f = f.subarray(0, c));\r\n  return f\r\n};\r\nZlib.Gzip.OperatingSystem = {FAT:0, AMIGA:1, VMS:2, UNIX:3, VM_CMS:4, ATARI_TOS:5, HPFS:6, MACINTOSH:7, Z_SYSTEM:8, CP_M:9, TOPS_20:10, NTFS:11, QDOS:12, ACORN_RISCOS:13, UNKNOWN:255};\r\nZlib.Gzip.FlagsMask = {FTEXT:1, FHCRC:2, FEXTRA:4, FNAME:8, FCOMMENT:16};\r\nvar ZLIB_RAW_INFLATE_BUFFER_SIZE = 32768;\r\nZlib.RawInflate = function(a, b) {\r\n  this.blocks = [];\r\n  this.bufferSize = ZLIB_RAW_INFLATE_BUFFER_SIZE;\r\n  this.bitsbuflen = this.bitsbuf = this.ip = this.totalpos = 0;\r\n  this.input = USE_TYPEDARRAY ? new Uint8Array(a) : a;\r\n  this.bfinal = !1;\r\n  this.bufferType = Zlib.RawInflate.BufferType.ADAPTIVE;\r\n  this.resize = !1;\r\n  if(b || !(b = {})) {\r\n    b.index && (this.ip = b.index), b.bufferSize && (this.bufferSize = b.bufferSize), b.bufferType && (this.bufferType = b.bufferType), b.resize && (this.resize = b.resize)\r\n  }\r\n  switch(this.bufferType) {\r\n    case Zlib.RawInflate.BufferType.BLOCK:\r\n      this.op = Zlib.RawInflate.MaxBackwardLength;\r\n      this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.RawInflate.MaxBackwardLength + this.bufferSize + Zlib.RawInflate.MaxCopyLength);\r\n      break;\r\n    case Zlib.RawInflate.BufferType.ADAPTIVE:\r\n      this.op = 0;\r\n      this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(this.bufferSize);\r\n      this.expandBuffer = this.expandBufferAdaptive;\r\n      this.concatBuffer = this.concatBufferDynamic;\r\n      this.decodeHuffman = this.decodeHuffmanAdaptive;\r\n      break;\r\n    default:\r\n      throw Error("invalid inflate mode");\r\n  }\r\n};\r\nZlib.RawInflate.BufferType = {BLOCK:0, ADAPTIVE:1};\r\nZlib.RawInflate.prototype.decompress = function() {\r\n  for(;!this.bfinal;) {\r\n    this.parseBlock()\r\n  }\r\n  return this.concatBuffer()\r\n};\r\nZlib.RawInflate.MaxBackwardLength = 32768;\r\nZlib.RawInflate.MaxCopyLength = 258;\r\nZlib.RawInflate.Order = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint16Array(a) : a\r\n}([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\r\nZlib.RawInflate.LengthCodeTable = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint16Array(a) : a\r\n}([3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 258, 258]);\r\nZlib.RawInflate.LengthExtraTable = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint8Array(a) : a\r\n}([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]);\r\nZlib.RawInflate.DistCodeTable = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint16Array(a) : a\r\n}([1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]);\r\nZlib.RawInflate.DistExtraTable = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint8Array(a) : a\r\n}([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);\r\nZlib.RawInflate.FixedLiteralLengthTable = function(a) {\r\n  return a\r\n}(function() {\r\n  var a = new (USE_TYPEDARRAY ? Uint8Array : Array)(288), b, c;\r\n  b = 0;\r\n  for(c = a.length;b < c;++b) {\r\n    a[b] = 143 >= b ? 8 : 255 >= b ? 9 : 279 >= b ? 7 : 8\r\n  }\r\n  return(0,Zlib.Huffman.buildHuffmanTable)(a)\r\n}());\r\nZlib.RawInflate.FixedDistanceTable = function(a) {\r\n  return a\r\n}(function() {\r\n  var a = new (USE_TYPEDARRAY ? Uint8Array : Array)(30), b, c;\r\n  b = 0;\r\n  for(c = a.length;b < c;++b) {\r\n    a[b] = 5\r\n  }\r\n  return(0,Zlib.Huffman.buildHuffmanTable)(a)\r\n}());\r\nZlib.RawInflate.prototype.parseBlock = function() {\r\n  var a = this.readBits(3);\r\n  a & 1 && (this.bfinal = !0);\r\n  a >>>= 1;\r\n  switch(a) {\r\n    case 0:\r\n      this.parseUncompressedBlock();\r\n      break;\r\n    case 1:\r\n      this.parseFixedHuffmanBlock();\r\n      break;\r\n    case 2:\r\n      this.parseDynamicHuffmanBlock();\r\n      break;\r\n    default:\r\n      throw Error("unknown BTYPE: " + a);\r\n  }\r\n};\r\nZlib.RawInflate.prototype.readBits = function(a) {\r\n  for(var b = this.bitsbuf, c = this.bitsbuflen, d = this.input, e = this.ip, f;c < a;) {\r\n    f = d[e++];\r\n    if(void 0 === f) {\r\n      throw Error("input buffer is broken");\r\n    }\r\n    b |= f << c;\r\n    c += 8\r\n  }\r\n  f = b & (1 << a) - 1;\r\n  this.bitsbuf = b >>> a;\r\n  this.bitsbuflen = c - a;\r\n  this.ip = e;\r\n  return f\r\n};\r\nZlib.RawInflate.prototype.readCodeByTable = function(a) {\r\n  for(var b = this.bitsbuf, c = this.bitsbuflen, d = this.input, e = this.ip, f = a[0], a = a[1], g;c < a;) {\r\n    g = d[e++];\r\n    if(void 0 === g) {\r\n      throw Error("input buffer is broken");\r\n    }\r\n    b |= g << c;\r\n    c += 8\r\n  }\r\n  d = f[b & (1 << a) - 1];\r\n  f = d >>> 16;\r\n  this.bitsbuf = b >> f;\r\n  this.bitsbuflen = c - f;\r\n  this.ip = e;\r\n  return d & 65535\r\n};\r\nZlib.RawInflate.prototype.parseUncompressedBlock = function() {\r\n  var a = this.input, b = this.ip, c = this.output, d = this.op, e, f, g, h = c.length;\r\n  this.bitsbuflen = this.bitsbuf = 0;\r\n  e = a[b++];\r\n  if(void 0 === e) {\r\n    throw Error("invalid uncompressed block header: LEN (first byte)");\r\n  }\r\n  f = e;\r\n  e = a[b++];\r\n  if(void 0 === e) {\r\n    throw Error("invalid uncompressed block header: LEN (second byte)");\r\n  }\r\n  f |= e << 8;\r\n  e = a[b++];\r\n  if(void 0 === e) {\r\n    throw Error("invalid uncompressed block header: NLEN (first byte)");\r\n  }\r\n  g = e;\r\n  e = a[b++];\r\n  if(void 0 === e) {\r\n    throw Error("invalid uncompressed block header: NLEN (second byte)");\r\n  }\r\n  if(f === ~(g | e << 8)) {\r\n    throw Error("invalid uncompressed block header: length verify");\r\n  }\r\n  if(b + f > a.length) {\r\n    throw Error("input buffer is broken");\r\n  }\r\n  switch(this.bufferType) {\r\n    case Zlib.RawInflate.BufferType.BLOCK:\r\n      for(;d + f > c.length;) {\r\n        e = h - d;\r\n        f -= e;\r\n        if(USE_TYPEDARRAY) {\r\n          c.set(a.subarray(b, b + e), d), d += e, b += e\r\n        }else {\r\n          for(;e--;) {\r\n            c[d++] = a[b++]\r\n          }\r\n        }\r\n        this.op = d;\r\n        c = this.expandBuffer();\r\n        d = this.op\r\n      }\r\n      break;\r\n    case Zlib.RawInflate.BufferType.ADAPTIVE:\r\n      for(;d + f > c.length;) {\r\n        c = this.expandBuffer({fixRatio:2})\r\n      }\r\n      break;\r\n    default:\r\n      throw Error("invalid inflate mode");\r\n  }\r\n  if(USE_TYPEDARRAY) {\r\n    c.set(a.subarray(b, b + f), d), d += f, b += f\r\n  }else {\r\n    for(;f--;) {\r\n      c[d++] = a[b++]\r\n    }\r\n  }\r\n  this.ip = b;\r\n  this.op = d;\r\n  this.output = c\r\n};\r\nZlib.RawInflate.prototype.parseFixedHuffmanBlock = function() {\r\n  this.decodeHuffman(Zlib.RawInflate.FixedLiteralLengthTable, Zlib.RawInflate.FixedDistanceTable)\r\n};\r\nZlib.RawInflate.prototype.parseDynamicHuffmanBlock = function() {\r\n  function a(a, b, c) {\r\n    var d, e, f;\r\n    for(f = 0;f < a;) {\r\n      switch(d = this.readCodeByTable(b), d) {\r\n        case 16:\r\n          for(d = 3 + this.readBits(2);d--;) {\r\n            c[f++] = e\r\n          }\r\n          break;\r\n        case 17:\r\n          for(d = 3 + this.readBits(3);d--;) {\r\n            c[f++] = 0\r\n          }\r\n          e = 0;\r\n          break;\r\n        case 18:\r\n          for(d = 11 + this.readBits(7);d--;) {\r\n            c[f++] = 0\r\n          }\r\n          e = 0;\r\n          break;\r\n        default:\r\n          e = c[f++] = d\r\n      }\r\n    }\r\n    return c\r\n  }\r\n  var b = this.readBits(5) + 257, c = this.readBits(5) + 1, d = this.readBits(4) + 4, e = new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.RawInflate.Order.length), f;\r\n  for(f = 0;f < d;++f) {\r\n    e[Zlib.RawInflate.Order[f]] = this.readBits(3)\r\n  }\r\n  d = (0,Zlib.Huffman.buildHuffmanTable)(e);\r\n  e = new (USE_TYPEDARRAY ? Uint8Array : Array)(b);\r\n  f = new (USE_TYPEDARRAY ? Uint8Array : Array)(c);\r\n  this.decodeHuffman((0,Zlib.Huffman.buildHuffmanTable)(a.call(this, b, d, e)), (0,Zlib.Huffman.buildHuffmanTable)(a.call(this, c, d, f)))\r\n};\r\nZlib.RawInflate.prototype.decodeHuffman = function(a, b) {\r\n  var c = this.output, d = this.op;\r\n  this.currentLitlenTable = a;\r\n  for(var e = c.length - Zlib.RawInflate.MaxCopyLength, f, g, h;256 !== (f = this.readCodeByTable(a));) {\r\n    if(256 > f) {\r\n      d >= e && (this.op = d, c = this.expandBuffer(), d = this.op), c[d++] = f\r\n    }else {\r\n      f -= 257;\r\n      h = Zlib.RawInflate.LengthCodeTable[f];\r\n      0 < Zlib.RawInflate.LengthExtraTable[f] && (h += this.readBits(Zlib.RawInflate.LengthExtraTable[f]));\r\n      f = this.readCodeByTable(b);\r\n      g = Zlib.RawInflate.DistCodeTable[f];\r\n      0 < Zlib.RawInflate.DistExtraTable[f] && (g += this.readBits(Zlib.RawInflate.DistExtraTable[f]));\r\n      d >= e && (this.op = d, c = this.expandBuffer(), d = this.op);\r\n      for(;h--;) {\r\n        c[d] = c[d++ - g]\r\n      }\r\n    }\r\n  }\r\n  for(;8 <= this.bitsbuflen;) {\r\n    this.bitsbuflen -= 8, this.ip--\r\n  }\r\n  this.op = d\r\n};\r\nZlib.RawInflate.prototype.decodeHuffmanAdaptive = function(a, b) {\r\n  var c = this.output, d = this.op;\r\n  this.currentLitlenTable = a;\r\n  for(var e = c.length, f, g, h;256 !== (f = this.readCodeByTable(a));) {\r\n    if(256 > f) {\r\n      d >= e && (c = this.expandBuffer(), e = c.length), c[d++] = f\r\n    }else {\r\n      f -= 257;\r\n      h = Zlib.RawInflate.LengthCodeTable[f];\r\n      0 < Zlib.RawInflate.LengthExtraTable[f] && (h += this.readBits(Zlib.RawInflate.LengthExtraTable[f]));\r\n      f = this.readCodeByTable(b);\r\n      g = Zlib.RawInflate.DistCodeTable[f];\r\n      0 < Zlib.RawInflate.DistExtraTable[f] && (g += this.readBits(Zlib.RawInflate.DistExtraTable[f]));\r\n      d + h > e && (c = this.expandBuffer(), e = c.length);\r\n      for(;h--;) {\r\n        c[d] = c[d++ - g]\r\n      }\r\n    }\r\n  }\r\n  for(;8 <= this.bitsbuflen;) {\r\n    this.bitsbuflen -= 8, this.ip--\r\n  }\r\n  this.op = d\r\n};\r\nZlib.RawInflate.prototype.expandBuffer = function() {\r\n  var a = new (USE_TYPEDARRAY ? Uint8Array : Array)(this.op - Zlib.RawInflate.MaxBackwardLength), b = this.op - Zlib.RawInflate.MaxBackwardLength, c, d, e = this.output;\r\n  if(USE_TYPEDARRAY) {\r\n    a.set(e.subarray(Zlib.RawInflate.MaxBackwardLength, a.length))\r\n  }else {\r\n    c = 0;\r\n    for(d = a.length;c < d;++c) {\r\n      a[c] = e[c + Zlib.RawInflate.MaxBackwardLength]\r\n    }\r\n  }\r\n  this.blocks.push(a);\r\n  this.totalpos += a.length;\r\n  if(USE_TYPEDARRAY) {\r\n    e.set(e.subarray(b, b + Zlib.RawInflate.MaxBackwardLength))\r\n  }else {\r\n    for(c = 0;c < Zlib.RawInflate.MaxBackwardLength;++c) {\r\n      e[c] = e[b + c]\r\n    }\r\n  }\r\n  this.op = Zlib.RawInflate.MaxBackwardLength;\r\n  return e\r\n};\r\nZlib.RawInflate.prototype.expandBufferAdaptive = function(a) {\r\n  var b = this.input.length / this.ip + 1 | 0, c = this.input, d = this.output;\r\n  a && ("number" === typeof a.fixRatio && (b = a.fixRatio), "number" === typeof a.addRatio && (b += a.addRatio));\r\n  2 > b ? (a = (c.length - this.ip) / this.currentLitlenTable[2], a = 258 * (a / 2) | 0, a = a < d.length ? d.length + a : d.length << 1) : a = d.length * b;\r\n  USE_TYPEDARRAY ? (a = new Uint8Array(a), a.set(d)) : a = d;\r\n  return this.output = a\r\n};\r\nZlib.RawInflate.prototype.concatBuffer = function() {\r\n  var a = 0, b = this.output, c = this.blocks, d, e = new (USE_TYPEDARRAY ? Uint8Array : Array)(this.totalpos + (this.op - Zlib.RawInflate.MaxBackwardLength)), f, g, h, i;\r\n  if(0 === c.length) {\r\n    return USE_TYPEDARRAY ? this.output.subarray(Zlib.RawInflate.MaxBackwardLength, this.op) : this.output.slice(Zlib.RawInflate.MaxBackwardLength, this.op)\r\n  }\r\n  f = 0;\r\n  for(g = c.length;f < g;++f) {\r\n    d = c[f];\r\n    h = 0;\r\n    for(i = d.length;h < i;++h) {\r\n      e[a++] = d[h]\r\n    }\r\n  }\r\n  f = Zlib.RawInflate.MaxBackwardLength;\r\n  for(g = this.op;f < g;++f) {\r\n    e[a++] = b[f]\r\n  }\r\n  this.blocks = [];\r\n  return this.buffer = e\r\n};\r\nZlib.RawInflate.prototype.concatBufferDynamic = function() {\r\n  var a, b = this.op;\r\n  USE_TYPEDARRAY ? this.resize ? (a = new Uint8Array(b), a.set(this.output.subarray(0, b))) : a = this.output.subarray(0, b) : (this.output.length > b && (this.output.length = b), a = this.output);\r\n  return this.buffer = a\r\n};\r\nZlib.Gunzip = function(a) {\r\n  this.input = a;\r\n  this.ip = 0;\r\n  this.member = [];\r\n  this.decompressed = !1\r\n};\r\nZlib.Gunzip.prototype.getMembers = function() {\r\n  this.decompressed || this.decompress();\r\n  return this.member.slice()\r\n};\r\nZlib.Gunzip.prototype.decompress = function() {\r\n  for(var a = this.input.length;this.ip < a;) {\r\n    this.decodeMember()\r\n  }\r\n  this.decompressed = !0;\r\n  return this.concatMember()\r\n};\r\nZlib.Gunzip.prototype.decodeMember = function() {\r\n  var a = new Zlib.GunzipMember, b, c, d, e, f, g = this.input;\r\n  c = this.ip;\r\n  a.id1 = g[c++];\r\n  a.id2 = g[c++];\r\n  if(31 !== a.id1 || 139 !== a.id2) {\r\n    throw Error("invalid file signature:" + a.id1 + "," + a.id2);\r\n  }\r\n  a.cm = g[c++];\r\n  switch(a.cm) {\r\n    case 8:\r\n      break;\r\n    default:\r\n      throw Error("unknown compression method: " + a.cm);\r\n  }\r\n  a.flg = g[c++];\r\n  b = g[c++] | g[c++] << 8 | g[c++] << 16 | g[c++] << 24;\r\n  a.mtime = new Date(1E3 * b);\r\n  a.xfl = g[c++];\r\n  a.os = g[c++];\r\n  0 < (a.flg & Zlib.Gzip.FlagsMask.FEXTRA) && (a.xlen = g[c++] | g[c++] << 8, c = this.decodeSubField(c, a.xlen));\r\n  if(0 < (a.flg & Zlib.Gzip.FlagsMask.FNAME)) {\r\n    f = [];\r\n    for(e = 0;0 < (b = g[c++]);) {\r\n      f[e++] = String.fromCharCode(b)\r\n    }\r\n    a.name = f.join("")\r\n  }\r\n  if(0 < (a.flg & Zlib.Gzip.FlagsMask.FCOMMENT)) {\r\n    f = [];\r\n    for(e = 0;0 < (b = g[c++]);) {\r\n      f[e++] = String.fromCharCode(b)\r\n    }\r\n    a.comment = f.join("")\r\n  }\r\n  if(0 < (a.flg & Zlib.Gzip.FlagsMask.FHCRC) && (a.crc16 = Zlib.CRC32.calc(g, 0, c) & 65535, a.crc16 !== (g[c++] | g[c++] << 8))) {\r\n    throw Error("invalid header crc16");\r\n  }\r\n  b = g[g.length - 4] | g[g.length - 3] << 8 | g[g.length - 2] << 16 | g[g.length - 1] << 24;\r\n  g.length - c - 4 - 4 < 512 * b && (d = b);\r\n  c = new Zlib.RawInflate(g, {index:c, bufferSize:d});\r\n  a.data = d = c.decompress();\r\n  c = c.ip;\r\n  a.crc32 = b = (g[c++] | g[c++] << 8 | g[c++] << 16 | g[c++] << 24) >>> 0;\r\n  if(Zlib.CRC32.calc(d) !== b) {\r\n    throw Error("invalid CRC-32 checksum: 0x" + Zlib.CRC32.calc(d).toString(16) + " / 0x" + b.toString(16));\r\n  }\r\n  a.isize = b = (g[c++] | g[c++] << 8 | g[c++] << 16 | g[c++] << 24) >>> 0;\r\n  if((d.length & 4294967295) !== b) {\r\n    throw Error("invalid input size: " + (d.length & 4294967295) + " / " + b);\r\n  }\r\n  this.member.push(a);\r\n  this.ip = c\r\n};\r\nZlib.Gunzip.prototype.decodeSubField = function(a, b) {\r\n  return a + b\r\n};\r\nZlib.Gunzip.prototype.concatMember = function() {\r\n  var a = this.member, b, c, d = 0, e = 0;\r\n  b = 0;\r\n  for(c = a.length;b < c;++b) {\r\n    e += a[b].data.length\r\n  }\r\n  if(USE_TYPEDARRAY) {\r\n    e = new Uint8Array(e);\r\n    for(b = 0;b < c;++b) {\r\n      e.set(a[b].data, d), d += a[b].data.length\r\n    }\r\n  }else {\r\n    e = [];\r\n    for(b = 0;b < c;++b) {\r\n      e[b] = a[b].data\r\n    }\r\n    e = Array.prototype.concat.apply([], e)\r\n  }\r\n  return e\r\n};\r\nvar ZLIB_STREAM_RAW_INFLATE_BUFFER_SIZE = 32768;\r\nZlib.RawInflateStream = function(a, b, c) {\r\n  this.blocks = [];\r\n  this.bufferSize = c ? c : ZLIB_STREAM_RAW_INFLATE_BUFFER_SIZE;\r\n  this.totalpos = 0;\r\n  this.ip = void 0 === b ? 0 : b;\r\n  this.bitsbuflen = this.bitsbuf = 0;\r\n  this.input = USE_TYPEDARRAY ? new Uint8Array(a) : a;\r\n  this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(this.bufferSize);\r\n  this.op = 0;\r\n  this.resize = this.bfinal = !1;\r\n  this.sp = 0;\r\n  this.status = Zlib.RawInflateStream.Status.INITIALIZED\r\n};\r\nZlib.RawInflateStream.BlockType = {UNCOMPRESSED:0, FIXED:1, DYNAMIC:2};\r\nZlib.RawInflateStream.Status = {INITIALIZED:0, BLOCK_HEADER_START:1, BLOCK_HEADER_END:2, BLOCK_BODY_START:3, BLOCK_BODY_END:4, DECODE_BLOCK_START:5, DECODE_BLOCK_END:6};\r\nZlib.RawInflateStream.prototype.decompress = function(a, b) {\r\n  var c = !1;\r\n  void 0 !== a && (this.input = a);\r\n  void 0 !== b && (this.ip = b);\r\n  for(;!c;) {\r\n    switch(this.status) {\r\n      case Zlib.RawInflateStream.Status.INITIALIZED:\r\n      ;\r\n      case Zlib.RawInflateStream.Status.BLOCK_HEADER_START:\r\n        0 > this.readBlockHeader() && (c = !0);\r\n        break;\r\n      case Zlib.RawInflateStream.Status.BLOCK_HEADER_END:\r\n      ;\r\n      case Zlib.RawInflateStream.Status.BLOCK_BODY_START:\r\n        switch(this.currentBlockType) {\r\n          case Zlib.RawInflateStream.BlockType.UNCOMPRESSED:\r\n            0 > this.readUncompressedBlockHeader() && (c = !0);\r\n            break;\r\n          case Zlib.RawInflateStream.BlockType.FIXED:\r\n            0 > this.parseFixedHuffmanBlock() && (c = !0);\r\n            break;\r\n          case Zlib.RawInflateStream.BlockType.DYNAMIC:\r\n            0 > this.parseDynamicHuffmanBlock() && (c = !0)\r\n        }\r\n        break;\r\n      case Zlib.RawInflateStream.Status.BLOCK_BODY_END:\r\n      ;\r\n      case Zlib.RawInflateStream.Status.DECODE_BLOCK_START:\r\n        switch(this.currentBlockType) {\r\n          case Zlib.RawInflateStream.BlockType.UNCOMPRESSED:\r\n            0 > this.parseUncompressedBlock() && (c = !0);\r\n            break;\r\n          case Zlib.RawInflateStream.BlockType.FIXED:\r\n          ;\r\n          case Zlib.RawInflateStream.BlockType.DYNAMIC:\r\n            0 > this.decodeHuffman() && (c = !0)\r\n        }\r\n        break;\r\n      case Zlib.RawInflateStream.Status.DECODE_BLOCK_END:\r\n        this.bfinal ? c = !0 : this.status = Zlib.RawInflateStream.Status.INITIALIZED\r\n    }\r\n  }\r\n  return this.concatBuffer()\r\n};\r\nZlib.RawInflateStream.MaxBackwardLength = 32768;\r\nZlib.RawInflateStream.MaxCopyLength = 258;\r\nZlib.RawInflateStream.Order = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint16Array(a) : a\r\n}([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\r\nZlib.RawInflateStream.LengthCodeTable = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint16Array(a) : a\r\n}([3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 258, 258]);\r\nZlib.RawInflateStream.LengthExtraTable = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint8Array(a) : a\r\n}([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]);\r\nZlib.RawInflateStream.DistCodeTable = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint16Array(a) : a\r\n}([1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]);\r\nZlib.RawInflateStream.DistExtraTable = function(a) {\r\n  return USE_TYPEDARRAY ? new Uint8Array(a) : a\r\n}([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);\r\nZlib.RawInflateStream.FixedLiteralLengthTable = function(a) {\r\n  return a\r\n}(function() {\r\n  var a = new (USE_TYPEDARRAY ? Uint8Array : Array)(288), b, c;\r\n  b = 0;\r\n  for(c = a.length;b < c;++b) {\r\n    a[b] = 143 >= b ? 8 : 255 >= b ? 9 : 279 >= b ? 7 : 8\r\n  }\r\n  return(0,Zlib.Huffman.buildHuffmanTable)(a)\r\n}());\r\nZlib.RawInflateStream.FixedDistanceTable = function(a) {\r\n  return a\r\n}(function() {\r\n  var a = new (USE_TYPEDARRAY ? Uint8Array : Array)(30), b, c;\r\n  b = 0;\r\n  for(c = a.length;b < c;++b) {\r\n    a[b] = 5\r\n  }\r\n  return(0,Zlib.Huffman.buildHuffmanTable)(a)\r\n}());\r\nZlib.RawInflateStream.prototype.readBlockHeader = function() {\r\n  var a;\r\n  this.status = Zlib.RawInflateStream.Status.BLOCK_HEADER_START;\r\n  this.save_();\r\n  if(0 > (a = this.readBits(3))) {\r\n    return this.restore_(), -1\r\n  }\r\n  a & 1 && (this.bfinal = !0);\r\n  a >>>= 1;\r\n  switch(a) {\r\n    case 0:\r\n      this.currentBlockType = Zlib.RawInflateStream.BlockType.UNCOMPRESSED;\r\n      break;\r\n    case 1:\r\n      this.currentBlockType = Zlib.RawInflateStream.BlockType.FIXED;\r\n      break;\r\n    case 2:\r\n      this.currentBlockType = Zlib.RawInflateStream.BlockType.DYNAMIC;\r\n      break;\r\n    default:\r\n      throw Error("unknown BTYPE: " + a);\r\n  }\r\n  this.status = Zlib.RawInflateStream.Status.BLOCK_HEADER_END\r\n};\r\nZlib.RawInflateStream.prototype.readBits = function(a) {\r\n  for(var b = this.bitsbuf, c = this.bitsbuflen, d = this.input, e = this.ip, f;c < a;) {\r\n    f = d[e++];\r\n    if(void 0 === f) {\r\n      return-1\r\n    }\r\n    b |= f << c;\r\n    c += 8\r\n  }\r\n  f = b & (1 << a) - 1;\r\n  this.bitsbuf = b >>> a;\r\n  this.bitsbuflen = c - a;\r\n  this.ip = e;\r\n  return f\r\n};\r\nZlib.RawInflateStream.prototype.readCodeByTable = function(a) {\r\n  for(var b = this.bitsbuf, c = this.bitsbuflen, d = this.input, e = this.ip, f = a[0], a = a[1], g;c < a;) {\r\n    g = d[e++];\r\n    if(void 0 === g) {\r\n      return-1\r\n    }\r\n    b |= g << c;\r\n    c += 8\r\n  }\r\n  d = f[b & (1 << a) - 1];\r\n  f = d >>> 16;\r\n  this.bitsbuf = b >> f;\r\n  this.bitsbuflen = c - f;\r\n  this.ip = e;\r\n  return d & 65535\r\n};\r\nZlib.RawInflateStream.prototype.readUncompressedBlockHeader = function() {\r\n  var a, b, c, d = this.input, e = this.ip;\r\n  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_START;\r\n  a = d[e++];\r\n  if(void 0 === a) {\r\n    return-1\r\n  }\r\n  b = a;\r\n  a = d[e++];\r\n  if(void 0 === a) {\r\n    return-1\r\n  }\r\n  b |= a << 8;\r\n  a = d[e++];\r\n  if(void 0 === a) {\r\n    return-1\r\n  }\r\n  c = a;\r\n  a = d[e++];\r\n  if(void 0 === a) {\r\n    return-1\r\n  }\r\n  if(b === ~(c | a << 8)) {\r\n    throw Error("invalid uncompressed block header: length verify");\r\n  }\r\n  this.bitsbuflen = this.bitsbuf = 0;\r\n  this.ip = e;\r\n  this.blockLength = b;\r\n  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_END\r\n};\r\nZlib.RawInflateStream.prototype.parseUncompressedBlock = function() {\r\n  var a = this.input, b = this.ip, c = this.output, d = this.op, e = this.blockLength;\r\n  for(this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_START;e--;) {\r\n    d === c.length && (c = this.expandBuffer());\r\n    if(void 0 === a[b]) {\r\n      return this.ip = b, this.op = d, this.blockLength = e + 1, -1\r\n    }\r\n    c[d++] = a[b++]\r\n  }\r\n  0 > e && (this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_END);\r\n  this.ip = b;\r\n  this.op = d;\r\n  return 0\r\n};\r\nZlib.RawInflateStream.prototype.parseFixedHuffmanBlock = function() {\r\n  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_START;\r\n  this.litlenTable = Zlib.RawInflateStream.FixedLiteralLengthTable;\r\n  this.distTable = Zlib.RawInflateStream.FixedDistanceTable;\r\n  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_END;\r\n  return 0\r\n};\r\nZlib.RawInflateStream.prototype.save_ = function() {\r\n  this.ip_ = this.ip;\r\n  this.bitsbuflen_ = this.bitsbuflen;\r\n  this.bitsbuf_ = this.bitsbuf\r\n};\r\nZlib.RawInflateStream.prototype.restore_ = function() {\r\n  this.ip = this.ip_;\r\n  this.bitsbuflen = this.bitsbuflen_;\r\n  this.bitsbuf = this.bitsbuf_\r\n};\r\nZlib.RawInflateStream.prototype.parseDynamicHuffmanBlock = function() {\r\n  var a, b, c, d = new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.RawInflateStream.Order.length), e, f, g, h = 0;\r\n  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_START;\r\n  this.save_();\r\n  a = this.readBits(5) + 257;\r\n  b = this.readBits(5) + 1;\r\n  c = this.readBits(4) + 4;\r\n  if(0 > a || 0 > b || 0 > c) {\r\n    return this.restore_(), -1\r\n  }\r\n  try {\r\n    for(var i = function(a, b, c) {\r\n      for(var d, e, f = 0, f = 0;f < a;) {\r\n        d = this.readCodeByTable(b);\r\n        if(0 > d) {\r\n          throw Error("not enough input");\r\n        }\r\n        switch(d) {\r\n          case 16:\r\n            if(0 > (d = this.readBits(2))) {\r\n              throw Error("not enough input");\r\n            }\r\n            for(d = 3 + d;d--;) {\r\n              c[f++] = e\r\n            }\r\n            break;\r\n          case 17:\r\n            if(0 > (d = this.readBits(3))) {\r\n              throw Error("not enough input");\r\n            }\r\n            for(d = 3 + d;d--;) {\r\n              c[f++] = 0\r\n            }\r\n            e = 0;\r\n            break;\r\n          case 18:\r\n            if(0 > (d = this.readBits(7))) {\r\n              throw Error("not enough input");\r\n            }\r\n            for(d = 11 + d;d--;) {\r\n              c[f++] = 0\r\n            }\r\n            e = 0;\r\n            break;\r\n          default:\r\n            e = c[f++] = d\r\n        }\r\n      }\r\n      return c\r\n    }, j, h = 0;h < c;++h) {\r\n      if(0 > (j = this.readBits(3))) {\r\n        throw Error("not enough input");\r\n      }\r\n      d[Zlib.RawInflateStream.Order[h]] = j\r\n    }\r\n    e = (0,Zlib.Huffman.buildHuffmanTable)(d);\r\n    f = new (USE_TYPEDARRAY ? Uint8Array : Array)(a);\r\n    g = new (USE_TYPEDARRAY ? Uint8Array : Array)(b);\r\n    this.litlenTable = (0,Zlib.Huffman.buildHuffmanTable)(i.call(this, a, e, f));\r\n    this.distTable = (0,Zlib.Huffman.buildHuffmanTable)(i.call(this, b, e, g))\r\n  }catch(l) {\r\n    return this.restore_(), -1\r\n  }\r\n  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_END;\r\n  return 0\r\n};\r\nZlib.RawInflateStream.prototype.decodeHuffman = function() {\r\n  var a = this.output, b = this.op, c, d, e, f = this.litlenTable, g = this.distTable, h = a.length;\r\n  for(this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_START;;) {\r\n    this.save_();\r\n    c = this.readCodeByTable(f);\r\n    if(0 > c) {\r\n      return this.op = b, this.restore_(), -1\r\n    }\r\n    if(256 === c) {\r\n      break\r\n    }\r\n    if(256 > c) {\r\n      b === h && (a = this.expandBuffer(), h = a.length), a[b++] = c\r\n    }else {\r\n      d = c - 257;\r\n      e = Zlib.RawInflateStream.LengthCodeTable[d];\r\n      if(0 < Zlib.RawInflateStream.LengthExtraTable[d]) {\r\n        c = this.readBits(Zlib.RawInflateStream.LengthExtraTable[d]);\r\n        if(0 > c) {\r\n          return this.op = b, this.restore_(), -1\r\n        }\r\n        e += c\r\n      }\r\n      c = this.readCodeByTable(g);\r\n      if(0 > c) {\r\n        return this.op = b, this.restore_(), -1\r\n      }\r\n      d = Zlib.RawInflateStream.DistCodeTable[c];\r\n      if(0 < Zlib.RawInflateStream.DistExtraTable[c]) {\r\n        c = this.readBits(Zlib.RawInflateStream.DistExtraTable[c]);\r\n        if(0 > c) {\r\n          return this.op = b, this.restore_(), -1\r\n        }\r\n        d += c\r\n      }\r\n      b + e >= h && (a = this.expandBuffer(), h = a.length);\r\n      for(;e--;) {\r\n        a[b] = a[b++ - d]\r\n      }\r\n      if(this.ip === this.input.length) {\r\n        return this.op = b, -1\r\n      }\r\n    }\r\n  }\r\n  for(;8 <= this.bitsbuflen;) {\r\n    this.bitsbuflen -= 8, this.ip--\r\n  }\r\n  this.op = b;\r\n  this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_END\r\n};\r\nZlib.RawInflateStream.prototype.expandBuffer = function(a) {\r\n  var b = this.input.length / this.ip + 1 | 0, c = this.input, d = this.output;\r\n  a && ("number" === typeof a.fixRatio && (b = a.fixRatio), "number" === typeof a.addRatio && (b += a.addRatio));\r\n  2 > b ? (a = (c.length - this.ip) / this.litlenTable[2], a = 258 * (a / 2) | 0, a = a < d.length ? d.length + a : d.length << 1) : a = d.length * b;\r\n  USE_TYPEDARRAY ? (a = new Uint8Array(a), a.set(d)) : a = d;\r\n  return this.output = a\r\n};\r\nZlib.RawInflateStream.prototype.concatBuffer = function() {\r\n  var a, b = this.op;\r\n  this.resize ? USE_TYPEDARRAY ? (a = new Uint8Array(b), a.set(this.output.subarray(this.sp, b))) : a = this.output.slice(this.sp, b) : a = USE_TYPEDARRAY ? this.output.subarray(this.sp, b) : this.output.slice(this.sp, b);\r\n  this.buffer = a;\r\n  this.sp = b;\r\n  return this.buffer\r\n};\r\nZlib.RawInflateStream.prototype.getBytes = function() {\r\n  return USE_TYPEDARRAY ? this.output.subarray(0, this.op) : this.output.slice(0, this.op)\r\n};\r\nZlib.InflateStream = function(a) {\r\n  this.input = void 0 === a ? new (USE_TYPEDARRAY ? Uint8Array : Array) : a;\r\n  this.ip = 0;\r\n  this.rawinflate = new Zlib.RawInflateStream(this.input, this.ip);\r\n  this.output = this.rawinflate.output\r\n};\r\nZlib.InflateStream.prototype.decompress = function(a) {\r\n  if(void 0 !== a) {\r\n    if(USE_TYPEDARRAY) {\r\n      var b = new Uint8Array(this.input.length + a.length);\r\n      b.set(this.input, 0);\r\n      b.set(a, this.input.length);\r\n      this.input = b\r\n    }else {\r\n      this.input = this.input.concat(a)\r\n    }\r\n  }\r\n  if(void 0 === this.method && 0 > this.readHeader()) {\r\n    return new (USE_TYPEDARRAY ? Uint8Array : Array)\r\n  }\r\n  a = this.rawinflate.decompress(this.input, this.ip);\r\n  this.ip = this.rawinflate.ip;\r\n  return a\r\n};\r\nZlib.InflateStream.prototype.getBytes = function() {\r\n  return this.rawinflate.getBytes()\r\n};\r\nZlib.InflateStream.prototype.readHeader = function() {\r\n  var a = this.ip, b = this.input, c = b[a++], b = b[a++];\r\n  if(void 0 === c || void 0 === b) {\r\n    return-1\r\n  }\r\n  switch(c & 15) {\r\n    case Zlib.CompressionMethod.DEFLATE:\r\n      this.method = Zlib.CompressionMethod.DEFLATE;\r\n      break;\r\n    default:\r\n      throw Error("unsupported compression method");\r\n  }\r\n  if(0 !== ((c << 8) + b) % 31) {\r\n    throw Error("invalid fcheck flag:" + ((c << 8) + b) % 31);\r\n  }\r\n  if(b & 32) {\r\n    throw Error("fdict flag is not supported");\r\n  }\r\n  this.ip = a\r\n};\r\nZlib.Util = {};\r\nZlib.Util.stringToByteArray = function(a) {\r\n  var a = a.split(""), b, c;\r\n  b = 0;\r\n  for(c = a.length;b < c;b++) {\r\n    a[b] = (a[b].charCodeAt(0) & 255) >>> 0\r\n  }\r\n  return a\r\n};\r\nZlib.Adler32 = function(a) {\r\n  "string" === typeof a && (a = Zlib.Util.stringToByteArray(a));\r\n  return Zlib.Adler32.update(1, a)\r\n};\r\nZlib.Adler32.update = function(a, b) {\r\n  for(var c = a & 65535, d = a >>> 16 & 65535, e = b.length, f, g = 0;0 < e;) {\r\n    f = e > Zlib.Adler32.OptimizationParameter ? Zlib.Adler32.OptimizationParameter : e;\r\n    e -= f;\r\n    do {\r\n      c += b[g++], d += c\r\n    }while(--f);\r\n    c %= 65521;\r\n    d %= 65521\r\n  }\r\n  return(d << 16 | c) >>> 0\r\n};\r\nZlib.Adler32.OptimizationParameter = 1024;\r\nZlib.Deflate = function(a, b) {\r\n  this.input = a;\r\n  this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.Deflate.DefaultBufferSize);\r\n  this.compressionType = Zlib.Deflate.CompressionType.DYNAMIC;\r\n  var c = {}, d;\r\n  if((b || !(b = {})) && "number" === typeof b.compressionType) {\r\n    this.compressionType = b.compressionType\r\n  }\r\n  for(d in b) {\r\n    c[d] = b[d]\r\n  }\r\n  c.outputBuffer = this.output;\r\n  this.rawDeflate = new Zlib.RawDeflate(this.input, c)\r\n};\r\nZlib.Deflate.DefaultBufferSize = 32768;\r\nZlib.Deflate.CompressionType = Zlib.RawDeflate.CompressionType;\r\nZlib.Deflate.compress = function(a, b) {\r\n  return(new Zlib.Deflate(a, b)).compress()\r\n};\r\nZlib.Deflate.prototype.compress = function() {\r\n  var a, b, c, d = 0;\r\n  c = this.output;\r\n  a = Zlib.CompressionMethod.DEFLATE;\r\n  switch(a) {\r\n    case Zlib.CompressionMethod.DEFLATE:\r\n      b = Math.LOG2E * Math.log(Zlib.RawDeflate.WindowSize) - 8;\r\n      break;\r\n    default:\r\n      throw Error("invalid compression method");\r\n  }\r\n  b = b << 4 | a;\r\n  c[d++] = b;\r\n  switch(a) {\r\n    case Zlib.CompressionMethod.DEFLATE:\r\n      switch(this.compressionType) {\r\n        case Zlib.Deflate.CompressionType.NONE:\r\n          a = 0;\r\n          break;\r\n        case Zlib.Deflate.CompressionType.FIXED:\r\n          a = 1;\r\n          break;\r\n        case Zlib.Deflate.CompressionType.DYNAMIC:\r\n          a = 2;\r\n          break;\r\n        default:\r\n          throw Error("unsupported compression type");\r\n      }\r\n      break;\r\n    default:\r\n      throw Error("invalid compression method");\r\n  }\r\n  a = a << 6 | 0;\r\n  c[d++] = a | 31 - (256 * b + a) % 31;\r\n  b = Zlib.Adler32(this.input);\r\n  this.rawDeflate.op = d;\r\n  c = this.rawDeflate.compress();\r\n  d = c.length;\r\n  USE_TYPEDARRAY && (c = new Uint8Array(c.buffer), c.length <= d + 4 && (this.output = new Uint8Array(c.length + 4), this.output.set(c), c = this.output), c = c.subarray(0, d + 4));\r\n  c[d++] = b >> 24 & 255;\r\n  c[d++] = b >> 16 & 255;\r\n  c[d++] = b >> 8 & 255;\r\n  c[d++] = b & 255;\r\n  return c\r\n};\r\ngoog.exportSymbol("Zlib.Deflate", Zlib.Deflate);\r\ngoog.exportSymbol("Zlib.Deflate.compress", Zlib.Deflate.compress);\r\ngoog.exportSymbol("Zlib.Deflate.prototype.compress", Zlib.Deflate.prototype.compress);\r\nZlib.exportObject("Zlib.Deflate.CompressionType", {NONE:Zlib.Deflate.CompressionType.NONE, FIXED:Zlib.Deflate.CompressionType.FIXED, DYNAMIC:Zlib.Deflate.CompressionType.DYNAMIC});\r\nZlib.Inflate = function(a, b) {\r\n  var c, d;\r\n  this.input = a;\r\n  this.ip = 0;\r\n  if(b || !(b = {})) {\r\n    b.index && (this.ip = b.index), b.verify && (this.verify = b.verify)\r\n  }\r\n  c = a[this.ip++];\r\n  d = a[this.ip++];\r\n  switch(c & 15) {\r\n    case Zlib.CompressionMethod.DEFLATE:\r\n      this.method = Zlib.CompressionMethod.DEFLATE;\r\n      break;\r\n    default:\r\n      throw Error("unsupported compression method");\r\n  }\r\n  if(0 !== ((c << 8) + d) % 31) {\r\n    throw Error("invalid fcheck flag:" + ((c << 8) + d) % 31);\r\n  }\r\n  if(d & 32) {\r\n    throw Error("fdict flag is not supported");\r\n  }\r\n  this.rawinflate = new Zlib.RawInflate(a, {index:this.ip, bufferSize:b.bufferSize, bufferType:b.bufferType, resize:b.resize})\r\n};\r\nZlib.Inflate.BufferType = Zlib.RawInflate.BufferType;\r\nZlib.Inflate.prototype.decompress = function() {\r\n  var a = this.input, b;\r\n  b = this.rawinflate.decompress();\r\n  this.ip = this.rawinflate.ip;\r\n  if(this.verify && (a = (a[this.ip++] << 24 | a[this.ip++] << 16 | a[this.ip++] << 8 | a[this.ip++]) >>> 0, a !== Zlib.Adler32(b))) {\r\n    throw Error("invalid adler-32 checksum");\r\n  }\r\n  return b\r\n};\r\nZlib.Zip = function(a) {\r\n  a = a || {};\r\n  this.files = [];\r\n  this.comment = a.comment\r\n};\r\nZlib.Zip.prototype.addFile = function(a, b) {\r\n  var b = b || {}, c, d = a.length, e = 0;\r\n  USE_TYPEDARRAY && a instanceof Array && (a = new Uint8Array(a));\r\n  "number" !== typeof b.compressionMethod && (b.compressionMethod = Zlib.Zip.CompressionMethod.DEFLATE);\r\n  if(b.compress) {\r\n    switch(b.compressionMethod) {\r\n      case Zlib.Zip.CompressionMethod.STORE:\r\n        break;\r\n      case Zlib.Zip.CompressionMethod.DEFLATE:\r\n        e = Zlib.CRC32.calc(a);\r\n        a = this.deflateWithOption(a, b);\r\n        c = !0;\r\n        break;\r\n      default:\r\n        throw Error("unknown compression method:" + b.compressionMethod);\r\n    }\r\n  }\r\n  this.files.push({buffer:a, option:b, compressed:c, size:d, crc32:e})\r\n};\r\nZlib.Zip.CompressionMethod = {STORE:0, DEFLATE:8};\r\nZlib.Zip.OperatingSystem = {MSDOS:0, UNIX:3, MACINTOSH:7};\r\nZlib.Zip.prototype.compress = function() {\r\n  var a = this.files, b, c, d, e, f, g = 0, h = 0, i, j, l, m, k, n;\r\n  k = 0;\r\n  for(n = a.length;k < n;++k) {\r\n    b = a[k];\r\n    l = b.option.filename ? b.option.filename.length : 0;\r\n    m = b.option.comment ? b.option.comment.length : 0;\r\n    if(!b.compressed) {\r\n      switch(b.crc32 = Zlib.CRC32.calc(b.buffer), b.option.compressionMethod) {\r\n        case Zlib.Zip.CompressionMethod.STORE:\r\n          break;\r\n        case Zlib.Zip.CompressionMethod.DEFLATE:\r\n          b.buffer = this.deflateWithOption(b.buffer, b.option);\r\n          b.compressed = !0;\r\n          break;\r\n        default:\r\n          throw Error("unknown compression method:" + b.option.compressionMethod);\r\n      }\r\n    }\r\n    g += 30 + l + b.buffer.length;\r\n    h += 46 + l + m\r\n  }\r\n  c = new (USE_TYPEDARRAY ? Uint8Array : Array)(g + h + (46 + (this.comment ? this.comment.length : 0)));\r\n  d = 0;\r\n  e = g;\r\n  f = e + h;\r\n  k = 0;\r\n  for(n = a.length;k < n;++k) {\r\n    b = a[k];\r\n    l = b.option.filename ? b.option.filename.length : 0;\r\n    m = b.option.comment ? b.option.comment.length : 0;\r\n    i = d;\r\n    c[d++] = c[e++] = 80;\r\n    c[d++] = c[e++] = 75;\r\n    c[d++] = 3;\r\n    c[d++] = 4;\r\n    c[e++] = 1;\r\n    c[e++] = 2;\r\n    c[e++] = 20;\r\n    c[e++] = b.option.os || Zlib.Zip.OperatingSystem.MSDOS;\r\n    c[d++] = c[e++] = 20;\r\n    c[d++] = c[e++] = 0;\r\n    c[d++] = c[e++] = 0;\r\n    c[d++] = c[e++] = 0;\r\n    j = b.option.compressionMethod;\r\n    c[d++] = c[e++] = j & 255;\r\n    c[d++] = c[e++] = j >> 8 & 255;\r\n    j = b.option.date || new Date;\r\n    c[d++] = c[e++] = (j.getMinutes() & 7) << 5 | j.getSeconds() / 2 | 0;\r\n    c[d++] = c[e++] = j.getHours() << 3 | j.getMinutes() >> 3;\r\n    c[d++] = c[e++] = (j.getMonth() + 1 & 7) << 5 | j.getDate();\r\n    c[d++] = c[e++] = (j.getFullYear() - 1980 & 127) << 1 | j.getMonth() + 1 >> 3;\r\n    j = b.crc32;\r\n    c[d++] = c[e++] = j & 255;\r\n    c[d++] = c[e++] = j >> 8 & 255;\r\n    c[d++] = c[e++] = j >> 16 & 255;\r\n    c[d++] = c[e++] = j >> 24 & 255;\r\n    j = b.buffer.length;\r\n    c[d++] = c[e++] = j & 255;\r\n    c[d++] = c[e++] = j >> 8 & 255;\r\n    c[d++] = c[e++] = j >> 16 & 255;\r\n    c[d++] = c[e++] = j >> 24 & 255;\r\n    j = b.size;\r\n    c[d++] = c[e++] = j & 255;\r\n    c[d++] = c[e++] = j >> 8 & 255;\r\n    c[d++] = c[e++] = j >> 16 & 255;\r\n    c[d++] = c[e++] = j >> 24 & 255;\r\n    c[d++] = c[e++] = l & 255;\r\n    c[d++] = c[e++] = l >> 8 & 255;\r\n    c[d++] = c[e++] = 0;\r\n    c[d++] = c[e++] = 0;\r\n    c[e++] = m & 255;\r\n    c[e++] = m >> 8 & 255;\r\n    c[e++] = 0;\r\n    c[e++] = 0;\r\n    c[e++] = 0;\r\n    c[e++] = 0;\r\n    c[e++] = 0;\r\n    c[e++] = 0;\r\n    c[e++] = 0;\r\n    c[e++] = 0;\r\n    c[e++] = i & 255;\r\n    c[e++] = i >> 8 & 255;\r\n    c[e++] = i >> 16 & 255;\r\n    c[e++] = i >> 24 & 255;\r\n    if(j = b.option.filename) {\r\n      if(USE_TYPEDARRAY) {\r\n        c.set(j, d), c.set(j, e), d += l, e += l\r\n      }else {\r\n        for(i = 0;i < l;++i) {\r\n          c[d++] = c[e++] = j[i]\r\n        }\r\n      }\r\n    }\r\n    if(l = b.option.extraField) {\r\n      if(USE_TYPEDARRAY) {\r\n        c.set(l, d), c.set(l, e), d += 0, e += 0\r\n      }else {\r\n        for(i = 0;i < m;++i) {\r\n          c[d++] = c[e++] = l[i]\r\n        }\r\n      }\r\n    }\r\n    if(l = b.option.comment) {\r\n      if(USE_TYPEDARRAY) {\r\n        c.set(l, e), e += m\r\n      }else {\r\n        for(i = 0;i < m;++i) {\r\n          c[e++] = l[i]\r\n        }\r\n      }\r\n    }\r\n    if(USE_TYPEDARRAY) {\r\n      c.set(b.buffer, d), d += b.buffer.length\r\n    }else {\r\n      i = 0;\r\n      for(m = b.buffer.length;i < m;++i) {\r\n        c[d++] = b.buffer[i]\r\n      }\r\n    }\r\n  }\r\n  c[f++] = 80;\r\n  c[f++] = 75;\r\n  c[f++] = 5;\r\n  c[f++] = 6;\r\n  c[f++] = 0;\r\n  c[f++] = 0;\r\n  c[f++] = 0;\r\n  c[f++] = 0;\r\n  c[f++] = n & 255;\r\n  c[f++] = n >> 8 & 255;\r\n  c[f++] = n & 255;\r\n  c[f++] = n >> 8 & 255;\r\n  c[f++] = h & 255;\r\n  c[f++] = h >> 8 & 255;\r\n  c[f++] = h >> 16 & 255;\r\n  c[f++] = h >> 24 & 255;\r\n  c[f++] = g & 255;\r\n  c[f++] = g >> 8 & 255;\r\n  c[f++] = g >> 16 & 255;\r\n  c[f++] = g >> 24 & 255;\r\n  m = this.comment ? this.comment.length : 0;\r\n  c[f++] = m & 255;\r\n  c[f++] = m >> 8 & 255;\r\n  if(this.comment) {\r\n    if(USE_TYPEDARRAY) {\r\n      c.set(this.comment, f)\r\n    }else {\r\n      for(i = 0;i < m;++i) {\r\n        c[f++] = this.comment[i]\r\n      }\r\n    }\r\n  }\r\n  return c\r\n};\r\nZlib.Zip.prototype.deflateWithOption = function(a, b) {\r\n  return(new Zlib.RawDeflate(a, b.deflateOption)).compress()\r\n};\r\nZlib.Unzip = function(a, b) {\r\n  b = b || {};\r\n  this.input = USE_TYPEDARRAY && a instanceof Array ? new Uint8Array(a) : a;\r\n  this.ip = 0;\r\n  this.verify = b.verify || !1\r\n};\r\nZlib.Unzip.CompressionMethod = Zlib.Zip.CompressionMethod;\r\nZlib.Unzip.FileHeader = function(a, b) {\r\n  this.input = a;\r\n  this.offset = b\r\n};\r\nZlib.Unzip.FileHeader.prototype.parse = function() {\r\n  var a = this.input, b = this.offset;\r\n  if(80 !== a[b++] || 75 !== a[b++] || 1 !== a[b++] || 2 !== a[b++]) {\r\n    throw Error("invalid file header signature");\r\n  }\r\n  this.version = a[b++];\r\n  this.os = a[b++];\r\n  this.needVersion = a[b++] | a[b++] << 8;\r\n  this.flags = a[b++] | a[b++] << 8;\r\n  this.compression = a[b++] | a[b++] << 8;\r\n  this.time = a[b++] | a[b++] << 8;\r\n  this.date = a[b++] | a[b++] << 8;\r\n  this.crc32 = (a[b++] | a[b++] << 8 | a[b++] << 16 | a[b++] << 24) >>> 0;\r\n  this.compressedSize = a[b++] | a[b++] << 8 | a[b++] << 16 | a[b++] << 24;\r\n  this.plainSize = a[b++] | a[b++] << 8 | a[b++] << 16 | a[b++] << 24;\r\n  this.fileNameLength = a[b++] | a[b++] << 8;\r\n  this.extraFieldLength = a[b++] | a[b++] << 8;\r\n  this.fileCommentLength = a[b++] | a[b++] << 8;\r\n  this.diskNumberStart = a[b++] | a[b++] << 8;\r\n  this.internalFileAttributes = a[b++] | a[b++] << 8;\r\n  this.externalFileAttributes = a[b++] | a[b++] << 8 | a[b++] << 16 | a[b++] << 24;\r\n  this.relativeOffset = a[b++] | a[b++] << 8 | a[b++] << 16 | a[b++] << 24;\r\n  this.filename = String.fromCharCode.apply(null, USE_TYPEDARRAY ? a.subarray(b, b += this.fileNameLength) : a.slice(b, b += this.fileNameLength));\r\n  this.extraField = USE_TYPEDARRAY ? a.subarray(b, b += this.extraFieldLength) : a.slice(b, b += this.extraFieldLength);\r\n  this.comment = USE_TYPEDARRAY ? a.subarray(b, b + this.fileCommentLength) : a.slice(b, b + this.fileCommentLength);\r\n  this.length = b - this.offset\r\n};\r\nZlib.Unzip.LocalFileHeader = function(a, b) {\r\n  this.input = a;\r\n  this.offset = b\r\n};\r\nZlib.Unzip.LocalFileHeader.prototype.parse = function() {\r\n  var a = this.input, b = this.offset;\r\n  if(80 !== a[b++] || 75 !== a[b++] || 3 !== a[b++] || 4 !== a[b++]) {\r\n    throw Error("invalid local file header signature");\r\n  }\r\n  this.needVersion = a[b++] | a[b++] << 8;\r\n  this.flags = a[b++] | a[b++] << 8;\r\n  this.compression = a[b++] | a[b++] << 8;\r\n  this.time = a[b++] | a[b++] << 8;\r\n  this.date = a[b++] | a[b++] << 8;\r\n  this.crc32 = (a[b++] | a[b++] << 8 | a[b++] << 16 | a[b++] << 24) >>> 0;\r\n  this.compressedSize = a[b++] | a[b++] << 8 | a[b++] << 16 | a[b++] << 24;\r\n  this.plainSize = a[b++] | a[b++] << 8 | a[b++] << 16 | a[b++] << 24;\r\n  this.fileNameLength = a[b++] | a[b++] << 8;\r\n  this.extraFieldLength = a[b++] | a[b++] << 8;\r\n  this.filename = String.fromCharCode.apply(null, USE_TYPEDARRAY ? a.subarray(b, b += this.fileNameLength) : a.slice(b, b += this.fileNameLength));\r\n  this.extraField = USE_TYPEDARRAY ? a.subarray(b, b += this.extraFieldLength) : a.slice(b, b += this.extraFieldLength);\r\n  this.length = b - this.offset\r\n};\r\nZlib.Unzip.prototype.searchEndOfCentralDirectoryRecord = function() {\r\n  var a = this.input, b;\r\n  for(b = a.length - 12;0 < b;--b) {\r\n    if(80 === a[b] && 75 === a[b + 1] && 5 === a[b + 2] && 6 === a[b + 3]) {\r\n      this.eocdrOffset = b;\r\n      return\r\n    }\r\n  }\r\n  throw Error("End of Central Directory Record not found");\r\n};\r\nZlib.Unzip.prototype.parseEndOfCentralDirectoryRecord = function() {\r\n  var a = this.input, b;\r\n  this.eocdrOffset || this.searchEndOfCentralDirectoryRecord();\r\n  b = this.eocdrOffset;\r\n  if(80 !== a[b++] || 75 !== a[b++] || 5 !== a[b++] || 6 !== a[b++]) {\r\n    throw Error("invalid signature");\r\n  }\r\n  this.numberOfThisDisk = a[b++] | a[b++] << 8;\r\n  this.startDisk = a[b++] | a[b++] << 8;\r\n  this.totalEntriesThisDisk = a[b++] | a[b++] << 8;\r\n  this.totalEntries = a[b++] | a[b++] << 8;\r\n  this.centralDirectorySize = a[b++] | a[b++] << 8 | a[b++] << 16 | a[b++] << 24;\r\n  this.centralDirectoryOffset = a[b++] | a[b++] << 8 | a[b++] << 16 | a[b++] << 24;\r\n  this.commentLength = a[b++] | a[b++] << 8;\r\n  this.comment = USE_TYPEDARRAY ? a.subarray(b, b + this.commentLength) : a.slice(b, b + this.commentLength)\r\n};\r\nZlib.Unzip.prototype.parseFileHeader = function() {\r\n  var a = [], b = {}, c, d, e, f;\r\n  if(!this.fileHeaderList) {\r\n    void 0 === this.centralDirectoryOffset && this.parseEndOfCentralDirectoryRecord();\r\n    c = this.centralDirectoryOffset;\r\n    e = 0;\r\n    for(f = this.totalEntries;e < f;++e) {\r\n      d = new Zlib.Unzip.FileHeader(this.input, c), d.parse(), c += d.length, a[e] = d, b[d.filename] = e\r\n    }\r\n    if(this.centralDirectorySize < c - this.centralDirectoryOffset) {\r\n      throw Error("invalid file header size");\r\n    }\r\n    this.fileHeaderList = a;\r\n    this.filenameToIndex = b\r\n  }\r\n};\r\nZlib.Unzip.prototype.getFileData = function(a) {\r\n  var b = this.fileHeaderList, c;\r\n  b || this.parseFileHeader();\r\n  if(void 0 === b[a]) {\r\n    throw Error("wrong index");\r\n  }\r\n  b = b[a].relativeOffset;\r\n  a = new Zlib.Unzip.LocalFileHeader(this.input, b);\r\n  a.parse();\r\n  b += a.length;\r\n  c = a.compressedSize;\r\n  switch(a.compression) {\r\n    case Zlib.Unzip.CompressionMethod.STORE:\r\n      b = USE_TYPEDARRAY ? this.input.subarray(b, b + c) : this.input.slice(b, b + c);\r\n      break;\r\n    case Zlib.Unzip.CompressionMethod.DEFLATE:\r\n      b = (new Zlib.RawInflate(this.input, {index:b, bufferSize:a.plainSize})).decompress();\r\n      break;\r\n    default:\r\n      throw Error("unknown compression type");\r\n  }\r\n  if(this.verify && (c = Zlib.CRC32.calc(b), a.crc32 !== c)) {\r\n    throw Error("wrong crc: file=0x" + a.crc32.toString(16) + ", data=0x" + c.toString(16));\r\n  }\r\n  return b\r\n};\r\nZlib.Unzip.prototype.getFilenames = function() {\r\n  var a = [], b, c, d;\r\n  this.fileHeaderList || this.parseFileHeader();\r\n  d = this.fileHeaderList;\r\n  b = 0;\r\n  for(c = d.length;b < c;++b) {\r\n    a[b] = d[b].filename\r\n  }\r\n  return a\r\n};\r\nZlib.Unzip.prototype.decompress = function(a) {\r\n  var b;\r\n  this.filenameToIndex || this.parseFileHeader();\r\n  b = this.filenameToIndex[a];\r\n  if(void 0 === b) {\r\n    throw Error(a + " not found");\r\n  }\r\n  return this.getFileData(b)\r\n};\r\nZlib.CompressionMethod = {DEFLATE:8, RESERVED:15};\r\n}).call(this);\r\n\ndefine("thirdparty/deflate.min", function(){});\n\ndefine(\'utils/misc_utils\',[\'thirdparty/inflate.min\', \'thirdparty/deflate.min\'], function(){\r\n    /* Main object */\r\n    var utils = {\r\n      \r\n      // Print an error either to the console if in node, or to div#jsgit-errors\r\n      // if in the client.\r\n      handleError: function(message) {\r\n        if (jsGitInNode) {\r\n          console.log(message)\r\n        }\r\n        else {\r\n          $(\'#jsgit-errors\').append(message)\r\n        }\r\n      },\r\n      \r\n      // Turn an array of bytes into a String\r\n      bytesToString: function(bytes) {\r\n        var result = "";\r\n        var i;\r\n        for (i = 0; i < bytes.length; i++) {\r\n          result = result.concat(String.fromCharCode(bytes[i]));\r\n        }\r\n        return result;\r\n      },\r\n      \r\n      stringToBytes: function(string) {\r\n        var bytes = []; \r\n        var i; \r\n        for(i = 0; i < string.length; i++) {\r\n          bytes.push(string.charCodeAt(i) & 0xff);\r\n        }\r\n        return bytes;\r\n      },\r\n        \r\n      toBinaryString: function(binary) {\r\n        if (Array.isArray(binary)) {\r\n          return Git.bytesToString(binary)\r\n        }\r\n        else {\r\n          return binary\r\n        }\r\n      },\r\n        \r\n      // returns the next pkt-line\r\n      nextPktLine: function(data) {\r\n        var length = parseInt(data.substring(0, 4), 16);\r\n        return data.substring(4, length);\r\n      },\r\n      \r\n      // zlib files contain a two byte header. (RFC 1950)\r\n      stripZlibHeader: function(zlib) {\r\n        return zlib.subarray(2)\r\n      },\r\n      \r\n      escapeHTML: function(s) {\r\n        return s\r\n          .replace(/&/g, \'&amp;\')\r\n          .replace(/</g, \'&lt;\')\r\n          .replace(/>/g, \'&gt;\');\r\n      },\r\n        convertShaToBytes: function(sha){\r\n            var bytes = new Uint8Array(sha.length/2);\r\n            for (var i = 0; i < sha.length; i+=2)\r\n            {\r\n                bytes[i/2] = parseInt(\'0x\' + sha.substr(i, 2));\r\n            }\r\n            return bytes;   \r\n        },\r\n        convertBytesToSha : function(bytes){\r\n            var shaChars = [];\r\n            for (var i = 0; i < bytes.length; i++){\r\n                var next = (bytes[i] < 16 ? \'0\' : \'\') + bytes[i].toString(16);\r\n                shaChars.push(next);\r\n            }\r\n            return shaChars.join(\'\');\r\n        },\r\n        compareShas : function(sha1, sha2){\r\n            for (var i = 1; i < 20; i++){\r\n                if (sha1[i] != sha2[i]){\r\n                    return sha1[i] - sha2[i];\r\n                }\r\n            }\r\n            return 0;\r\n        },\r\n        inflate: function(data, expectedLength){\r\n            var options;\r\n            if (expectedLength){\r\n              options = {bufferSize: expectedLength};\r\n            } \r\n            var inflate = new Zlib.Inflate(data, options);\r\n            inflate.verify = true;\r\n            var out = inflate.decompress();\r\n            out.compressedLength = inflate.ip;\r\n            return out;\r\n        },\r\n        deflate: function(data){\r\n            var deflate = new Zlib.Deflate(data);\r\n            var out = deflate.compress();\r\n            return out;\r\n        },\r\n        trimBuffer: function(data){\r\n            var buffer = data.buffer;\r\n            if (data.byteOffset != 0 || data.byteLength != data.buffer.byteLength){\r\n                buffer = data.buffer.slice(data.byteOffset, data.byteLength + data.byteOffset);\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    return utils;\r\n\r\n});\n\r\ndefine(\'utils/file_utils\',[\'utils/misc_utils\'], function(utils){\r\n\tArray.prototype.asyncEach = function(func, callback){\r\n\t\tif (this.length == 0){\r\n\t\t\tcallback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar list = this,\r\n\t\t    counter = {x:0, end:list.length};\r\n\t\t\r\n\t\tvar finish = function(){\r\n\t\t\tcounter.x += 1;\r\n\t\t\tif (counter.x == counter.end){\r\n\t\t\t\tcallback();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (var i = 0; i < list.length; i++){\r\n\t\t\tfunc.call(list, list[i], finish, i);\r\n\t\t}\r\n\t}\r\n\r\n\tvar FileUtils = (function(){\r\n\t\t\r\n\t\tvar toArray = function(list) {\r\n\t\t\treturn Array.prototype.slice.call(list || [], 0);\r\n\t\t}\r\n\t\t\r\n\t\tvar makeFile = function(root, filename, contents, callback, error){\r\n\t\t\troot.getFile(filename, {create:true}, function(fileEntry){\r\n\t\t\t\tfileEntry.createWriter(function(writer){\r\n\t\t\t\t\twriter.onwriteend = function(){\r\n\t\t\t\t\t\t// strange piece of the FileWriter api. Writing to an \r\n\t\t\t\t\t\t// existing file just overwrites content in place. Still need to truncate\r\n\t\t\t\t\t\t// which triggers onwritend event...again. o_O\r\n\t\t\t\t\t\tif (writer.position < writer.length){\r\n\t\t\t\t\t\t\twriter.truncate(writer.position);\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (callback)\r\n\t\t\t\t\t\t\tcallback(fileEntry);\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\twriter.onerror = function(e){\r\n\t\t\t\t\t\tthrow(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (contents instanceof ArrayBuffer){\r\n\t\t\t\t\t\tcontents = new Uint8Array(contents);\r\n\t\t\t\t\t}\r\n\t\t\t\t\twriter.write(new Blob([contents]));\r\n\t\t\t\t}, error);\r\n\t\t\t}, error);\r\n\t\t}\r\n\t\t\r\n\t\tvar makeDir = function(root, dirname, callback, error){\r\n\t\t\troot.getDirectory(dirname, {create:true},callback, error);\r\n\t\t}\r\n\t\t\r\n\t\treturn {\r\n\t\t\tmkdirs : function(root, dirname, callback, error){\r\n\t\t\t\tvar pathParts;\r\n\t\t\t\tif (dirname instanceof Array){\r\n\t\t\t\t\tpathParts = dirname;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tpathParts = dirname.split(\'/\');\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar makeDirCallback = function(dir){\r\n\t\t\t\t\tif (pathParts.length){\r\n\t\t\t\t\t\tmakeDir(dir, pathParts.shift(), makeDirCallback, error);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tif (callback)\r\n\t\t\t\t\t\t\tcallback(dir);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tmakeDirCallback(root);\r\n\t\t\t},\r\n\t\t\trmDir : function (root, dirname, callback){\r\n\t\t\t\troot.getDirectory(dirname, {create:true}, function(dirEntry){\r\n\t\t\t\t\tdirEntry.removeRecursively(callback, utils.errorHandler);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\trmFile : function(root, filename, callback){\r\n\t\t\t\troot.getFile(filename, {create:true}, function(fileEntry){\r\n\t\t\t\t\tfileEntry.remove(callback, utils.errorHandler);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tmkfile : function(root, filename, contents, callback, error){\r\n\t\t\t\tif (filename.charAt(0) == \'/\'){\r\n\t\t\t\t\tfilename = filename.substring(1);\r\n\t\t\t\t}\r\n\t\t\t\tvar pathParts = filename.split(\'/\');\r\n\t\t\t\tif (pathParts.length > 1){\r\n\t\t\t\t\tFileUtils.mkdirs(root, pathParts.slice(0, pathParts.length - 1), function(dir){\r\n\t\t\t\t\t\tmakeFile(dir, pathParts[pathParts.length - 1], contents, callback, error);\r\n\t\t\t\t\t}, error);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tmakeFile(root, filename, contents, callback, error);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tls: function(dir, callback, error){\r\n\t\t\t\tvar reader = dir.createReader();\r\n\t\t\t\tvar entries = [];\r\n\t\t\t\t\r\n\t\t\t\tvar readEntries = function() {\r\n\t\t\t\t\treader.readEntries (function(results) {\r\n\t\t\t\t\t\tif (!results.length) {\r\n\t\t\t\t\t\t\tcallback(entries);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tentries = entries.concat(toArray(results));\r\n\t\t\t\t\t\t\treadEntries();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, error);\r\n\t\t\t\t}\r\n\t\t\t\treadEntries();\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t\treadBlob: function(blob, dataType, callback){\r\n\t\t\t\tvar reader = new FileReader();\r\n\t\t\t\treader.onloadend = function(e){\r\n\t\t\t\t\tcallback(reader.result);\r\n\t\t\t\t}\r\n\t\t\t\treader["readAs" + dataType](blob);\r\n\t\t\t},\r\n\t\t\treadFileEntry : function(fileEntry, dataType, callback){\r\n\t\t\t\tfileEntry.file(function(file){\r\n\t\t\t\t\tFileUtils.readBlob(file, dataType, callback);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\treadFile : function(root, file, dataType, callback, error) {\r\n\t\t\t\t\r\n\t\t\t\troot.getFile(file, {create:false}, function(fileEntry){\r\n\t\t\t\t\tFileUtils.readFileEntry(fileEntry, dataType, callback, error);\r\n\t\t\t\t}, error);\r\n\t\t\t}\r\n\t\t\r\n\t\t};\r\n\t}\r\n\t)();\r\n\r\n\treturn FileUtils; \r\n});\ndefine(\'commands/object2file\',[\'utils/file_utils\'], function(fileutils){\r\n\r\n    var expandBlob = function(dir, store, name, blobSha, callback){\r\n        var makeFileFactory = function(name){\r\n            return function(blob){\r\n                fileutils.mkfile(dir, name, blob.data, callback, function(e){console.log(e)});\r\n            }\r\n        }\r\n        store._retrieveObject(blobSha, "Blob", makeFileFactory(name));\r\n    }\r\n\r\n    var expandTree = function(dir, store, treeSha, callback){\r\n        \r\n        store._retrieveObject(treeSha, "Tree", function(tree){\r\n            var entries = tree.entries;\r\n            entries.asyncEach(function(entry, done){\r\n                if (entry.isBlob){\r\n                    var name = entry.name;\r\n                    expandBlob(dir, store, name, entry.sha, done);\r\n                }\r\n                else{\r\n                    var sha = entry.sha;\r\n                    fileutils.mkdirs(dir, entry.name, function(newDir){\r\n                        expandTree(newDir, store, sha, done);\r\n                    });\r\n                }\r\n            },callback);\r\n        });\r\n    }\r\n\r\n    return {\r\n        expandTree : expandTree,\r\n        expandBlob : expandBlob\r\n    }\r\n\r\n});\ndefine(\'objectstore/delta\',[],function() {\r\n    var applyDelta = (function() {\r\n        var matchLength = function(stream) {\r\n            var data = stream.data\r\n            var offset = stream.offset\r\n            var result = 0\r\n            var currentShift = 0\r\n            var _byte = 128\r\n            var maskedByte, shiftedByte\r\n\r\n            while ((_byte & 128) != 0) {\r\n                _byte = data[offset]\r\n                offset += 1\r\n                maskedByte = _byte & 0x7f\r\n                shiftedByte = maskedByte << currentShift\r\n                result += shiftedByte\r\n                currentShift += 7\r\n            }\r\n            stream.offset = offset\r\n            return result\r\n        }\r\n\r\n        return function(baseData, delta) {\r\n            //var baseData = Git.stringToBytes(baseDataString)\r\n            var stream = {\r\n                data: delta,\r\n                offset: 0,\r\n                length: delta.length\r\n            }\r\n            var bb = [];\r\n            var baseLength = matchLength(stream)\r\n            if (baseLength != baseData.length) {\r\n                throw (Error("Delta Error: base length not equal to length of given base data"))\r\n            }\r\n\r\n            var resultLength = matchLength(stream)\r\n            var resultData = new Uint8Array(resultLength);\r\n            var resultOffset = 0;\r\n\r\n            var copyOffset\r\n            var copyLength\r\n            var opcode\r\n            var copyFromResult\r\n            while (stream.offset < stream.length) {\r\n                opcode = stream.data[stream.offset]\r\n                stream.offset += 1\r\n                copyOffset = 0\r\n                copyLength = 0\r\n                if (opcode == 0) {\r\n                    throw (Error("Don\'t know what to do with a delta opcode 0"))\r\n                } else if ((opcode & 0x80) != 0) {\r\n                    var value\r\n                    var shift = 0\r\n                    _(4).times(function() {\r\n                        if ((opcode & 0x01) != 0) {\r\n                            value = stream.data[stream.offset]\r\n                            stream.offset += 1\r\n                            copyOffset += (value << shift)\r\n                        }\r\n                        opcode >>= 1\r\n                        shift += 8\r\n                    })\r\n                    shift = 0\r\n                    _(2).times(function() {\r\n                        if ((opcode & 0x01) != 0) {\r\n                            value = stream.data[stream.offset]\r\n                            stream.offset += 1\r\n                            copyLength += (value << shift)\r\n                        }\r\n                        opcode >>= 1\r\n                        shift += 8\r\n                    })\r\n                    if (copyLength == 0) {\r\n                        copyLength = (1 << 16)\r\n                    }\r\n\r\n                    // TODO: check if this is a version 2 packfile and apply copyFromResult if so\r\n                    copyFromResult = (opcode & 0x01)\r\n                    var subarray = baseData.subarray(copyOffset, copyOffset + copyLength);\r\n                    resultData.set(subarray, resultOffset);\r\n                    resultOffset += subarray.length;\r\n\r\n                } else if ((opcode & 0x80) == 0) {\r\n                    var subarray = stream.data.subarray(stream.offset, stream.offset + opcode);\r\n                    resultData.set(subarray, resultOffset);\r\n                    resultOffset += subarray.length;\r\n                    stream.offset += opcode\r\n                }\r\n            }\r\n            return resultData.buffer;\r\n            \r\n        }\r\n    }());\r\n\r\n    return applyDelta;\r\n});\nif(typeof Crypto=="undefined"||!Crypto.util)(function(){var i=window.Crypto={},l=i.util={rotl:function(a,c){return a<<c|a>>>32-c},rotr:function(a,c){return a<<32-c|a>>>c},endian:function(a){if(a.constructor==Number)return l.rotl(a,8)&16711935|l.rotl(a,24)&4278255360;for(var c=0;c<a.length;c++)a[c]=l.endian(a[c]);return a},randomBytes:function(a){for(var c=[];a>0;a--)c.push(Math.floor(Math.random()*256));return c},bytesToWords:function(a){for(var c=[],b=0,d=0;b<a.length;b++,d+=8)c[d>>>5]|=a[b]<<24-\r\nd%32;return c},wordsToBytes:function(a){for(var c=[],b=0;b<a.length*32;b+=8)c.push(a[b>>>5]>>>24-b%32&255);return c},bytesToHex:function(a){for(var c=[],b=0;b<a.length;b++){c.push((a[b]>>>4).toString(16));c.push((a[b]&15).toString(16))}return c.join("")},hexToBytes:function(a){for(var c=[],b=0;b<a.length;b+=2)c.push(parseInt(a.substr(b,2),16));return c},bytesToBase64:function(a){if(typeof btoa=="function")return btoa(m.bytesToString(a));for(var c=[],b=0;b<a.length;b+=3)for(var d=a[b]<<16|a[b+1]<<\r\n8|a[b+2],e=0;e<4;e++)b*8+e*6<=a.length*8?c.push("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(d>>>6*(3-e)&63)):c.push("=");return c.join("")},base64ToBytes:function(a){if(typeof atob=="function")return m.stringToBytes(atob(a));a=a.replace(/[^A-Z0-9+\\/]/ig,"");for(var c=[],b=0,d=0;b<a.length;d=++b%4)d!=0&&c.push(("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(a.charAt(b-1))&Math.pow(2,-2*d+8)-1)<<d*2|"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(a.charAt(b))>>>\r\n6-d*2);return c}};i.mode={};i=i.charenc={};i.UTF8={stringToBytes:function(a){return m.stringToBytes(unescape(encodeURIComponent(a)))},bytesToString:function(a){return decodeURIComponent(escape(m.bytesToString(a)))}};var m=i.Binary={stringToBytes:function(a){for(var c=[],b=0;b<a.length;b++)c.push(a.charCodeAt(b)&255);return c},bytesToString:function(a){for(var c=[],b=0;b<a.length;b++)c.push(String.fromCharCode(a[b]));return c.join("")}}})();\r\n(function(){var i=Crypto,l=i.util,m=i.charenc,a=m.UTF8,c=m.Binary,b=i.SHA1=function(d,e){var g=l.wordsToBytes(b._sha1(d));return e&&e.asBytes?g:e&&e.asString?c.bytesToString(g):l.bytesToHex(g)};b._sha1=function(d){if(d.constructor==String)d=a.stringToBytes(d);var e=l.bytesToWords(d),g=d.length*8;d=[];var n=1732584193,h=-271733879,j=-1732584194,k=271733878,o=-1009589776;e[g>>5]|=128<<24-g%32;e[(g+64>>>9<<4)+15]=g;for(g=0;g<e.length;g+=16){for(var q=n,r=h,s=j,t=k,u=o,f=0;f<80;f++){if(f<16)d[f]=e[g+\r\nf];else{var p=d[f-3]^d[f-8]^d[f-14]^d[f-16];d[f]=p<<1|p>>>31}p=(n<<5|n>>>27)+o+(d[f]>>>0)+(f<20?(h&j|~h&k)+1518500249:f<40?(h^j^k)+1859775393:f<60?(h&j|h&k|j&k)-1894007588:(h^j^k)-899497514);o=k;k=j;j=h<<30|h>>>2;h=n;n=p}n+=q;h+=r;j+=s;k+=t;o+=u}return[n,h,j,k,o]};b._blocksize=16;b._digestsize=20})();\r\n\ndefine("thirdparty/2.2.0-sha1", function(){});\n\ndefine(\'formats/pack\',[\'objectstore/delta\', \'utils/misc_utils\', \'utils/file_utils\', \'thirdparty/2.2.0-sha1\'], function(applyDelta, utils, fileutils) {\r\n\r\n    String.prototype.rjust = function(width, padding) {\r\n        padding = padding || " ";\r\n        padding = padding.substr(0, 1);\r\n        if (this.length < width)\r\n            return padding.repeat(width - this.length) + this;\r\n        else\r\n            return this.toString();\r\n    }\r\n    String.prototype.repeat = function(num) {\r\n        for (var i = 0, buf = ""; i < num; i++) buf += this;\r\n        return buf;\r\n    }\r\n\r\n    var Pack = function(binary, store) {\r\n        //var binaryString = Git.toBinaryString(binary)\r\n        var data;\r\n        if (binary.constructor == String)\r\n            data = new Uint8Array(utils.stringToBytes(binary)); //new BinaryFile(binaryString)\r\n        else\r\n            data = new Uint8Array(binary); //new BinaryFile(binaryString)\r\n        var offset = 0\r\n        var objects = null\r\n\r\n        //var lastObjectData = null;\r\n        //var chainCache = {};\r\n        this.getData = function() {\r\n            return data;\r\n        }\r\n\r\n        //if (typeof require === "undefined") {\r\n        var myDebug = function(obj) {\r\n            console.log(obj)\r\n        }\r\n        //}\r\n        //else {\r\n        //  var myDebug = require(\'util\').debug\r\n        //}\r\n\r\n        var peek = function(length) {\r\n            return data.subarray(offset, offset + length)\r\n        }\r\n\r\n        var rest = function() {\r\n            return data.subarray(offset)\r\n        }\r\n\r\n        var advance = function(length) {\r\n            offset += length\r\n        }\r\n\r\n        var matchPrefix = function() {\r\n            if (utils.bytesToString(peek(4)) === "PACK") {\r\n                advance(4)\r\n            } else {\r\n                throw (Error("couldn\'t match PACK"))\r\n            }\r\n        }\r\n\r\n        var matchVersion = function(expectedVersion) {\r\n            var actualVersion = peek(4)[3]\r\n            advance(4)\r\n            if (actualVersion !== expectedVersion) {\r\n                throw ("expected packfile version " + expectedVersion + ", but got " + actualVersion)\r\n            }\r\n        }\r\n\r\n        var matchNumberOfObjects = function() {\r\n            var num = 0\r\n            _(peek(4)).each(function(b) {\r\n                num = num << 8\r\n                num += b\r\n            })\r\n            advance(4);\r\n            return num;\r\n        }\r\n\r\n        var PackedTypes = {\r\n            COMMIT: 1,\r\n            TREE: 2,\r\n            BLOB: 3,\r\n            TAG: 4,\r\n            OFS_DELTA: 6,\r\n            REF_DELTA: 7\r\n        }\r\n        var typeArray = [null, "commit", "tree", "blob", "tag", null, "ofs_delta", "ref_delta"];\r\n        var getTypeStr = function(type) {\r\n            return typeArray[type];\r\n        }\r\n\r\n        var matchObjectHeader = function() {\r\n            var objectStartOffset = offset;\r\n            var headByte = data[offset++];\r\n            var type = (0x70 & headByte) >>> 4;\r\n            var needMore = (0x80 & headByte) > 0;\r\n\r\n            var size = headByte & 0xf;\r\n            var bitsToShift = 4;\r\n\r\n            while (needMore) {\r\n                headByte = data[offset++];\r\n                needMore = (0x80 & headByte) > 0;\r\n                size = size | ((headByte & 0x7f) << bitsToShift);\r\n                bitsToShift += 7;\r\n            }\r\n\r\n            return {\r\n                size: size,\r\n                type: type,\r\n                offset: objectStartOffset\r\n            }\r\n           \r\n        }\r\n\r\n        var objectHash = function(type, content) {\r\n            var contentData = new Uint8Array(content);\r\n            var data = utils.stringToBytes(getTypeStr(type) + " " + contentData.byteLength + "\\0");\r\n            var buf = new ArrayBuffer(data.length + contentData.byteLength);\r\n            var fullContent = new Uint8Array(buf);\r\n            fullContent.set(data);\r\n            fullContent.set(contentData, data.length);\r\n            // return new SHA1(data).hexdigest()\r\n            return Crypto.SHA1(fullContent, {\r\n                asBytes: true\r\n            });\r\n        }\r\n\r\n        var findDeltaBaseOffset = function(header) {\r\n            var offsetBytes = []\r\n            var hintAndOffsetBits = peek(1)[0].toString(2).rjust(8, "0")\r\n            var needMore = (hintAndOffsetBits[0] == "1")\r\n\r\n            offsetBytes.push(hintAndOffsetBits.slice(1, 8))\r\n            advance(1)\r\n\r\n            while (needMore) {\r\n                hintAndOffsetBits = peek(1)[0].toString(2).rjust(8, "0")\r\n                needMore = (hintAndOffsetBits[0] == "1")\r\n                offsetBytes.push(hintAndOffsetBits.slice(1, 8))\r\n                advance(1)\r\n            }\r\n\r\n            var longOffsetString = _(offsetBytes).reduce(function(memo, byteString) {\r\n                return memo + byteString\r\n            }, "")\r\n\r\n            var offsetDelta = parseInt(longOffsetString, 2)\r\n            var n = 1\r\n            _(offsetBytes.length - 1).times(function() {\r\n                offsetDelta += Math.pow(2, 7 * n)\r\n                n += 1\r\n            })\r\n            var desiredOffset = header.offset - offsetDelta\r\n            return desiredOffset;\r\n        }\r\n\r\n        \r\n        var expandDeltifiedObject = function(object, callback) {\r\n\r\n            var doExpand = function(baseObject, deltaObject) {\r\n                deltaObject.type = baseObject.type;\r\n                deltaObject.data = applyDelta(new Uint8Array(baseObject.data), new Uint8Array(deltaObject.data));\r\n                deltaObject.sha = objectHash(deltaObject.type, deltaObject.data);\r\n                return deltaObject;\r\n            }\r\n\r\n            if (object.type == PackedTypes.OFS_DELTA) {\r\n                var baseObject = matchObjectAtOffset(object.desiredOffset);\r\n                switch (baseObject.type) {\r\n                    case PackedTypes.OFS_DELTA:\r\n                    case PackedTypes.REF_DELTA:\r\n                        expandDeltifiedObject(baseObject, function(expandedObject) {\r\n                            var newObject = doExpand(expandedObject, object);\r\n                            callback(newObject);\r\n                        });\r\n                        break;\r\n                    default:\r\n                        var newObject = doExpand(baseObject, object);\r\n                        callback(newObject);\r\n                }\r\n\r\n            } else {\r\n                store._retrieveRawObject(object.baseSha, \'ArrayBuffer\', function(baseObject) {\r\n                    baseObject.sha = object.baseSha;\r\n                    var newObject = doExpand(baseObject, object);\r\n                    callback(newObject);\r\n                });\r\n            }\r\n        }\r\n        var uncompressObject = function(objOffset, uncompressedLength) {\r\n            var deflated = data.subarray(objOffset);\r\n            var out = utils.inflate(deflated, uncompressedLength);\r\n\r\n            return {\r\n                buf: utils.trimBuffer(out),\r\n                compressedLength: out.compressedLength\r\n            };\r\n        }\r\n\r\n        var matchObjectData = function(header) {\r\n\r\n            var object = {\r\n                offset: header.offset,\r\n                //dataOffset: dataOffset,\r\n                //crc: crc32.crc(data.subarray(header.offset, offset)),\r\n                type: header.type,\r\n                //sha: objectHash(header.type, buf),\r\n                // data: objData.buf\r\n            }\r\n            switch (header.type) {\r\n                case PackedTypes.OFS_DELTA:\r\n                    object.desiredOffset = findDeltaBaseOffset(header);\r\n                    break;\r\n                case PackedTypes.REF_DELTA:\r\n                    var shaBytes = peek(20)\r\n                    advance(20)\r\n                    object.baseSha = _(shaBytes).map(function(b) {\r\n                        return b.toString(16).rjust(2, "0")\r\n                    }).join("")\r\n                    break;\r\n                default:\r\n                    break;\r\n\r\n            }\r\n            var objData = uncompressObject(offset, header.size);\r\n            object.data = objData.buf;\r\n\r\n            //var checksum = adler32(buf)\r\n            advance(objData.compressedLength);\r\n            //matchBytes(intToBytes(checksum, 4))\r\n\r\n            return object;\r\n        }\r\n\r\n        var matchObjectAtOffset = function(startOffset) {\r\n            offset = startOffset\r\n            var header = matchObjectHeader()\r\n            return matchObjectData(header);\r\n        }\r\n\r\n        // slightly different code path from the original parser used for building the index\r\n        // I\'m doing it seperately because I needed to solve a call stack overflow caused by\r\n        // synchronouse execution of callbacks for the case of non deltified objects in the\r\n        // pack.\r\n        var matchAndExpandObjectAtOffset = function(startOffset, dataType, callback) {\r\n            //var reverseMap = [null, "commit", "tree", "blob"]\r\n\r\n            var object = matchObjectAtOffset(startOffset);\r\n\r\n            var convertToDataType = function(object) {\r\n                //object.type = reverseMap[object.type];\r\n                if (dataType != \'ArrayBuffer\') {\r\n                    var reader = new FileReader();\r\n\r\n                    reader.onloadend = function() {\r\n                        var buf = reader.result;\r\n                        object.data = buf;\r\n                        callback(object);\r\n                    }\r\n                    reader[\'readAs\' + dataType](new Blob([object.data]));\r\n                }\r\n                else{\r\n                    callback(object);\r\n                }\r\n            }\r\n            switch (object.type) {\r\n                case PackedTypes.OFS_DELTA:\r\n                case PackedTypes.REF_DELTA:\r\n                    expandDeltifiedObject(object, function(expandedObject){\r\n                        convertToDataType(expandedObject);\r\n                    });\r\n                    break;\r\n                default:\r\n                    convertToDataType(object);\r\n                    break;\r\n            }\r\n        };\r\n        this.matchAndExpandObjectAtOffset = matchAndExpandObjectAtOffset;\r\n\r\n        var stripOffsetsFromObjects = function() {\r\n            _(objects).each(function(object) {\r\n                delete object.offset\r\n            })\r\n        }\r\n\r\n        var objectAtOffset = function(offset) {\r\n            return _(objects).detect(function(obj) {\r\n                return obj.offset == offset\r\n            })\r\n        }\r\n\r\n        this.matchObjectAtOffset = matchObjectAtOffset;\r\n\r\n        this.parseAll = function(success, progress) {\r\n            try {\r\n                var numObjects;\r\n                var i;\r\n                var deferredObjects = [];\r\n                objects = [];\r\n\r\n\r\n                matchPrefix()\r\n                matchVersion(2)\r\n                numObjects = matchNumberOfObjects();\r\n\r\n                if (progress){\r\n                    var tracker = 0;\r\n                    var lastPercent = 0;\r\n                    var trackProgress = function(){\r\n                        var pct = (++tracker/numObjects) * 100\r\n                        if (pct - lastPercent >= 1){\r\n                            progress({pct: pct, msg: "Unpacking " + tracker + \'/\' + numObjects + " objects"});\r\n                        }\r\n                    }\r\n                }\r\n                else{\r\n                    var trackProgress = function(){};\r\n                }\r\n                trackProgress();\r\n                for (i = 0; i < numObjects; i++) {\r\n                    var object = matchObjectAtOffset(offset);\r\n\r\n                    object.crc = crc32.crc(data.subarray(object.offset, offset));\r\n\r\n                    // hold on to the data for delta style objects.\r\n                    switch (object.type) {\r\n                        case PackedTypes.OFS_DELTA:\r\n                        case PackedTypes.REF_DELTA:\r\n                            {\r\n                                deferredObjects.push(object);\r\n                                break;\r\n                            }\r\n                        default:\r\n                            object.sha = objectHash(object.type, object.data);\r\n                            delete object.data;\r\n                            trackProgress();\r\n                            break;\r\n                    }\r\n                    objects.push(object);\r\n                }\r\n\r\n                deferredObjects.asyncEach(function(obj, done) {\r\n                    expandDeltifiedObject(obj, function(obj){\r\n                        delete obj.data;\r\n                        trackProgress();\r\n                        done();\r\n                    });\r\n                },\r\n                    success);\r\n\r\n            } catch (e) {\r\n                //console.log("Error caught in pack file parsing data") // + Git.stringToBytes(data.getRawData()))\r\n                throw (e)\r\n            }\r\n            return this\r\n        }\r\n\r\n        this.getObjects = function() {\r\n            return objects\r\n        }\r\n\r\n        // this.getObjectAtOffset = getObjectAtOffset\r\n    }\r\n\r\n    Pack.buildPack = function(commits, repo, callback) {\r\n        var visited = {};\r\n        var counter = {\r\n            x: 0,\r\n            numObjects: 0\r\n        };\r\n        var packed = []; //new BlobBuilder();\r\n\r\n        var map = {\r\n            "commit": 1,\r\n            "tree": 2,\r\n            "blob": 3\r\n        };\r\n\r\n        var packTypeSizeBits = function(type, size) {\r\n            var typeBits = type;//map[type];\r\n            var shifter = size;\r\n            var bytes = [];\r\n            var idx = 0;\r\n\r\n            bytes[idx] = typeBits << 4 | (shifter & 0xf);\r\n            shifter = shifter >>> 4;\r\n\r\n            while (shifter != 0) {\r\n                bytes[idx] = bytes[idx] | 0x80;\r\n                bytes[++idx] = shifter & 0x7f;\r\n                shifter = shifter >>> 7;\r\n            }\r\n            return new Uint8Array(bytes);\r\n        }\r\n\r\n        var packIt = function(object) {\r\n            var compressed;\r\n            var size;\r\n            var type = object.type;\r\n\r\n            if (object.compressedData) {\r\n                size = object.size;\r\n                // clone the data since it may be sub view of a larger buffer;\r\n                compressed = new Uint8Array(compressedData).buffer;\r\n            } else {\r\n                var buf = object.data;\r\n                var data;\r\n                if (buf instanceof ArrayBuffer) {\r\n                    data = new Uint8Array(buf);\r\n                } else if (buf instanceof Uint8Array) {\r\n                    data = buf;\r\n                } else {\r\n                    // assume it\'s a string\r\n                    data = utils.stringToBytes(buf);\r\n                }\r\n\r\n                compressed = utils.deflate(data);\r\n                size = data.length;\r\n            }\r\n            packed.push(packTypeSizeBits(type, size));\r\n            packed.push(compressed);\r\n            counter.numObjects++;\r\n        }\r\n\r\n        var finishPack = function() {\r\n            var packedObjects = []; //new BlobBuilder();\r\n\r\n            var buf = new ArrayBuffer(12);\r\n            var dv = new DataView(buf);\r\n\r\n            // \'PACK\'\r\n            dv.setUint32(0, 0x5041434b, false);\r\n            // version\r\n            dv.setUint32(4, 2, false);\r\n            //number of packed objects\r\n            dv.setUint32(8, counter.numObjects, false);\r\n\r\n            //finalPack.append(buf);\r\n            //finalPack.append(packedObjects);\r\n            packedObjects.push(dv);\r\n            //packed.reverse();\r\n            for (var i = 0; i < packed.length; i++) {\r\n                packedObjects.push(packed[i]);\r\n            }\r\n            //packed.getBlob();\r\n            fileutils.readBlob(new Blob(packedObjects), \'ArrayBuffer\', function(dataBuf) {\r\n                packed = null;\r\n                var dataBufArray = new Uint8Array(dataBuf);\r\n                var sha = Crypto.SHA1(dataBufArray, {\r\n                    asBytes: true\r\n                });\r\n\r\n                var finalPack = []; //new BlobBuilder();\r\n                finalPack.push(dataBufArray);\r\n                finalPack.push(new Uint8Array(sha));\r\n\r\n                fileutils.readBlob(new Blob(finalPack), \'ArrayBuffer\', callback);\r\n            });\r\n\r\n        }\r\n\r\n        var walkTree = function(treeSha, callback) {\r\n            if (visited[treeSha]) {\r\n                callback();\r\n                return;\r\n            } else {\r\n                visited[treeSha] = true;\r\n            }\r\n\r\n            var packTree = function(){\r\n                repo._retrieveObject(treeSha, \'Tree\', function(tree, rawObj) {\r\n                    var childCount = {\r\n                        x: 0\r\n                    };\r\n                    var handleCallback = function() {\r\n                        childCount.x++;\r\n                        if (childCount.x == tree.entries.length) {\r\n                            packIt(rawObj);\r\n                            callback();\r\n                        }\r\n                    }\r\n\r\n                    for (var i = 0; i < tree.entries.length; i++) {\r\n                        var nextSha = utils.convertBytesToSha(tree.entries[i].sha);\r\n                        if (tree.entries[i].isBlob) {\r\n                            if (visited[nextSha]) {\r\n                                handleCallback();\r\n                            } else {\r\n                                visited[nextSha] = true;\r\n                                repo._findPackedObject(tree.entries[i].sha, handleCallback, function(){\r\n                                    repo._retrieveRawObject(nextSha, \'Raw\', function(object) {\r\n                                        packIt(object);\r\n                                        handleCallback();\r\n                                    });\r\n                                });\r\n                            }\r\n                        } else {\r\n                            walkTree(nextSha, function() {\r\n                                handleCallback();\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            var shaBytes = utils.convertShaToBytes(treeSha);\r\n            // assumes that if it\'s packed, the remote knows about the object since all stored packs came from the remote.\r\n            repo._findPackedObject(shaBytes, callback, packTree);\r\n        }\r\n\r\n        if (commits.length == 0){\r\n            finishPack();\r\n        }\r\n        else{\r\n            commits.forEach(function(commitObj) {\r\n                //repo._retrieveObject(commitShas[i], \'Commit\', function(commit, rawObj){\r\n                var commit = commitObj.commit;\r\n                packIt(commitObj.raw);\r\n                walkTree(commit.tree, function() {\r\n                    if (++counter.x == commits.length) {\r\n                        finishPack();\r\n                    }\r\n                });\r\n                //});\r\n            });\r\n        }\r\n\r\n    }\r\n    return Pack;\r\n});\ndefine(\'formats/upload_pack_parser\',[\'formats/pack\', \'utils/misc_utils\'], function(Pack, utils) {\r\n    var parse = function(arraybuffer, repo, success, progress) {\r\n        var data = new Uint8Array(arraybuffer); //new BinaryFile(binaryString);\r\n        var offset = 0;\r\n        var remoteLines = null;\r\n        var objects = null;\r\n\r\n        var peek = function(length) {\r\n            return data.subarray(offset, offset + length);\r\n        };\r\n\r\n        var advance = function(length) {\r\n            offset += length;\r\n        };\r\n\r\n        var getPktLineStr = function(pktLine){\r\n            return utils.bytesToString(data.subarray(pktLine.start, pktLine.end));\r\n        }\r\n\r\n        // A pkt-line is defined in http://git-scm.com/gitserver.txt\r\n        var nextPktLine = function(isShallow) {\r\n            var pktLine = null;\r\n            var length;\r\n            length = parseInt(utils.bytesToString(peek(4)), 16);\r\n            advance(4);\r\n            if (length == 0) {\r\n                if (isShallow) {\r\n                    return nextPktLine()\r\n                }\r\n            } else {\r\n                pktLine = {start: offset, end: offset + length - 4};//peek(length - 4);\r\n                advance(length - 4);\r\n            }\r\n            return pktLine;\r\n        };\r\n\r\n        //console.log("Parsing upload pack of  " + arraybuffer.byteLength + " bytes")\r\n        var startTime = new Date()\r\n        var pktLine = nextPktLine()\r\n        var packFileParser\r\n        var remoteLine = ""\r\n        //var packData = ""\r\n        var gotAckOrNak = false\r\n        var ackRegex = /ACK ([0-9a-fA-F]{40}) common/;\r\n        var common = [];\r\n\r\n        var pktLineStr = getPktLineStr(pktLine);//utils.bytesToString(data.slice(pktLine.start, pktLine.end));\r\n        var shallow;\r\n        while (pktLineStr.slice(0, 7) === "shallow") {\r\n            pktLine = nextPktLine(true);\r\n            shallow = pktLineStr.substring(8);\r\n            pktLineStr = getPktLineStr(pktLine);\r\n        }\r\n\r\n        while (pktLineStr === "NAK\\n" ||\r\n            pktLineStr.slice(0, 3) === "ACK") {\r\n            var matches = ackRegex.exec(pktLineStr);\r\n            if (matches) {\r\n                common.push(matches[1]);\r\n            }\r\n            pktLine = nextPktLine();\r\n            pktLineStr = getPktLineStr(pktLine);\r\n            gotAckOrNak = true;\r\n        }\r\n\r\n        if (!gotAckOrNak) {\r\n            throw (Error("got neither ACK nor NAK in upload pack response"))\r\n        }\r\n        var packDataLines = [];\r\n        while (pktLine !== null) {\r\n            var pktLineType = data[pktLine.start];\r\n            // sideband format. "2" indicates progress messages, "1" pack data\r\n            switch (pktLineType){\r\n                case 2:\r\n                    break;\r\n                case 1:\r\n                    //packData += utils.bytesToString(pktLine.slice(1))\r\n                    packDataLines.push(data.subarray(pktLine.start + 1, pktLine.end));\r\n                    break;\r\n                case 3:\r\n                    throw (Error("fatal error in packet line"))\r\n                    break;    \r\n            }\r\n            pktLine = nextPktLine()\r\n        }\r\n\r\n        // create a blob from the packdata lines then read it as an arraybuffer\r\n        var packDataBlob = new Blob(packDataLines);\r\n        var reader = new FileReader();\r\n        reader.onloadend = function(e){\r\n            var packData = reader.result;\r\n            packFileParser = new Pack(packData, repo);\r\n\r\n            packFileParser.parseAll(function() {\r\n                objects = packFileParser.getObjects()\r\n\r\n               // console.log("took " + (new Date().getTime() - startTime.getTime()) + "ms")\r\n                success(objects, packFileParser.getData(), common, shallow);\r\n            }, progress);\r\n        }\r\n        reader.readAsArrayBuffer(packDataBlob);\r\n    };\r\n    return {\r\n        parse: parse\r\n    };\r\n});\ndefine(\'utils/errors\',[],function() {\r\n\r\n    var errors = {\r\n        // Indicates an unexpected error in the file system.\r\n        FILE_IO_ERROR: 0,\r\n        FILE_IO_ERROR_MSG: \'Unexpected File I/O error\',\r\n        // Indicates an unexpected ajax error when trying to make a request\r\n        AJAX_ERROR: 1, \r\n        AJAX_ERROR_MSG: \'Unexpected ajax error\',\r\n        \r\n        // trying to clone into a non-empty directory\r\n        CLONE_DIR_NOT_EMPTY: 2,\r\n        CLONE_DIR_NOT_EMPTY_MSG: \'The target directory contains files\',\r\n        // No .git directory\r\n        CLONE_DIR_NOT_INTIALIZED: 3,\r\n        CLONE_DIR_NOT_INTIALIZED_MSG: \'The target directory hasn\\\'t been initialized.\',\r\n        // .git directory already contains objects\r\n        CLONE_GIT_DIR_IN_USE: 4,\r\n        CLONE_GIT_DIR_IN_USE_MSG: \'The target directory contains a .git directory already in use.\',\r\n        // No branch found with the name given\r\n        REMOTE_BRANCH_NOT_FOUND: 5,\r\n        REMOTE_BRANCH_NOT_FOUND_MSG: \'Can\\\'t find the branch name in the remote repository\',\r\n\r\n        // only supports fast forward merging at the moment.\r\n        PULL_NON_FAST_FORWARD: 6,\r\n        PULL_NON_FAST_FORWARD_MSG: \'Pulling from the remote repo requires a merge.\',\r\n        // Branch is up to date\r\n        PULL_UP_TO_DATE: 7,\r\n        PULL_UP_TO_DATE_MSG: \'Everything is up to date\',\r\n\r\n\r\n        UNCOMMITTED_CHANGES: 11,\r\n        UNCOMMITTED_CHANGES_MSG: \'There are changes in the working directory that haven\\\'t been committed\',\r\n\r\n        // Nothing to commit\r\n        COMMIT_NO_CHANGES: 8,\r\n        COMMIT_NO_CHANGES_MSG: \'No changes to commit\',\r\n\r\n        // The remote repo and the local repo share the same head.\r\n        PUSH_NO_CHANGES: 9,\r\n        PUSH_NO_CHANGES_MSG: \'No new commits to push to the repository\',\r\n\r\n        PUSH_NO_REMOTE: 16,\r\n        PUSH_NO_REMOTE_MSG: \'No remote to push to\',\r\n\r\n        // Need to merge remote changes first. \r\n        PUSH_NON_FAST_FORWARD: 10,\r\n        PUSH_NON_FAST_FORWARD_MSG: \'The remote repo has new commits on your current branch. You need to merge them first.\',\r\n\r\n        BRANCH_ALREADY_EXISTS: 14,\r\n        BRANCH_ALREADY_EXISTS_MSG: \'A local branch with that name already exists\',\r\n\r\n        BRANCH_NAME_NOT_VALID: 12,\r\n        BRANCH_NAME_NOT_VALID_MSG: \'The branch name is not valid.\',\r\n\r\n        CHECKOUT_BRANCH_NO_EXISTS: 15,\r\n        CHECKOUT_BRANCH_NO_EXISTS_MSG: \'No local branch with that name exists\',\r\n\r\n        // unexpected problem retrieving objects\r\n        OBJECT_STORE_CORRUPTED: 200,\r\n        OBJECT_STORE_CORRUPTED_MSG: \'Git object store may be corrupted\',\r\n\r\n        HTTP_AUTH_ERROR: 201,\r\n        HTTP_AUTH_ERROR_MSG: \'Http authentication failed\',\r\n\r\n        UNPACK_ERROR: 202,\r\n        UNPACK_ERROR_MSG: \'The remote git server wasn\\\'t able to understand the push request.\',\r\n\r\n        \r\n        fileErrorFunc : function(onError){\r\n            if (!onError){\r\n                return function(){};\r\n            }\r\n            return function(e) {\r\n                var msg = errors.getFileErrorMsg(e);\r\n                onError({type : errors.FILE_IO_ERROR, msg: msg, fe: e.name});\r\n            }\r\n        },\r\n\r\n        ajaxErrorFunc : function(onError){\r\n            return function(xhr){\r\n                var url = this.url,\r\n                    reqType = this.type;\r\n\r\n                var httpErr;\r\n                if (xhr.status == 401){\r\n                    var auth = xhr.getResponseHeader(\'WWW-Authenticate\');\r\n                    httpErr = {type: errors.HTTP_AUTH_ERROR, msg: errors.HTTP_AUTH_ERROR_MSG, auth: auth};\r\n                }\r\n                else{\r\n                    httpErr = {type: errors.AJAX_ERROR, url: url, reqType: reqType, statusText: xhr.statusText, status: xhr.status, msg: "Http error with status code: " + xhr.status + \' and status text: "\' + xhr.statusText + \'"\'};\r\n                }\r\n                onError(httpErr);  \r\n            }\r\n        },\r\n\r\n        getFileErrorMsg: function(e) {\r\n            var msg = \'\';\r\n\r\n            switch (e.name) {\r\n                case "QuotaExceededError":\r\n                    msg = \'QUOTA_EXCEEDED_ERR\';\r\n                    break;\r\n                case "NotFoundError":\r\n                    msg = \'NOT_FOUND_ERR\';\r\n                    break;\r\n                case "SecurityError":\r\n                    msg = \'SECURITY_ERR\';\r\n                    break;\r\n                case "InvalidModificationError":\r\n                    msg = \'INVALID_MODIFICATION_ERR\';\r\n                    break;\r\n                case "InvalidStateError":\r\n                    msg = \'INVALID_STATE_ERR\';\r\n                    break;\r\n                case "AbortError":\r\n                    msg = \'ABORT_ERR\';\r\n                    break;\r\n                case "EncodingError":\r\n                    msg = \'ENCODING_ERR\';\r\n                    break;\r\n                case "NotReadableError":\r\n                    msg = \'NOT_READABLE_ERR\';\r\n                    break;\r\n                case "NoModificationAllowedError":\r\n                    msg = \'NO_MODIFICATION_ALLOWED_ERR\';\r\n                    break;\r\n                case "PathExistsError":\r\n                    msg = \'PATH_EXISTS_ERR\';\r\n                    break;\r\n                case "SyntaxError":\r\n                    msg = \'SYNTAX_ERR\';\r\n                    break;\r\n                case "TypeMismatchError":\r\n                    msg = \'TYPE_MISMATCH_ERR\';\r\n                    break;\r\n                default:\r\n                    msg = \'Unknown Error \' + e.name;\r\n                    break;\r\n            };\r\n        },\r\n        errorHandler: function(e) {\r\n            msg = utils.getFileErrorMsg(e);\r\n            console.log(\'Error: \' + msg);\r\n        }\r\n    }\r\n    return errors;\r\n\r\n});\ndefine(\'utils/progress_chunker\',[],function(){\r\n\r\n    var ProgressChunker = function(func){\r\n        this.master = func;\r\n    }\r\n\r\n    ProgressChunker.prototype = {\r\n        getChunk : function(start, fraction){\r\n            var self = this;\r\n            return function(data){\r\n                var newPct = start + (data.pct * fraction)\r\n                self.master({pct: newPct, msg: data.msg});\r\n            }\r\n        }\r\n    }\r\n\r\n    return ProgressChunker;\r\n\r\n});\ndefine(\'formats/smart_http_remote\',[\'formats/upload_pack_parser\', \'utils/errors\', \'utils/progress_chunker\'], function(UploadPackParser, errutils, ProgressChunker) {\r\n    // var workerBlob = new Blob([packWorkerText]);\r\n    // var workerUrl = URL.createObjectURL(workerBlob);\r\n\r\n    var SmartHttpRemote = function(store, name, repoUrl, username, password, error) {\r\n        this.store = store;\r\n        this.name = name;\r\n        this.refs = {};\r\n        this.url = repoUrl.replace(/\\?.*/, "").replace(/\\/$/, "");\r\n        username = username || "";\r\n        password = password || "";\r\n\r\n        var ajaxErrorHandler = errutils.ajaxErrorFunc(error);\r\n\r\n        var parseDiscovery = function(data) {\r\n            var lines = data.split("\\n")\r\n            var result = {\r\n                "refs": []\r\n            }\r\n            for (i = 1; i < lines.length - 1; i++) {\r\n                var thisLine = lines[i]\r\n                if (i == 1) {\r\n                    var bits = thisLine.split("\\0")\r\n                    result["capabilities"] = bits[1]\r\n                    var bits2 = bits[0].split(" ")\r\n                    result["refs"].push({\r\n                        name: bits2[1],\r\n                        sha: bits2[0].substring(8)\r\n                    })\r\n                } else {\r\n                    var bits2 = thisLine.split(" ")\r\n                    result["refs"].push({\r\n                        name: bits2[1],\r\n                        sha: bits2[0].substring(4)\r\n                    })\r\n                }\r\n            }\r\n            return result\r\n        }\r\n\r\n        var padWithZeros = function(num) {\r\n            var hex = num.toString(16);\r\n            var pad = 4 - hex.length;\r\n            for (var x = 0; x < pad; x++) {\r\n                hex = \'0\' + hex;\r\n            }\r\n            return hex;\r\n        }\r\n\r\n        var pushRequest = function(refPaths, packData) {\r\n            \r\n\r\n            var pktLine = function(refPath) {\r\n                return refPath.sha + \' \' + refPath.head + \' \' + refPath.name;\r\n            }\r\n            var bb = []; //new BlobBuilder();\r\n            var str = pktLine(refPaths[0]) + \'\\0report-status\\n\';\r\n            str = padWithZeros(str.length + 4) + str;\r\n            bb.push(str);\r\n            for (var i = 1; i < refPaths.length; i++) {\r\n                if (!refPaths[i].head) continue;\r\n                var val = pktLine(refPaths[i]) + \'\\n\';\r\n                val = padWithZeros(val.length + 4)\r\n                bb.push(val);\r\n            }\r\n            bb.push(\'0000\');\r\n            bb.push(new Uint8Array(packData));\r\n            var blob = new Blob(bb);\r\n            return blob;\r\n\r\n        }\r\n\r\n        var refWantRequest = function(wantRefs, haveRefs, shallow, depth, moreHaves) {\r\n            var str = "0067want " + wantRefs[0].sha + " multi_ack_detailed side-band-64k thin-pack ofs-delta\\n"\r\n            for (var i = 1; i < wantRefs.length; i++) {\r\n                str += "0032want " + wantRefs[i].sha + "\\n"\r\n            }\r\n            if (haveRefs && haveRefs.length) {\r\n                if (shallow){\r\n                    str += "0034shallow " + shallow;\r\n                }\r\n                str += "0000"\r\n                _(haveRefs).each(function(haveRef) {\r\n                    str += "0032have " + haveRef.sha + "\\n"\r\n                });\r\n                if (moreHaves) {\r\n                    str += "0000"\r\n                } else {\r\n                    str += "0009done\\n"\r\n                }\r\n\r\n            } else {\r\n                if (depth){\r\n                    var depthStr = "deepen " + depth;\r\n                    str += (padWithZeros(depthStr.length + 4) + depthStr);\r\n                }\r\n                str += "0000"\r\n                str += "0009done\\n"\r\n            }\r\n            return str\r\n        }\r\n\r\n        var queryParams = function(uri) {\r\n            var paramString = uri.split("?")[1]\r\n            if (!paramString) {\r\n                return {}\r\n            }\r\n\r\n            var paramStrings = paramString.split("&")\r\n            var params = {}\r\n            _(paramStrings).each(function(paramString) {\r\n                var pair = paramString.split("=")\r\n                params[pair[0]] = decodeURI(pair[1])\r\n            })\r\n            return params\r\n        }\r\n\r\n        this.urlOptions = queryParams(repoUrl);\r\n\r\n        function doGet(url, success){\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.open("GET", url, true, username, password);\r\n\r\n            xhr.onload = function(evt){\r\n                if (xhr.readyState == 4) {\r\n                    if (xhr.status == 200) {\r\n                        success(xhr.responseText);\r\n                    } \r\n                    else{ \r\n                        var obj = {url: url, type: \'GET\'};\r\n                        ajaxErrorHandler.call(obj, xhr); \r\n                    }\r\n                }\r\n            }\r\n            \r\n\r\n            var xhr2ErrorShim = function(){\r\n                var obj = {url: url, type: \'POST\'};\r\n                ajaxErrorHandler.call(obj, xhr); \r\n            }\r\n            xhr.onerror = xhr2ErrorShim;\r\n            xhr.onabort = xhr2ErrorShim;\r\n            xhr.send();\r\n        }\r\n        this.fetchRefs = function(callback) {\r\n            var remote = this,\r\n                uri = this.makeUri(\'/info/refs\', {service: "git-upload-pack"});\r\n            doGet(uri, function(data) {\r\n                var discInfo = parseDiscovery(data)\r\n                var i, ref\r\n                for (i = 0; i < discInfo.refs.length; i++) {\r\n                    ref = discInfo.refs[i]\r\n                    remote.addRef(ref.name, ref.sha)\r\n                }\r\n                if (callback != "undefined") {\r\n                    callback(discInfo.refs)\r\n                }\r\n            });\r\n        }\r\n\r\n        this.fetchReceiveRefs = function(callback) {\r\n            var remote = this,\r\n                uri = this.makeUri(\'/info/refs\', {service: "git-receive-pack"});\r\n            doGet(uri, function(data) {\r\n                var discInfo = parseDiscovery(data)\r\n                var i, ref\r\n                for (i = 0; i < discInfo.refs.length; i++) {\r\n                    ref = discInfo.refs[i]\r\n                    remote.addRef(ref.name, ref.sha)\r\n                }\r\n                if (callback != "undefined") {\r\n                    callback(discInfo.refs)\r\n                }\r\n            });\r\n        }\r\n\r\n        this.fetchRef = function(wantRefs, haveRefs, shallow, depth, moreHaves, callback, noCommon, progress) {\r\n            var url = this.makeUri(\'/git-upload-pack\')\r\n            var body = refWantRequest(wantRefs, haveRefs, shallow, depth);\r\n            var thisRemote = this\r\n            var xhr = new XMLHttpRequest();\r\n\r\n            var packProgress, receiveProgress;\r\n            if (progress){\r\n                var chunker = new ProgressChunker(progress);\r\n                receiveProgress = chunker.getChunk(0, 0.2);\r\n                packProgress = chunker.getChunk(20, 0.8);\r\n            }\r\n\r\n            xhr.open("POST", url, true, username, password);\r\n            xhr.responseType = \'arraybuffer\';\r\n            xhr.setRequestHeader("Content-Type", "application/x-git-upload-pack-request");\r\n\r\n            xhr.onload = function() {\r\n\r\n                var binaryData = xhr.response;\r\n                if (haveRefs && String.fromCharCode.apply(null, new Uint8Array(binaryData, 4, 3)) == "NAK") {\r\n                    if (moreHaves) {\r\n                        thisRemote.store._getCommitGraph(moreHaves, 32, function(commits, next) {\r\n                            thisRemote.fetchRef(wantRefs, commits, depth, next, callback, noCommon);\r\n                        });\r\n                    }\r\n                    else if (noCommon){\r\n                        noCommon();\r\n                    }\r\n                } else {\r\n                    if (packProgress){\r\n                        packProgress({pct: 0, msg: "Parsing pack data"});\r\n                    }\r\n                    UploadPackParser.parse(binaryData, store, function(objects, packData, common, shallow) {\r\n                        if (callback) {\r\n                            callback(objects, packData, common, shallow);\r\n                        }\r\n                    }, packProgress);\r\n                    // var packWorker = new Worker(workerUrl);\r\n                    // packWorker.onmessage = function(evt){\r\n                    //     var msg = evt.data;\r\n                    //     if (msg.type == GitLiteWorkerMessages.FINISHED && callback){\r\n                    //         packWorker.terminate();\r\n                    //         callback(msg.objects, new Uint8Array(msg.data), msg.common);\r\n                    //     }\r\n                    //     else if (msg.type == GitLiteWorkerMessages.RETRIEVE_OBJECT){\r\n                    //         store._retrieveRawObject(msg.sha, "ArrayBuffer", function(baseObject){\r\n                    //             packWorker.postMessage({type: GitLiteWorkerMessages.OBJECT_RETRIEVED, id: msg.id, object: baseObject}, [baseObject.data]);\r\n                    //             var x = 0;\r\n                    //         });\r\n                    //     }\r\n                    //     else if (progress && msg.type == GitLiteWorkerMessages.PROGRESS){\r\n                    //         progress(msg);\r\n                    //     }\r\n                    // }\r\n                    // packWorker.postMessage({type: GitLiteWorkerMessages.START, data:binaryData}, [binaryData]);\r\n                }\r\n            }\r\n            if (receiveProgress){\r\n                xhr.onprogress = function(evt){\r\n                    // if (evt.lengthComputable){\r\n                    //     var pct = evt.loaded / evt.total;\r\n                    //     receiveProgress({pct: pct, msg: "Received " + evt.loaded + "/" + evt.total + " bytes"});\r\n                    // }\r\n                    // else{\r\n\r\n                        receiveProgress({pct: 100, msg: "Received " + (evt.loaded/1048576).toFixed(2) + " MB"});\r\n                    // }\r\n                }\r\n            }\r\n            var xhr2ErrorShim = function(){\r\n                var obj = {url: url, type: \'POST\'};\r\n                ajaxErrorHandler.call(obj, xhr); \r\n            }\r\n\r\n            xhr.onerror = xhr2ErrorShim;\r\n            xhr.onabort = xhr2ErrorShim;\r\n\r\n            xhr.send(body);\r\n\r\n            //  $.ajax({\r\n            //    url: url,\r\n            //    data: body,\r\n            //    type: "POST",\r\n            //    contentType: "application/x-git-upload-pack-request",\r\n            //    beforeSend: function(xhr) {\r\n            //      xhr.overrideMimeType(\'text/plain; charset=x-user-defined\')\r\n            //    },\r\n            //    success: function(data, textStatus, xhr) {\r\n            //      var binaryData = xhr.responseText\r\n            //      if (haveRefs && binaryData.indexOf("NAK") == 4){\r\n            //      \tif (moreHaves){\r\n            // \tthisRemote.repo._getCommitGraph(moreHaves, 32, function(commits, next){\r\n            // \t\tthisRemote.fetchRef(wantRefs, commits, next, callback);\r\n            // \t});\r\n            // }\r\n            //      }\r\n            //      else{\r\n            // var parser = new Git.UploadPackParser(binaryData, repo)\r\n            // parser.parse(function(objects, packData, common){\r\n            // \tif (callback != "undefined") {\r\n            // \t  callback(objects, packData, common);\r\n            // \t}\r\n            // });\r\n            // }        \r\n            //    },\r\n            //    error: function(xhr, data, e) {\r\n            //      Git.displayError("ERROR Status: " + xhr.status + ", response: " + xhr.responseText)\r\n            //    }\r\n            //  });\r\n        },\r\n\r\n        this.pushRefs = function(refPaths, packData, success, progress) {\r\n            var url = this.makeUri(\'/git-receive-pack\');\r\n            var body = pushRequest(refPaths, packData);\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.open("POST", url, true, username, password);\r\n            xhr.onload = function(evt) {\r\n                if (xhr.readyState == 4) {\r\n                    if (xhr.status == 200) {\r\n                        var msg = xhr.response;\r\n                        if (msg.indexOf(\'000eunpack ok\') == 0){\r\n                            success();\r\n                        }\r\n                        else{\r\n                            error({type: errutils.UNPACK_ERROR, msg: errutils.UNPACK_ERROR_MSG});\r\n                        }\r\n                    } \r\n                    else{ \r\n                        var obj = {url: url, type: \'POST\'};\r\n                        ajaxErrorHandler.call(obj, xhr); \r\n                    }\r\n                }\r\n            }\r\n            xhr.setRequestHeader(\'Content-Type\', \'application/x-git-receive-pack-request\');\r\n            var bodySize = (body.size/1024).toFixed(2);\r\n            xhr.upload.onprogress = function(evt){\r\n                progress({pct: evt.loaded/body.size * 100, msg: \'Sending \' + (evt.loaded/1024).toFixed(2) + \'/\' + bodySize + " KB"});\r\n            }\r\n            xhr.send(body);\r\n            /*Gito.FileUtils.readBlob(body, \'BinaryString\', function(strData){\r\n    \t\t$.ajax({\r\n    \t\t\turl : url,\r\n    \t\t\tdata : strData,\r\n    \t\t\ttype : \'POST\',\r\n    \t\t\tcontentType : \'application/x-git-receive-pack-request\',\r\n    \t\t\tprocessData : false,\r\n    \t\t\t//mimeType :\'text/plain; charset=x-user-defined\',\r\n  \t\t  \tsuccess : function(data, textstatus, xhr){\r\n  \t\t  \t\tvar x = 0;\r\n  \t\t  \t},\r\n  \t\t  \terror : function (xhr, data, e){\r\n  \t\t  \t\tGit.displayError("ERROR Status: " + xhr.status + ", response: " + xhr.responseText)\r\n  \t\t  \t}\r\n    \t\t});\r\n    \t});*/\r\n        }\r\n\r\n        this.makeUri = function(path, extraOptions) {\r\n            var uri = this.url + path\r\n            var options = _(this.urlOptions).extend(extraOptions || {})\r\n            if (options && _(options).size() > 0) {\r\n                var optionKeys = _(options).keys()\r\n                var optionPairs = _(optionKeys).map(function(optionName) {\r\n                    return optionName + "=" + encodeURI(options[optionName])\r\n                })\r\n\r\n                return uri + "?" + optionPairs.join("&")\r\n            } else {\r\n                return uri\r\n            }\r\n        }\r\n\r\n        // Add a ref to this remote. fullName is of the form:\r\n        //   refs/heads/master or refs/tags/123\r\n        this.addRef = function(fullName, sha) {\r\n            var type, name\r\n            if (fullName.slice(0, 5) == "refs/") {\r\n                type = fullName.split("/")[1]\r\n                name = this.name + "/" + fullName.split("/")[2]\r\n            } else {\r\n                type = "HEAD"\r\n                name = this.name + "/" + "HEAD"\r\n            }\r\n            this.refs[name] = {\r\n                name: name,\r\n                sha: sha,\r\n                remote: this,\r\n                type: type\r\n            }\r\n        }\r\n\r\n        this.getRefs = function() {\r\n            return _(this.refs).values()\r\n        }\r\n\r\n        this.getRef = function(name) {\r\n            return this.refs[this.name + "/" + name]\r\n        }\r\n    }\r\n    return SmartHttpRemote;\r\n});\n\r\ndefine(\'formats/pack_index\',[],function(){\r\n    // This object partially parses the data contained in a pack-*.idx file, and provides\r\n    // access to the offsets of the objects the packfile and the crc checksums of the objects.\r\n    PackIndex = function(buf) {\r\n    \tvar data = new DataView(buf);\r\n    \tthis.data = data;\r\n    \t// load the index into memory\r\n    \tvar magicNum = data.getUint32(0, false);\r\n    \tvar versionNum = data.getUint32(4, false);\r\n    \t\r\n    \tif (magicNum != 0xff744f63 || versionNum != 2){\r\n    \t\tthrow(Error("Bad pack index header. Only version 2 is supported"))\r\n    \t}\r\n    \t\r\n    \tvar byteOffset = 8\r\n    \t//this.fanOffset = byteOffset;\r\n    \t\r\n    \tvar numObjects = data.getUint32(byteOffset + (255 * 4), false);\r\n    \t\r\n    \t// skip past fanout table\r\n    \tvar fanTableLen = 256 * 4;\r\n    \tbyteOffset += fanTableLen; \r\n    \tvar shaTableLen = numObjects * 20;\r\n    \tthis.shaList = new Uint8Array(buf, byteOffset, shaTableLen);\r\n    \t\r\n    \t// skip past shas and the CRC vals\r\n    \tbyteOffset += shaTableLen + (numObjects * 4);\r\n    \t\r\n    \tthis.offsetsOffset = byteOffset;\r\n    \tthis.numObjects = numObjects;\r\n    }\r\n\r\n    PackIndex.prototype = {\r\n    \t_compareShas : function(sha1, sha2){\r\n    \t\t // assume the first byte has been matched in the fan out table\r\n    \t\tfor (var i = 1; i < 20; i++){\r\n    \t\t\tif (sha1[i] != sha2[i]){\r\n    \t\t\t\treturn sha1[i] - sha2[i];\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\treturn 0;\r\n    \t},\r\n    \t_getShaAtIndex : function(index){\r\n    \t    var byteOffset = index * 20;\r\n    \t    return this.shaList.subarray(byteOffset, byteOffset + 20); \r\n    \t},\r\n    \tgetObjectOffset : function(sha){\r\n    \t\tvar fanIndex = sha[0];\r\n    \t\t\r\n    \t\tvar sliceStart = fanIndex > 0 ? (this.data.getUint32(8 + ((fanIndex - 1) * 4), false)) : 0;\r\n    \t\tvar sliceEnd = this.data.getUint32(8 + (fanIndex * 4), false);\r\n    \t\t\r\n    \t\tif (sliceEnd - sliceStart == 0){\r\n    \t\t\treturn -1;\r\n    \t\t}\r\n    \t\t\r\n    \t\tvar index;\r\n    \t\twhile (sliceEnd - sliceStart  > 1){\r\n    \t\t\tvar split = sliceStart + Math.floor(((sliceEnd - sliceStart)/2));\r\n    \t\t\t\r\n    \t\t\tvar mid = this._getShaAtIndex(split);\r\n    \t\t\t\r\n    \t\t\tvar compare = this._compareShas(sha, mid);\r\n    \t\t\tif (compare == 0){\r\n    \t\t\t\tindex = split;\r\n    \t\t\t\tbreak;\r\n    \t\t\t}\r\n    \t\t\telse if (compare < 0){\r\n    \t\t\t\tsliceEnd = split;\r\n    \t\t\t}\r\n    \t\t\telse{\r\n    \t\t\t\tsliceStart = split + 1;\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\t// if we\'ve exited the loop without a match, sliceStart should hold the index or it\'s not here. \r\n    \t\tif (!index){\r\n    \t\t\tif (sliceStart < this.numObjects && this._compareShas(sha, this._getShaAtIndex(sliceStart)) == 0){\r\n    \t\t\t\tindex = sliceStart;\r\n    \t\t\t}\r\n    \t\t\telse{\r\n    \t\t\t\treturn -1;\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\t\r\n    \t\tvar objOffset = this.data.getUint32(this.offsetsOffset + (index * 4), false); \r\n    \t\treturn objOffset;\r\n    \t\t\r\n    \t}\r\n    }\r\n    /*\r\n    * = Version 2 pack-*.idx files support packs larger than 4 GiB, and\r\n    *  have some other reorganizations.  They have the format:\r\n    *\r\n    *  - A 4-byte magic number \'\\377tOc\' which is an unreasonable\r\n    *    fanout[0] value.\r\n    *\r\n    *  - A 4-byte version number (= 2)\r\n    *\r\n    *  - A 256-entry fan-out table just like v1.\r\n    *\r\n    *  - A table of sorted 20-byte SHA1 object names.  These are\r\n    *    packed together without offset values to reduce the cache\r\n    *    footprint of the binary search for a specific object name.\r\n    *\r\n    *  - A table of 4-byte CRC32 values of the packed object data.\r\n    *    This is new in v2 so compressed data can be copied directly\r\n    *    from pack to pack during repacking without undetected\r\n    *    data corruption.\r\n    *\r\n    *  - A table of 4-byte offset values (in network byte order).\r\n    *    These are usually 31-bit pack file offsets, but large\r\n    *    offsets are encoded as an index into the next table with\r\n    *    the msbit set.\r\n    *\r\n    *  - A table of 8-byte offset entries (empty for pack files less\r\n    *    than 2 GiB).  Pack files are organized with heavily used\r\n    *    objects toward the front, so most object references should\r\n    *    not need to refer to this table.\r\n    *\r\n    *  - The same trailer as a v1 pack file:\r\n    *\r\n    *    A copy of the 20-byte SHA1 checksum at the end of\r\n    *    corresponding packfile.\r\n    *\r\n    *    20-byte SHA1-checksum of all of the above.\r\n    */\r\n    PackIndex.writePackIdx = function(objects, packSha){\r\n    \tvar size = 4 + 4 + (256 * 4) + (objects.length * 20) + (objects.length * 4)  + (objects.length * 4) + (20 * 2);\r\n    \tvar buf = new ArrayBuffer(size);\r\n    \t\r\n    \tobjects.sort(function(obj1, obj2){\r\n    \t\tfor (var i = 0; i < 20; i++){\r\n    \t\t\tif (obj1.sha[i] != obj2.sha[i]){\r\n    \t\t\t\treturn obj1.sha[i] - obj2.sha[i];\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\treturn 0; // shouldn\'t happen but just in case\r\n    \t});\r\n    \t\r\n        var data = new DataView(buf);\r\n        \r\n        // magic number\r\n        data.setUint32(0, 0xff744f63, false);\r\n        \r\n        //version number\r\n        data.setUint32(4, 2, false);\r\n        \r\n        // fan table\r\n        var byteOffset = 8, current = 0;\r\n     \r\n        for (var i = 0; i < objects.length; i++){\r\n        \tvar next = objects[i].sha[0];\r\n        \tif (next != current){\r\n        \t\t\r\n        \t\tfor (var j = current; j < next; j++){\r\n        \t\t\tdata.setUint32(byteOffset + (j * 4), i, false);\r\n        \t\t}\r\n        \t}\r\n        \tcurrent = next;\r\n        }\r\n        for (var j = current; j < 256; j++){\r\n    \t\tdata.setUint32(byteOffset + (j * 4), objects.length, false);\r\n    \t}\r\n        \r\n        // list of shas\r\n        byteOffset += (256 * 4);\r\n        \r\n        for (var i = 0; i < objects.length; i++){\r\n        \tfor (var j = 0; j < 20; j++){\r\n        \t\tdata.setUint8(byteOffset++, objects[i].sha[j]);\r\n        \t}\r\n        }\r\n        \r\n        // list of crcs\r\n        for (var i = 0; i < objects.length; i++){\r\n        \tdata.setUint32(byteOffset, objects[i].crc, false);\r\n        \tbyteOffset += 4;\r\n        }\r\n        \r\n        // list of offsets. Note that I\'m not going to bother with large offsets. You shouldn\'t be loading a packfile >2GB inside a web browser anyway.\r\n        for (var i = 0; i < objects.length; i++){\r\n        \tdata.setUint32(byteOffset, objects[i].offset, false);\r\n        \tbyteOffset += 4;\r\n        }\r\n        \r\n        // the pack file sha\r\n        for (var i = 0; i < 20; i++){\r\n        \tdata.setUint8(byteOffset++, packSha[i]);\r\n        }\r\n        \r\n        // sha for all of the above\r\n        var indexSha = Crypto.SHA1(new Uint8Array(buf, 0, byteOffset), {asBytes:true});\r\n        for (var i = 0; i < 20; i++){\r\n        \tdata.setUint8(byteOffset++, indexSha[i]);\r\n        }\r\n        return buf;\r\n    }\r\n      \r\n    return PackIndex;\r\n});\r\n\r\n\ndefine(\'commands/clone\',[\'commands/object2file\', \'formats/smart_http_remote\', \'formats/pack_index\', \'formats/pack\', \'utils/file_utils\', \'utils/errors\', \'utils/progress_chunker\'], function(object2file, SmartHttpRemote, PackIndex, Pack, fileutils, errutils, ProgressChunker){\r\n    \r\n    var _createCurrentTreeFromPack = function(dir, store, headSha, callback){\r\n         store._retrieveObject(headSha, "Commit", function(commit){\r\n            var treeSha = commit.tree;\r\n            object2file.expandTree(dir, store, treeSha, callback);\r\n         });\r\n    }\r\n    \r\n    var checkDirectory = function(dir, store, success, error, ferror){\r\n        fileutils.ls(dir, function(entries){\r\n            \r\n            if (entries.length == 0){\r\n                error({type: errutils.CLONE_DIR_NOT_INTIALIZED, msg: errutils.CLONE_DIR_NOT_INTIALIZED_MSG});\r\n            }\r\n            else if (entries.length != 1 || entries[0].isFile || entries[0].name != \'.git\'){\r\n                error({type: errutils.CLONE_DIR_NOT_EMPTY, msg: errutils.CLONE_DIR_NOT_EMPTY_MSG});\r\n            }\r\n            else{\r\n                fileutils.ls(store.objectsDir, function(entries){\r\n                    if (entries.length > 1){\r\n                        error({type: errutils.CLONE_GIT_DIR_IN_USE, msg: errutils.CLONE_GIT_DIR_IN_USE_MSG});\r\n                    }\r\n                    else if (entries.length == 1){\r\n                        if (entries[0].name == "pack"){\r\n                            store.objectsDir.getDirectory(\'pack\', {create: false}, function(packDir){\r\n                                fileutils.ls(packDir, function(entries){\r\n                                    if (entries.length > 0){\r\n                                        error({type: errutils.CLONE_GIT_DIR_IN_USE, msg: errutils.CLONE_GIT_DIR_IN_USE_MSG});\r\n                                    }\r\n                                    else{\r\n                                        success();\r\n                                    }\r\n                                }, ferror);\r\n                            }, success);\r\n                        }\r\n                        else{\r\n                            error({type: errutils.CLONE_GIT_DIR_IN_USE, msg: errutils.CLONE_GIT_DIR_IN_USE_MSG});\r\n                        }\r\n                    }\r\n                    else{\r\n                        success();\r\n                    }\r\n                }, ferror);\r\n            }\r\n\r\n        }, ferror);\r\n    };\r\n\r\n    var clone = function(options, success, error){\r\n        \r\n        var dir = options.dir,\r\n            store = options.objectStore,\r\n            url = options.url,\r\n            callback = success,\r\n            depth = options.depth,\r\n            branch = options.branch || \'master\',\r\n            progress = options.progress || function(){},\r\n            username = options.username,\r\n            password = options.password,\r\n            ferror = errutils.fileErrorFunc(error);\r\n    \r\n        var chunker = new ProgressChunker(progress);\r\n        var packProgress = chunker.getChunk(0, .95);\r\n\r\n        var mkdirs = fileutils.mkdirs,\r\n            mkfile = fileutils.mkfile,\r\n            remote = new SmartHttpRemote(store, "origin", url, username, password, error);\r\n\r\n        var createInitialConfig = function(shallow, localHeadRef, callback){\r\n            var config = {url: url, time: new Date()};\r\n            if (options.depth && shallow){\r\n                config.shallow = shallow;\r\n            }\r\n            config.remoteHeads = {};\r\n            \r\n            if (localHeadRef)\r\n                config.remoteHeads[localHeadRef.name] = localHeadRef.sha;\r\n\r\n            store.setConfig(config, callback);  \r\n        }\r\n\r\n        checkDirectory(dir, store, function(){ \r\n            mkdirs(dir, ".git", function(gitDir){\r\n                remote.fetchRefs(function(refs){\r\n                    \r\n                    if (!refs.length){\r\n                        createInitialConfig(null, null, success);\r\n                        return;\r\n                    }\r\n\r\n                    var remoteHead, remoteHeadRef, localHeadRef;\r\n\r\n                    _(refs).each(function(ref){\r\n                        if (ref.name == "HEAD"){\r\n                            remoteHead = ref.sha;\r\n                        }\r\n                        else if (ref.name == "refs/heads/" + branch){\r\n                            localHeadRef = ref;\r\n                        }\r\n                        else if (ref.name.indexOf("refs/heads/") == 0){\r\n                            if (ref.sha == remoteHead){\r\n                                remoteHeadRef = ref;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    if (!localHeadRef){\r\n                        if (options.branch){\r\n                            error({type: errutils.REMOTE_BRANCH_NOT_FOUND, msg: errutils.REMOTE_BRANCH_NOT_FOUND_MSG});\r\n                            return;\r\n                        }\r\n                        else{\r\n                            localHeadRef = remoteHeadRef;\r\n                        }\r\n                    }\r\n\r\n                    mkfile(gitDir, "HEAD", \'ref: \' + localHeadRef.name + \'\\n\', function(){\r\n                        mkfile(gitDir, localHeadRef.name, localHeadRef.sha + \'\\n\', function(){\r\n                            remote.fetchRef([localHeadRef], null, null, depth, null, function(objects, packData, common, shallow){\r\n                                var packSha = packData.subarray(packData.length - 20);\r\n                                \r\n                                var packIdxData = PackIndex.writePackIdx(objects, packSha);\r\n                                \r\n                                // get a view of the sorted shas\r\n                                var sortedShas = new Uint8Array(packIdxData, 4 + 4 + (256 * 4), objects.length * 20);\r\n                                packNameSha = Crypto.SHA1(sortedShas);\r\n                                \r\n                                var packName = \'pack-\' + packNameSha;\r\n                                mkdirs(gitDir, \'objects\', function(objectsDir){\r\n                                    mkfile(objectsDir, \'pack/\' + packName + \'.pack\', packData.buffer);\r\n                                    mkfile(objectsDir, \'pack/\' + packName + \'.idx\', packIdxData);\r\n                                    \r\n                                    var packIdx = new PackIndex(packIdxData);\r\n                                    store.loadWith(objectsDir, [{pack: new Pack(packData, self), idx: packIdx}]);\r\n                                    progress({pct: 95, msg: "Building file tree from pack. Be patient..."});\r\n                                    _createCurrentTreeFromPack(dir, store, localHeadRef.sha, function(){\r\n                                        createInitialConfig(shallow, localHeadRef, callback);\r\n                                    });\r\n                                }, ferror); \r\n                            }, null, packProgress);\r\n                        }, ferror);\r\n                    }, ferror);\r\n                });\r\n            }, ferror);\r\n        }, error, ferror);\r\n    }\r\n    return clone;\r\n});\ndefine(\'commands/commit\',[\'utils/file_utils\', \'utils/misc_utils\', \'utils/errors\'], function (fileutils, miscutils, errutils) {\r\n\r\n    var walkFiles = function(dir, store, success){\r\n               \r\n        fileutils.ls(dir, function(entries){\r\n            if (!entries.length){\r\n                success();\r\n                return;\r\n            }\r\n\r\n            var treeEntries = [];\r\n            entries.asyncEach(function(entry, done){\r\n                if (entry.name == \'.git\'){\r\n                    done();\r\n                    return;\r\n                }\r\n                if (entry.isDirectory){\r\n                    walkFiles(entry, store, function(sha){\r\n                        if (sha){\r\n                            treeEntries.push({name: /*\'40000 \' + */entry.name, sha: miscutils.convertShaToBytes(sha), isBlob: false});\r\n                        }\r\n                        done();\r\n                    });\r\n                    \r\n                }\r\n                else{\r\n                    entry.file(function(file){\r\n                        var reader = new FileReader();\r\n                        reader.onloadend = function(){\r\n                            store.writeRawObject(\'blob\', new Uint8Array(reader.result), function(sha){\r\n                                treeEntries.push({name: /*\'100644 \' + */entry.name, sha: miscutils.convertShaToBytes(sha), isBlob: true});\r\n                                done();\r\n                            });\r\n                        }\r\n                        reader.readAsArrayBuffer(file);\r\n                    });\r\n                }\r\n            },\r\n            function(){\r\n                treeEntries.sort(function(a,b){\r\n                    //http://permalink.gmane.org/gmane.comp.version-control.git/195004\r\n                    var aName = a.isBlob ? a.name : (a.name + \'/\');\r\n                    var bName = b.isBlob ? b.name : (b.name + \'/\');\r\n                    if (aName < bName) return -1;\r\n                    else if (aName > bName) return 1;\r\n                    else\r\n                    return 0;\r\n                });\r\n                store._writeTree(treeEntries, success);\r\n            })\r\n        });       \r\n    }\r\n\r\n    var checkTreeChanged = function(store, parent, sha, success, error){\r\n        if (!parent || !parent.length){\r\n            success();\r\n        }\r\n        else{\r\n            store._retrieveObject(parent, "Commit", function(parentCommit){\r\n                var oldTree = parentCommit.tree;\r\n                if (oldTree == sha){\r\n                    error({type: errutils.COMMIT_NO_CHANGES, msg: errutils.COMMIT_NO_CHANGES_MSG});\r\n                }\r\n                else{\r\n                    success();\r\n                }\r\n            }, function(){\r\n                error({type: errutils.OBJECT_STORE_CORRUPTED, msg: errutils.OBJECT_STORE_CORRUPTED_MSG});  \r\n            })\r\n        }\r\n    }\r\n\r\n    var _createCommitFromWorkingTree =  function(options, parent, ref, success, error){ \r\n\r\n        var dir = options.dir,\r\n            store = options.objectStore,\r\n            username = options.username,\r\n            email = options.email,\r\n            commitMsg = options.commitMsg;\r\n\r\n        walkFiles(dir, store, function(sha){\r\n            checkTreeChanged(store, parent, sha, function(){\r\n                var now = new Date();\r\n                var dateString = Math.floor(now.getTime()/1000);\r\n                var offset = now.getTimezoneOffset()/-60;\r\n                var absOffset = Math.abs(offset);\r\n                var offsetStr = \'\' + (offset < 0 ? \'-\' : \'+\') + (absOffset < 10 ? \'0\' : \'\') + absOffset + \'00\';\r\n                dateString = dateString + \' \' + offsetStr;\r\n                var commitContent = [\'tree \',sha,\'\\n\'];\r\n                if (parent && parent.length){\r\n                    commitContent.push(\'parent \', parent);\r\n                    if (parent.charAt(parent.length - 1) != \'\\n\'){\r\n                        commitContent.push(\'\\n\');\r\n                    }\r\n                }\r\n                    \r\n                commitContent.push(\'author \', username, \' <\',email, \'> \',  dateString,\'\\n\', \r\n                    \'committer \', username,\' <\', email, \'> \', dateString, \'\\n\\n\', commitMsg,\'\\n\');\r\n                store.writeRawObject(\'commit\', commitContent.join(\'\'), function(commitSha){\r\n                    fileutils.mkfile(dir, \'.git/\' + ref, commitSha + \'\\n\', function(){\r\n                        store.updateLastChange(null, function(){\r\n                            success(commitSha);\r\n                        });\r\n                    });\r\n                });\r\n            }, error);\r\n        });\r\n    }\r\n\r\n    var commit = function(options, success, error){\r\n        var rootDir = options.dir,\r\n            objectStore = options.objectStore;\r\n\r\n        var ref;\r\n        var buildCommit = function(parent){\r\n            _createCommitFromWorkingTree(options, parent, ref, success, error);\r\n        }\r\n        objectStore.getHeadRef(function(headRef){\r\n            ref = headRef;\r\n            objectStore._getHeadForRef(ref, buildCommit, function(){ buildCommit(); });\r\n        });\r\n    }\r\n\r\n    return commit;\r\n\r\n});\ndefine(\'commands/init\',[],function(){\r\n    var init = function(options, success, error){\r\n        var objectStore = options.objectStore;\r\n        objectStore.init(success, error);\r\n    }\r\n    return init; \r\n});\ndefine(\'commands/treemerger\',[\'utils/misc_utils\'], function(utils){\r\n\r\n\tvar diffTree = function(oldTree, newTree){\r\n\t\toldTree.sortEntries();\r\n\t\tnewTree.sortEntries();\r\n\t\t\r\n\t\tvar oldEntries = oldTree.entries, \r\n\t\t\tnewEntries = newTree.entries;\r\n\t\tvar oldIdx = newIdx = 0;\r\n\t\t\r\n\t\tvar remove = [],\r\n\t\t\tadd = [], \r\n\t\t\tmerge = [];\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\twhile (true){\r\n\t\t\tvar nu = newEntries[newIdx];\r\n\t\t\tvar old = oldEntries[oldIdx];\r\n\t\t\t\r\n\t\t\tif (!nu){\r\n\t\t\t\tif (!old){\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tremove.push(old);\r\n\t\t\t\toldIdx++;\r\n\t\t\t}\r\n\t\t\telse if (!old){\r\n\t\t\t\tadd.push(nu);\r\n\t\t\t\tnewIdx++;\r\n\t\t\t}\r\n\t\t\telse if (nu.name < old.name){\r\n\t\t\t\tadd.push(nu);\r\n\t\t\t\tnewIdx++;\r\n\t\t\t}\r\n\t\t\telse if (nu.name > old.name){\r\n\t\t\t\tremove.push(old);\r\n\t\t\t\toldIdx++;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif (utils.compareShas(nu.sha,old.sha) != 0){\r\n\t\t\t\t\tmerge.push({nu:nu, old:old});\r\n\t\t\t\t}\r\n\t\t\t\toldIdx++;\r\n\t\t\t\tnewIdx++;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {add:add, remove:remove, merge: merge};\r\n\t};\r\n\t\r\n\t var mergeTrees = function(store, ourTree, baseTree, theirTree, success, error){\r\n\t\t\r\n\t\tvar finalTree = [], \r\n\t\t\tnext = null;\r\n\t\t\tindices = [0,0,0],\r\n\t\t\tconflicts = [];\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t// base tree can be null if we\'re merging a sub tree from ours and theirs with the same name\r\n\t\t// but it didn\'t exist in base. \r\n\t\tif (baseTree == null){\r\n\t\t\tbaseTree = {entries:[], sortEntries: function(){}};\r\n\t\t}\r\n\t\t\r\n\t\tourTree.sortEntries();\r\n\t\ttheirTree.sortEntries();\r\n\t\tbaseTree.sortEntries();\r\n\t\t\r\n\t\tvar allTrees = [ourTree.entries, baseTree.entries, theirTree.entries];\r\n\t\t\r\n\t\twhile (conflicts.length == 0){\r\n\t\t\tnext = null;\r\n\t\t\tvar nextX = 0;\r\n\t\t\tfor (var x = 0; x < allTrees.length; x++){\r\n\t\t\t\tvar treeEntries = allTrees[x];\r\n\t\t\t\tvar top = treeEntries[indices[x]];\r\n\t\t\t\t\r\n\t\t\t\tif (!next || (top && top.name < next.name)){\r\n\t\t\t\t\tnext = top;\r\n\t\t\t\t\tnextX = x;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!next){\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction shasEqual(sha1, sha2){\r\n\t\t\t\tfor (var i = 0; i < sha1.length; i++){\r\n\t\t\t\t\tif (sha1[i] != sha2[i]){\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (nextX){\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tvar theirEntry = allTrees[2][indices[2]];\r\n\t\t\t\t\tvar baseEntry = allTrees[1][indices[1]];\r\n\t\t\t\t\tif (theirEntry.name == next.name){\r\n\t\t\t\t\t\tif (!shasEqual(theirEntry.sha,next.sha)){\r\n\t\t\t\t\t\t\tif (baseEntry.name != next.name){\r\n\t\t\t\t\t\t\t\tbaseEntry = {entries:[]};\r\n\t\t\t\t\t\t\t\tif (next.isBlob){\r\n\t\t\t\t\t\t\t\t\tconflicts.push({conflict:true, ours: next, base: null, theirs: theirEntry});\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (next.isBlob === theirEntry.isBlob && (baseEntry.isBlob === next.isBlob)){\r\n\t\t\t\t\t\t\t\tif (shasEqual(next.sha, baseEntry.sha)){\r\n\t\t\t\t\t\t\t\t\tfinalTree.push(theirEntry);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\t\tfinalTree.push({merge:true, ours: next, base: baseEntry, theirs: theirEntry});\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\tconflicts.push({conflict:true, ours: next, base: baseEntry, theirs: theirEntry});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tfinalTree.push(next);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (baseEntry.name == next.name){\r\n\t\t\t\t\t\tif (!shasEqual(baseEntry.sha, next.sha)){\r\n\t\t\t\t\t\t\t//deleted from theirs but changed in ours. Delete/modify conflict.\r\n\t\t\t\t\t\t\tconflicts.push({conflict:true, ours: next, base: baseEntry, theirs: null});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tfinalTree.push(next);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tvar theirEntry = allTrees[indices[2]];\r\n\t\t\t\t\tif (next.name == theirEntry.name && !shasEqual(next.sha, theirEntry.sha)){\r\n\t\t\t\t\t\t// deleted from ours but changed in theirs. Delete/modify conflict\r\n\t\t\t\t\t\tconflicts.push({conflict: true, ours: null, base: next, theirs: theirEntry}); \r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tfinalTree.push(next);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (var x = 0; x < allTrees.length; x++){\r\n\t\t\t\tvar treeEntries = allTrees[x];\t\r\n\t\t\t\tif (treeEntries[indices[x]].name == next.name){\r\n\t\t\t\t\tindices[x]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tif (conflicts.length){\r\n\t\t\terror(conflicts);\r\n\t\t}\r\n\t\t\r\n\t\t//var mergeBlobs = function(\r\n\t\tvar self = this;\r\n\t\t\r\n\t\tfinalTree.asyncEach(function(item, done, index){\r\n\t\t\tif (item.merge){\r\n\t\t\t\t\r\n\t\t\t\tvar shas = [item.ours.sha, item.base.sha, item.theirs.sha];\r\n\t\t\t\tif (item.ours.isBlob){\r\n\t\t\t\t\tstore._retrieveBlobsAsStrings(shas, function(blobs){\r\n\t\t\t\t\t\tvar newBlob = Diff.diff3_dig(blobs[0].data, blobs[1].data, blobs[2].data); \r\n\t\t\t\t\t\tif (newBlob.conflict){\r\n\t\t\t\t\t\t\tconflicts.push(newBlob);\r\n\t\t\t\t\t\t\tdone();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tstore.writeRawObject(objectDir, \'blob\', newBlob.text, function(sha){\r\n\t\t\t\t\t\t\t\tfinalTree[index].sha = sha;\r\n\t\t\t\t\t\t\t\tdone(); \r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tstore._retrieveObjectList(shas, \'Tree\', function(trees){\r\n\t\t\t\t\t\tself.mergeTrees(trees[0], trees[1], trees[2], function(mergedSha){\r\n\t\t\t\t\t\t\tfinalTree[index] = item.ours;\r\n\t\t\t\t\t\t\titem.ours.sha = mergedSha;\r\n\t\t\t\t\t\t\tdone();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tfunction(newConflicts){\r\n\t\t\t\t\t\t\tconflicts = conflicts.concat(newConflicts);\r\n\t\t\t\t\t\t\tdone();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tdone();\r\n\t\t\t}\r\n\t\t},\r\n\t\tfunction(){\r\n\t\t\tif (!conflicts.length){\r\n\t\t\t\t//Gito.FileUtils.mkdirs(self.dir, \'.git/objects\', function(objectDir){\r\n\t\t\t\tstore._writeTree(finalTree, success);\r\n\t\t\t\t//});\r\n\t\t\t\t//success(finalTree)\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\terror(conflicts);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t}\r\n\treturn {\r\n\t\tmergeTrees : mergeTrees,\r\n\t\tdiffTree : diffTree\r\n\t}\r\n\t\r\n});\r\n\ndefine(\'commands/conditions\',[\'utils/file_utils\', \'utils/errors\'],function(fileutils, errutils){\r\n\r\n    var conditions = {\r\n\r\n        checkForUncommittedChanges : function(dir, store, callback, error){\r\n            var lastUpdate;\r\n            var walkDir = function(dir, callback){\r\n                \r\n                dir.getMetadata(function(md){\r\n                    if (md.modificationTime > lastUpdate){\r\n                        callback(true);\r\n                        return;\r\n                    }\r\n                    fileutils.ls(dir, function(entries){\r\n                        var changed;\r\n                        entries.asyncEach(function(entry, done){\r\n                            if (changed){\r\n                                done();\r\n                                return;\r\n                            }\r\n\r\n                            if (entry.isDirectory){\r\n                                if (entry.name == \'.git\'){\r\n                                    done();\r\n                                    return;\r\n                                }\r\n                                entry.getMetadata(function(md){\r\n                                    walkDir(entry, function(isChanged){\r\n                                        changed |= isChanged;\r\n                                        done();\r\n                                    });\r\n                                }, done);\r\n                            }\r\n                            else{\r\n                                entry.getMetadata(function(md){\r\n                                    if (md.modificationTime > lastUpdate){\r\n                                        changed = true;\r\n                                    }\r\n                                    done();\r\n                                }, done);\r\n                                \r\n                            }\r\n                        },function(){\r\n                            callback(changed);\r\n                        });\r\n                    });\r\n                });\r\n            };\r\n\r\n            store.getConfig(function(config){\r\n                // this would mean we have no commits.\r\n                if (!config.time){\r\n                    config.time = 1;\r\n                }\r\n                lastUpdate = new Date(config.time);\r\n                walkDir(dir, function(changed){\r\n                    if (changed){\r\n                        error({type: errutils.UNCOMMITTED_CHANGES, msg: errutils.UNCOMMITTED_CHANGES_MSG});\r\n                    }\r\n                    else{\r\n                        callback(config);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n    return conditions;\r\n});\ndefine(\'commands/pull\',[\'commands/treemerger\', \'commands/object2file\', \'commands/conditions\', \'formats/smart_http_remote\', \'formats/pack_index\', \'formats/pack\', \'utils/file_utils\', \'utils/errors\', \'utils/progress_chunker\'], function(treeMerger, object2file, Conditions, SmartHttpRemote, PackIndex, Pack, fileutils, errutils, ProgressChunker){\r\n    \r\n\r\n    var _updateWorkingTree = function (dir, store, fromTree, toTree, success){\r\n        \r\n        var processOps = function(rootDir, ops, callback){\r\n            ops.remove.asyncEach(function(entry, done){\r\n                var rm = entry.isBlob ? fileutils.rmFile : fileutils.rmDir;\r\n                rm(rootDir, entry.name, done);\r\n            },\r\n            function(){\r\n                ops.add.asyncEach(function(entry, done){\r\n                    if (!entry.isBlob){\r\n                        fileutils.mkdirs(rootDir, entry.name, function(dirEntry){\r\n                            object2file.expandTree(dirEntry, store, entry.sha, done);\r\n                        });\r\n                    }\r\n                    else{\r\n                        object2file.expandBlob(rootDir, store, entry.name, entry.sha, done); \r\n                    }\r\n                },\r\n                function(){\r\n                    ops.merge.asyncEach(function(entry, done){\r\n                        if (entry.nu.isBlob){\r\n                            object2file.expandBlob(rootDir, store, entry.nu.name, entry.nu.sha, done); \r\n                        }\r\n                        else{\r\n                            store._retrieveObjectList([entry.old.sha, entry.nu.sha], \'Tree\', function(trees){\r\n                                var newOps = treeMerger.diffTree(trees[0], trees[1]);\r\n                                fileutils.mkdirs(rootDir, entry.nu.name, function(dirEntry){\r\n                                    processOps(dirEntry, newOps, done);\r\n                                });\r\n                            });\r\n                        }\r\n                    },\r\n                    function(){\r\n                        callback();\r\n                    });\r\n                });\r\n            });\r\n        }\r\n        \r\n        \r\n        var ops = treeMerger.diffTree(fromTree, toTree);\r\n        processOps(dir, ops, success);\r\n    \r\n    };\r\n\r\n    \r\n\r\n    var pull = function(options, success, error){\r\n\r\n        var dir = options.dir,\r\n            store = options.objectStore,\r\n            username = options.username,\r\n            password = options.password,\r\n            progress = options.progress || function(){},\r\n            callback = success,\r\n            ferror = errutils.fileErrorFunc(error);\r\n\r\n        var mkdirs = fileutils.mkdirs,\r\n            mkfile = fileutils.mkfile;\r\n\r\n        var fetchProgress;\r\n        if (options.progress){\r\n            var chunker = new ProgressChunker(progress);\r\n            fetchProgress = chunker.getChunk(20, 0.5);\r\n        }\r\n        else{\r\n            fetchProgress = function(){};\r\n        }\r\n\r\n        progress({pct: 0, msg: \'Checking for uncommitted changes...\'});\r\n        Conditions.checkForUncommittedChanges(dir, store, function(repoConfig){\r\n            var url = repoConfig.url;\r\n\r\n            remote = new SmartHttpRemote(store, "origin", url, username, password, error);\r\n        \r\n            var nonFastForward = function(){\r\n                error({type: errutils.PULL_NON_FAST_FORWARD, msg: errutils.PULL_NON_FAST_FORWARD_MSG});\r\n            };\r\n\r\n            var upToDate = function(){\r\n                error({type: errutils.PULL_UP_TO_DATE, msg: errutils.PULL_UP_TO_DATE_MSG});\r\n            };\r\n\r\n            // get the current branch\r\n            fileutils.readFile(dir, \'.git/HEAD\', \'Text\', function(headStr){\r\n                \r\n                progress({pct: 10, msg: \'Querying remote git server...\'});\r\n                // get rid of the initial \'ref: \' plus newline at end\r\n                var headRefName = headStr.substring(5).trim();\r\n                remote.fetchRefs(function(refs){\r\n                    var headSha, branchRef, wantRef;\r\n                    \r\n                    refs.some(function(ref){\r\n                        if (ref.name == headRefName){\r\n                            branchRef = ref;\r\n                            return true;\r\n                        }\r\n                    });\r\n\r\n                    if (branchRef){\r\n                         // see if we know about the branch\'s head commit if so, we\'re up to date, if not, request from remote\r\n                        store._retrieveRawObject(branchRef.sha, \'ArrayBuffer\', upToDate, function(){\r\n                            wantRef = branchRef;\r\n                            // Get the sha from the ref name \r\n                            store._getHeadForRef(branchRef.name, function(sha){\r\n                                branchRef.localHead = sha;\r\n                                \r\n                                store._getCommitGraph([sha], 32, function(commits, nextLevel){\r\n                                    remote.fetchRef([wantRef], commits, repoConfig.shallow, null, nextLevel, function(objects, packData, common){\r\n                                        // fast forward merge\r\n                                        if (common.indexOf(wantRef.localHead) != -1){\r\n                                            var packSha = packData.subarray(packData.length - 20);\r\n                                            \r\n                                            var packIdxData = PackIndex.writePackIdx(objects, packSha);\r\n                                            \r\n                                            // get a view of the sorted shas\r\n                                            var sortedShas = new Uint8Array(packIdxData, 4 + 4 + (256 * 4), objects.length * 20);\r\n                                            packNameSha = Crypto.SHA1(sortedShas);\r\n                                            \r\n                                            var packName = \'pack-\' + packNameSha;\r\n                                            mkdirs(store.dir, \'.git/objects\', function(objectsDir){\r\n                                                store.objectsDir = objectsDir;\r\n                                                mkfile(objectsDir, \'pack/\' + packName + \'.pack\', packData.buffer);\r\n                                                mkfile(objectsDir, \'pack/\' + packName + \'.idx\', packIdxData);\r\n                                                \r\n                                                var packIdx = new PackIndex(packIdxData);\r\n                                                if (!store.packs){\r\n                                                    store.packs = [];\r\n                                                }\r\n                                                store.packs.push({pack: new Pack(packData, store), idx: packIdx});\r\n                                            \r\n                                                mkfile(store.dir, \'.git/\' + wantRef.name, wantRef.sha, function(){\r\n                                                    progress({pct: 70, msg: \'Applying fast-forward merge\'});\r\n                                                    store._getTreesFromCommits([wantRef.localHead, wantRef.sha], function(trees){\r\n                                                        _updateWorkingTree(dir, store, trees[0], trees[1], function(){\r\n                                                            progress({pct: 99, msg: \'Finishing up\'})\r\n                                                            repoConfig.remoteHeads[branchRef.name] = branchRef.sha;\r\n                                                            store.updateLastChange(repoConfig, success);\r\n                                                        });\r\n                                                    });\r\n                                                }); \r\n                                            });\r\n                                        }\r\n                                        else{\r\n                                            // non-fast-forward merge\r\n                                            nonFastForward();\r\n                                            // var shas = [wantRef.localHead, common[i], wantRef.sha]\r\n                                            // store._getTreesFromCommits(shas, function(trees){\r\n                                            //     treeMerger.mergeTrees(store, trees[0], trees[1], trees[2], function(finalTree){\r\n                                            //         mkfile(store.dir, \'.git/\' + wantRef.name, sha, done); \r\n                                            //     }, function(e){errors.push(e);done();});\r\n                                            // });\r\n                                            \r\n                                        }\r\n                                            \r\n                                        \r\n                                    }, nonFastForward, fetchProgress);\r\n                                });\r\n                                                             \r\n                            }, ferror);\r\n                        }); \r\n                    }\r\n                    else{\r\n                        error({type: errutils.REMOTE_BRANCH_NOT_FOUND, msg: errutils.REMOTE_BRANCH_NOT_FOUND_MSG});\r\n                    }        \r\n                });\r\n            }, ferror);\r\n        }, error);\r\n        \r\n    }\r\n    return pull;\r\n});\ndefine(\'commands/push\',[\'formats/smart_http_remote\', \'formats/pack\', \'utils/progress_chunker\', \'utils/errors\'], function(SmartHttpRemote, Pack, ProgressChunker, errutils){\r\n    var push = function(options, success, error){\r\n        \r\n        var store = options.objectStore,\r\n            username = options.username,\r\n            password = options.password,\r\n            progress = options.progress || function(){};\r\n\r\n        var remotePushProgress;\r\n        if (options.progress){\r\n            var chunker = new ProgressChunker(progress);\r\n            remotePushProgress = chunker.getChunk(40, .6);\r\n        }\r\n        else{\r\n            remotePushProgress = function(){};\r\n        }\r\n\r\n        store.getConfig(function(config){\r\n            var url = config.url || options.url;\r\n\r\n            if (!url){\r\n                error({type: errutils.PUSH_NO_REMOTE, msg: errutils.PUSH_NO_REMOTE_MSG});\r\n                return;\r\n            }\r\n\r\n            var remote = new SmartHttpRemote(store, "origin", url, username, password, error);\r\n            progress({pct:0, msg: \'Contacting server...\'});\r\n            remote.fetchReceiveRefs(function(refs){\r\n                store._getCommitsForPush(refs, config.remoteHeads, function(commits, ref){\r\n                    progress({pct: 20, msg: \'Building pack...\'});\r\n                    Pack.buildPack(commits, store, function(packData){\r\n                        progress({pct: 40, msg: \'Sending pack...\'});\r\n                        remote.pushRefs([ref], packData, function(){\r\n                            config.remoteHeads = config.remoteHeads || {};\r\n                            config.remoteHeads[ref.name] = ref.head;\r\n                            config.url = url;\r\n                            store.setConfig(config, success);\r\n                        }, remotePushProgress);\r\n                    });\r\n                }, error);\r\n            });\r\n        });\r\n    }\r\n    return push;\r\n});\ndefine(\'commands/branch\',[\'utils/file_utils\', \'utils/errors\'], function(fileutils, errutils){\r\n    \r\n    var branchRegex = new RegExp("^(?!/|.*([/.]\\\\.|//|@\\\\{|\\\\\\\\))[^\\\\x00-\\\\x20 ~^:?*\\\\[]+$");\r\n    \r\n\r\n\r\n    var checkBranchName = function(branchName){\r\n        if (branchName && branchName.length && branchName.match(branchRegex)){\r\n            if (branchName.lastIndexOf(\'.lock\') != branchName.length - \'.lock\'.length &&\r\n                branchName.charAt(branchName.length - 1) != \'.\' && \r\n                branchName.charAt(branchName.length - 1) != \'/\' &&\r\n                branchName.charAt(0) != \'.\'){\r\n                return true;\r\n            }\r\n        };\r\n        return false\r\n    }\r\n\r\n    var branch = function(options, success, error){\r\n        var store = options.objectStore,\r\n            ferror = errutils.fileErrorFunc(error),\r\n            branchName = options.branch;\r\n\r\n        if (!checkBranchName(branchName)){\r\n            error({type: errutils.BRANCH_NAME_NOT_VALID, msg: errutils.BRANCH_NAME_NOT_VALID_MSG});\r\n            return;\r\n        }\r\n\r\n        var branchAlreadyExists = function(){\r\n            error({type: errutils.BRANCH_ALREADY_EXISTS, msg: errutils.BRANCH_ALREADY_EXISTS_MSG});\r\n        }\r\n\r\n        store._getHeadForRef(\'refs/heads/\' + branchName, branchAlreadyExists, function(e){\r\n            if (e.name == "NotFoundError"){\r\n                store.getHeadRef(function(refName){\r\n                    store._getHeadForRef(refName, function(sha){\r\n                        store.createNewRef(\'refs/heads/\' + branchName, sha, success);\r\n                    }, ferror);\r\n                });\r\n            }\r\n            else{\r\n                ferror(e);\r\n            }\r\n        });\r\n    }\r\n    return branch;\r\n});\ndefine(\'commands/checkout\',[\'commands/object2file\', \'commands/conditions\', \'utils/file_utils\', \'utils/errors\'], function(object2file, Conditions, fileutils, errutils){\r\n    \r\n    var blowAwayWorkingDir = function(dir, success, error){\r\n        fileutils.ls(dir, function(entries){\r\n            entries.asyncEach(function(entry, done){\r\n                if (entry.isDirectory){\r\n                    if (entry.name == \'.git\'){\r\n                        done();\r\n                        return;\r\n                    }\r\n                    else{\r\n                        entry.removeRecursively(done, error);\r\n                    }\r\n                }\r\n                else{\r\n                    entry.remove(done, error);\r\n                }\r\n            }, success);\r\n        }, error)\r\n    }\r\n\r\n    var checkout = function(options, success, error){\r\n        var dir = options.dir,\r\n            store = options.objectStore,\r\n            branch = options.branch,\r\n            ferror = errutils.fileErrorFunc(error);\r\n\r\n        \r\n        store._getHeadForRef(\'refs/heads/\' + branch, function(branchSha){\r\n            store.getHeadSha(function(currentSha){\r\n                if (currentSha != branchSha){\r\n                    Conditions.checkForUncommittedChanges(dir, store, function(config){\r\n                        blowAwayWorkingDir(dir, function(){\r\n                            store._retrieveObject(branchSha, "Commit", function(commit){\r\n                                var treeSha = commit.tree;\r\n                                object2file.expandTree(dir, store, treeSha, function(){\r\n                                    store.setHeadRef(\'refs/heads/\' + branch, function(){\r\n                                        store.updateLastChange(null, success);\r\n                                    });\r\n                                });\r\n                             });\r\n                        }, ferror);\r\n                    }, error);\r\n                }\r\n                else{\r\n                    store.setHeadRef(\'refs/heads/\' + branch, success);\r\n                }\r\n            });\r\n        }, \r\n        function(e){\r\n            if (e.name == "NotFoundError"){\r\n                error({type: errutils.CHECKOUT_BRANCH_NO_EXISTS, msg: CHECKOUT_BRANCH_NO_EXISTS_MSG});\r\n            }\r\n            else{\r\n                ferror(e);\r\n            }\r\n        });\r\n        \r\n    }\r\n    return checkout;\r\n});\n// Underscore.js 1.1.3\r\n// (c) 2010 Jeremy Ashkenas, DocumentCloud Inc.\r\n// Underscore is freely distributable under the MIT license.\r\n// Portions of Underscore are inspired or borrowed from Prototype,\r\n// Oliver Steele\'s Functional, and John Resig\'s Micro-Templating.\r\n// For all details and documentation:\r\n// http://documentcloud.github.com/underscore\r\n(function(){var p=this,C=p._,m={},j=Array.prototype,n=Object.prototype,i=j.slice,D=j.unshift,E=n.toString,q=n.hasOwnProperty,s=j.forEach,t=j.map,u=j.reduce,v=j.reduceRight,w=j.filter,x=j.every,y=j.some,o=j.indexOf,z=j.lastIndexOf;n=Array.isArray;var F=Object.keys,c=function(a){return new l(a)};if(typeof module!=="undefined"&&module.exports){module.exports=c;c._=c}else p._=c;c.VERSION="1.1.3";var k=c.each=c.forEach=function(a,b,d){if(s&&a.forEach===s)a.forEach(b,d);else if(c.isNumber(a.length))for(var e=\r\n0,f=a.length;e<f;e++){if(b.call(d,a[e],e,a)===m)break}else for(e in a)if(q.call(a,e))if(b.call(d,a[e],e,a)===m)break};c.map=function(a,b,d){if(t&&a.map===t)return a.map(b,d);var e=[];k(a,function(f,g,h){e[e.length]=b.call(d,f,g,h)});return e};c.reduce=c.foldl=c.inject=function(a,b,d,e){var f=d!==void 0;if(u&&a.reduce===u){if(e)b=c.bind(b,e);return f?a.reduce(b,d):a.reduce(b)}k(a,function(g,h,G){d=!f&&h===0?g:b.call(e,d,g,h,G)});return d};c.reduceRight=c.foldr=function(a,b,d,e){if(v&&a.reduceRight===\r\nv){if(e)b=c.bind(b,e);return d!==void 0?a.reduceRight(b,d):a.reduceRight(b)}a=(c.isArray(a)?a.slice():c.toArray(a)).reverse();return c.reduce(a,b,d,e)};c.find=c.detect=function(a,b,d){var e;A(a,function(f,g,h){if(b.call(d,f,g,h)){e=f;return true}});return e};c.filter=c.select=function(a,b,d){if(w&&a.filter===w)return a.filter(b,d);var e=[];k(a,function(f,g,h){if(b.call(d,f,g,h))e[e.length]=f});return e};c.reject=function(a,b,d){var e=[];k(a,function(f,g,h){b.call(d,f,g,h)||(e[e.length]=f)});return e};\r\nc.every=c.all=function(a,b,d){b=b||c.identity;if(x&&a.every===x)return a.every(b,d);var e=true;k(a,function(f,g,h){if(!(e=e&&b.call(d,f,g,h)))return m});return e};var A=c.some=c.any=function(a,b,d){b=b||c.identity;if(y&&a.some===y)return a.some(b,d);var e=false;k(a,function(f,g,h){if(e=b.call(d,f,g,h))return m});return e};c.include=c.contains=function(a,b){if(o&&a.indexOf===o)return a.indexOf(b)!=-1;var d=false;A(a,function(e){if(d=e===b)return true});return d};c.invoke=function(a,b){var d=i.call(arguments,\r\n2);return c.map(a,function(e){return(b?e[b]:e).apply(e,d)})};c.pluck=function(a,b){return c.map(a,function(d){return d[b]})};c.max=function(a,b,d){if(!b&&c.isArray(a))return Math.max.apply(Math,a);var e={computed:-Infinity};k(a,function(f,g,h){g=b?b.call(d,f,g,h):f;g>=e.computed&&(e={value:f,computed:g})});return e.value};c.min=function(a,b,d){if(!b&&c.isArray(a))return Math.min.apply(Math,a);var e={computed:Infinity};k(a,function(f,g,h){g=b?b.call(d,f,g,h):f;g<e.computed&&(e={value:f,computed:g})});\r\nreturn e.value};c.sortBy=function(a,b,d){return c.pluck(c.map(a,function(e,f,g){return{value:e,criteria:b.call(d,e,f,g)}}).sort(function(e,f){var g=e.criteria,h=f.criteria;return g<h?-1:g>h?1:0}),"value")};c.sortedIndex=function(a,b,d){d=d||c.identity;for(var e=0,f=a.length;e<f;){var g=e+f>>1;d(a[g])<d(b)?e=g+1:f=g}return e};c.toArray=function(a){if(!a)return[];if(a.toArray)return a.toArray();if(c.isArray(a))return a;if(c.isArguments(a))return i.call(a);return c.values(a)};c.size=function(a){return c.toArray(a).length};\r\nc.first=c.head=function(a,b,d){return b&&!d?i.call(a,0,b):a[0]};c.rest=c.tail=function(a,b,d){return i.call(a,c.isUndefined(b)||d?1:b)};c.last=function(a){return a[a.length-1]};c.compact=function(a){return c.filter(a,function(b){return!!b})};c.flatten=function(a){return c.reduce(a,function(b,d){if(c.isArray(d))return b.concat(c.flatten(d));b[b.length]=d;return b},[])};c.without=function(a){var b=i.call(arguments,1);return c.filter(a,function(d){return!c.include(b,d)})};c.uniq=c.unique=function(a,\r\nb){return c.reduce(a,function(d,e,f){if(0==f||(b===true?c.last(d)!=e:!c.include(d,e)))d[d.length]=e;return d},[])};c.intersect=function(a){var b=i.call(arguments,1);return c.filter(c.uniq(a),function(d){return c.every(b,function(e){return c.indexOf(e,d)>=0})})};c.zip=function(){for(var a=i.call(arguments),b=c.max(c.pluck(a,"length")),d=Array(b),e=0;e<b;e++)d[e]=c.pluck(a,""+e);return d};c.indexOf=function(a,b){if(o&&a.indexOf===o)return a.indexOf(b);for(var d=0,e=a.length;d<e;d++)if(a[d]===b)return d;\r\nreturn-1};c.lastIndexOf=function(a,b){if(z&&a.lastIndexOf===z)return a.lastIndexOf(b);for(var d=a.length;d--;)if(a[d]===b)return d;return-1};c.range=function(a,b,d){var e=i.call(arguments),f=e.length<=1;a=f?0:e[0];b=f?e[0]:e[1];d=e[2]||1;e=Math.max(Math.ceil((b-a)/d),0);f=0;for(var g=Array(e);f<e;){g[f++]=a;a+=d}return g};c.bind=function(a,b){var d=i.call(arguments,2);return function(){return a.apply(b||{},d.concat(i.call(arguments)))}};c.bindAll=function(a){var b=i.call(arguments,1);if(b.length==\r\n0)b=c.functions(a);k(b,function(d){a[d]=c.bind(a[d],a)});return a};c.memoize=function(a,b){var d={};b=b||c.identity;return function(){var e=b.apply(this,arguments);return e in d?d[e]:d[e]=a.apply(this,arguments)}};c.delay=function(a,b){var d=i.call(arguments,2);return setTimeout(function(){return a.apply(a,d)},b)};c.defer=function(a){return c.delay.apply(c,[a,1].concat(i.call(arguments,1)))};var B=function(a,b,d){var e;return function(){var f=this,g=arguments,h=function(){e=null;a.apply(f,g)};d&&\r\nclearTimeout(e);if(d||!e)e=setTimeout(h,b)}};c.throttle=function(a,b){return B(a,b,false)};c.debounce=function(a,b){return B(a,b,true)};c.wrap=function(a,b){return function(){var d=[a].concat(i.call(arguments));return b.apply(b,d)}};c.compose=function(){var a=i.call(arguments);return function(){for(var b=i.call(arguments),d=a.length-1;d>=0;d--)b=[a[d].apply(this,b)];return b[0]}};c.keys=F||function(a){if(c.isArray(a))return c.range(0,a.length);var b=[],d;for(d in a)if(q.call(a,d))b[b.length]=d;return b};\r\nc.values=function(a){return c.map(a,c.identity)};c.functions=c.methods=function(a){return c.filter(c.keys(a),function(b){return c.isFunction(a[b])}).sort()};c.extend=function(a){k(i.call(arguments,1),function(b){for(var d in b)a[d]=b[d]});return a};c.clone=function(a){return c.isArray(a)?a.slice():c.extend({},a)};c.tap=function(a,b){b(a);return a};c.isEqual=function(a,b){if(a===b)return true;var d=typeof a;if(d!=typeof b)return false;if(a==b)return true;if(!a&&b||a&&!b)return false;if(a.isEqual)return a.isEqual(b);\r\nif(c.isDate(a)&&c.isDate(b))return a.getTime()===b.getTime();if(c.isNaN(a)&&c.isNaN(b))return false;if(c.isRegExp(a)&&c.isRegExp(b))return a.source===b.source&&a.global===b.global&&a.ignoreCase===b.ignoreCase&&a.multiline===b.multiline;if(d!=="object")return false;if(a.length&&a.length!==b.length)return false;d=c.keys(a);var e=c.keys(b);if(d.length!=e.length)return false;for(var f in a)if(!(f in b)||!c.isEqual(a[f],b[f]))return false;return true};c.isEmpty=function(a){if(c.isArray(a)||c.isString(a))return a.length===\r\n0;for(var b in a)if(q.call(a,b))return false;return true};c.isElement=function(a){return!!(a&&a.nodeType==1)};c.isArray=n||function(a){return!!(a&&a.concat&&a.unshift&&!a.callee)};c.isArguments=function(a){return!!(a&&a.callee)};c.isFunction=function(a){return!!(a&&a.constructor&&a.call&&a.apply)};c.isString=function(a){return!!(a===""||a&&a.charCodeAt&&a.substr)};c.isNumber=function(a){return!!(a===0||a&&a.toExponential&&a.toFixed)};c.isNaN=function(a){return E.call(a)==="[object Number]"&&isNaN(a)};\r\nc.isBoolean=function(a){return a===true||a===false};c.isDate=function(a){return!!(a&&a.getTimezoneOffset&&a.setUTCFullYear)};c.isRegExp=function(a){return!!(a&&a.test&&a.exec&&(a.ignoreCase||a.ignoreCase===false))};c.isNull=function(a){return a===null};c.isUndefined=function(a){return a===void 0};c.noConflict=function(){p._=C;return this};c.identity=function(a){return a};c.times=function(a,b,d){for(var e=0;e<a;e++)b.call(d,e)};c.mixin=function(a){k(c.functions(a),function(b){H(b,c[b]=a[b])})};var I=\r\n0;c.uniqueId=function(a){var b=I++;return a?a+b:b};c.templateSettings={evaluate:/<%([\\s\\S]+?)%>/g,interpolate:/<%=([\\s\\S]+?)%>/g};c.template=function(a,b){var d=c.templateSettings;d="var __p=[],print=function(){__p.push.apply(__p,arguments);};with(obj||{}){__p.push(\'"+a.replace(/\\\\/g,"\\\\\\\\").replace(/\'/g,"\\\\\'").replace(d.interpolate,function(e,f){return"\',"+f.replace(/\\\\\'/g,"\'")+",\'"}).replace(d.evaluate||null,function(e,f){return"\');"+f.replace(/\\\\\'/g,"\'").replace(/[\\r\\n\\t]/g," ")+"__p.push(\'"}).replace(/\\r/g,\r\n"\\\\r").replace(/\\n/g,"\\\\n").replace(/\\t/g,"\\\\t")+"\');}return __p.join(\'\');";d=new Function("obj",d);return b?d(b):d};var l=function(a){this._wrapped=a};c.prototype=l.prototype;var r=function(a,b){return b?c(a).chain():a},H=function(a,b){l.prototype[a]=function(){var d=i.call(arguments);D.call(d,this._wrapped);return r(b.apply(c,d),this._chain)}};c.mixin(c);k(["pop","push","reverse","shift","sort","splice","unshift"],function(a){var b=j[a];l.prototype[a]=function(){b.apply(this._wrapped,arguments);\r\nreturn r(this._wrapped,this._chain)}});k(["concat","join","slice"],function(a){var b=j[a];l.prototype[a]=function(){return r(b.apply(this._wrapped,arguments),this._chain)}});l.prototype.chain=function(){this._chain=true;return this};l.prototype.value=function(){return this._wrapped}})();\r\n\ndefine("thirdparty/underscore-min", function(){});\n\ndefine(\'objectstore/objects\',[\'utils/misc_utils\', \'thirdparty/underscore-min\'], function(utils) {\r\n    var map = {\r\n        "commit": 1,\r\n        "tree": 2,\r\n        "blob": 3\r\n    };\r\n    GitObjects = {\r\n        CONSTRUCTOR_NAMES: {\r\n            "blob": "Blob",\r\n            "tree": "Tree",\r\n            "commit": "Commit",\r\n            "comm": "Commit",\r\n            "tag": "Tag",\r\n            "tag ": "Tag"\r\n        },\r\n\r\n        make: function(sha, type, content) {\r\n            var constructor = Git.objects[this.CONSTRUCTOR_NAMES[type]]\r\n            if (constructor) {\r\n                return new constructor(sha, content)\r\n            } else {\r\n                throw ("no constructor for " + type)\r\n            }\r\n        },\r\n\r\n        Blob: function(sha, data) {\r\n            this.type = "blob"\r\n            this.sha = sha\r\n            this.data = data\r\n            this.toString = function() {\r\n                return data\r\n            }\r\n        },\r\n\r\n        Tree: function(sha, buf) {\r\n            var data = new Uint8Array(buf);\r\n            var treeEntries = [];\r\n\r\n            var idx = 0;\r\n            while (idx < data.length) {\r\n                var entryStart = idx;\r\n                while (data[idx] != 0) {\r\n                    if (idx >= data.length) {\r\n                        throw Error("object is not a tree");\r\n                    }\r\n                    idx++;\r\n                }\r\n                var isBlob = data[entryStart] == 49; // \'1\' character\r\n                var nameStr = utils.bytesToString(data.subarray(entryStart + (isBlob ? 7 : 6), idx++));\r\n                nameStr = decodeURIComponent(escape(nameStr));\r\n                var entry = {\r\n                    isBlob: isBlob,\r\n                    name: nameStr,\r\n                    sha: data.subarray(idx, idx + 20)\r\n                };\r\n                treeEntries.push(entry);\r\n                idx += 20;\r\n            }\r\n            this.entries = treeEntries;\r\n\r\n            var sorter = function(a, b) {\r\n                var nameA = a.name,\r\n                    nameB = b.name;\r\n                if (nameA < nameB) //sort string ascending\r\n                    return -1;\r\n                if (nameA > nameB)\r\n                    return 1;\r\n                return 0;\r\n            }\r\n            this.sortEntries = function() {\r\n                this.entries.sort(sorter);\r\n            }\r\n        },\r\n\r\n        Commit: function(sha, data) {\r\n            this.type = "commit"\r\n            this.sha = sha\r\n            this.data = data\r\n\r\n            var lines = data.split("\\n")\r\n            this.tree = lines[0].split(" ")[1]\r\n            var i = 1\r\n            this.parents = []\r\n            while (lines[i].slice(0, 6) === "parent") {\r\n                this.parents.push(lines[i].split(" ")[1])\r\n                i += 1\r\n            }\r\n\r\n            var parseAuthor = function(line) {\r\n                var match = /^(.*) <(.*)> (\\d+) (\\+|\\-)\\d\\d\\d\\d$/.exec(line)\r\n                var result = {}\r\n\r\n                result.name = match[1]\r\n                result.email = match[2]\r\n                result.timestamp = parseInt(match[3])\r\n                result.date = new Date(result.timestamp * 1000)\r\n                return result\r\n            }\r\n\r\n            var authorLine = lines[i].replace("author ", "")\r\n            this.author = parseAuthor(authorLine)\r\n\r\n            var committerLine = lines[i + 1].replace("committer ", "")\r\n            this.committer = parseAuthor(committerLine)\r\n\r\n            if (lines[i + 2].split(" ")[0] == "encoding") {\r\n                this.encoding = lines[i + 2].split(" ")[1]\r\n            }\r\n            this.message = _(lines.slice(i + 2, lines.length)).select(function(line) {\r\n                return line !== ""\r\n            }).join("\\n")\r\n\r\n            this.toString = function() {\r\n                var str = "commit " + sha + "\\n"\r\n                str += "Author: " + this.author.name + " <" + this.author.email + ">\\n"\r\n                str += "Date:   " + this.author.date + "\\n"\r\n                str += "\\n"\r\n                str += this.message\r\n                return str\r\n            }\r\n        },\r\n\r\n        Tag: function(sha, data) {\r\n            this.type = "tag"\r\n            this.sha = sha\r\n            this.data = data\r\n        },\r\n\r\n        RawLooseObject: function(buf) {\r\n\r\n            var header, i, data;\r\n            var funcName;\r\n            if (buf instanceof ArrayBuffer) {\r\n                var data = new Uint8Array(buf);\r\n                var headChars = [];\r\n                i = 0;\r\n                for (; i < data.length; i++) {\r\n                    if (data[i] != 0)\r\n                        headChars.push(String.fromCharCode(data[i]));\r\n                    else\r\n                        break;\r\n                }\r\n                header = headChars.join(\'\');\r\n                funcName = \'subarray\';\r\n            } else {\r\n                data = buf;\r\n                i = buf.indexOf(\'\\0\');\r\n                header = buf.substring(0, i);\r\n                funcName = \'substring\';\r\n            }\r\n            var parts = header.split(\' \');\r\n            this.type = map[parts[0]];\r\n            this.size = parseInt(parts[1]);\r\n            // move past nul terminator but keep zlib header\r\n            this.data = data[funcName](i + 1);\r\n        }\r\n    }\r\n    return GitObjects;\r\n});\ndefine(\'objectstore/file_repo\',[\'formats/pack\', \'formats/pack_index\', \'objectstore/objects\', \'utils/misc_utils\', \'utils/file_utils\', \'utils/errors\'], function(Pack, PackIndex, GitObjects, utils, fileutils, errutils){\r\n\r\n\tString.prototype.endsWith = function(suffix){\r\n    \treturn this.lastIndexOf(suffix) == (this.length - suffix.length);\r\n\t}\r\n\r\n\tvar FileObjectStore = function(rootDir) {\r\n\t \tthis.dir = rootDir;\r\n\t \tthis.packs = [];\r\n\t}\r\n\r\n\tFileObjectStore.prototype = {\r\n\t\thaveRefs: function(){\r\n\t\t\treturn [];\r\n\t\t},\r\n\t\tload : function(callback){\r\n\t\t\tvar rootDir = this.dir;\r\n\t\t\tvar thiz = this;\r\n\t\t\tvar fe = this.fileError;\r\n\r\n\t\t\trootDir.getDirectory(\'.git/objects\', {create:true}, function(objectsDir){\r\n\t\t\t\tthiz.objectsDir = objectsDir;\r\n\t\t\t\tobjectsDir.getDirectory(\'pack\', {create:true}, function(packDir){\r\n\t\t\t\t\tvar packEntries = [];\r\n\t\t\t\t\tvar reader = packDir.createReader();\r\n\t\t\t\t\tvar readEntries = function(){\r\n\t\t\t\t\t\treader.readEntries(function(entries){\r\n\t\t\t\t\t\t    if (entries.length){\r\n\t\t\t\t\t\t\t\tfor (var i = 0; i < entries.length; i++){\r\n\t\t\t\t\t\t\t\t\tif (entries[i].name.endsWith(\'.pack\'))\r\n\t\t\t\t\t\t\t\t\t\tpackEntries.push(entries[i]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\treadEntries();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\tif (packEntries.length){\r\n\t\t\t\t\t\t\t\t\tvar counter = {x : 0};\r\n\t\t\t\t\t\t\t\t\tpackEntries.forEach(function(entry, i){\r\n\t\t\t\t\t\t\t\t\t\tfileutils.readFile(packDir, entry.name, "ArrayBuffer", function(packData){\r\n\t\t\t\t\t\t\t\t\t\t\tvar nameRoot = entry.name.substring(0, entry.name.lastIndexOf(\'.pack\'));\r\n\t\t\t\t\t\t\t\t\t\t\tfileutils.readFile(packDir, nameRoot + \'.idx\', \'ArrayBuffer\', function(idxData){\r\n\t\t\t\t\t\t\t\t\t\t\t\tthiz.packs.push({pack: new Pack(packData, thiz), idx: new PackIndex(idxData)});\r\n\t\t\t\t\t\t\t\t\t\t\t\tcounter.x += 1;\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (counter.x == packEntries.length){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcallback();\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}, fe);\r\n\t\t\t\t\t\t\t\t\t\t}, fe);\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\t\tcallback();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, fe);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treadEntries();\r\n\t\t\t\t}, fe);\r\n\t\t\t}, fe);\r\n\t\t},\r\n\t\tloadWith : function(objectsDir, packs){\r\n\t\t\tthis.objectsDir = objectsDir;\r\n\t\t\tthis.packs = packs;\r\n\t\t},\r\n\t\t_getCommitGraph : function(headShas, limit, callback){\r\n\t\t\tvar commits = [];\r\n\t\t\tvar thiz = this;\r\n\t\t\tvar seen = {};\r\n\t\t\t\r\n\t\t\tvar walkLevel = function(shas, callback){\r\n\t\t\t\tvar nextLevel = [];\r\n\t\t\t\tshas.asyncEach(function(sha, callback){\r\n\t\t\t\t\tif (seen[sha]){\r\n\t\t\t\t\t\tcallback();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tseen[sha] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// it\'s possible for this to fail since we support shallow clones\r\n\t\t\t\t\tthiz._retrieveObject(sha, \'Commit\', function(obj){\r\n\t\t\t\t\t\tnextLevel = nextLevel.concat(obj.parents);\r\n\t\t\t\t\t\tvar i = commits.length - 1\r\n\t\t\t\t\t\tfor (; i >= 0; i--){\r\n\t\t\t\t\t\t\tif (commits[i].author.timestamp > obj.author.timestamp){\r\n\t\t\t\t\t\t\t\tcommits.splice(i + 1, 0, obj);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (i < 0){\r\n\t\t\t\t\t\t\tcommits.unshift(obj);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcallback();\r\n\t\t\t\t\t}, callback);\r\n\t\t\t\t}, function(){\r\n\t\t\t\t\tif (commits.length >= limit || nextLevel.length == 0){\r\n\t\t\t\t\t\t/*var shas = [];\r\n\t\t\t\t\t\tfor (var i = 0; i < commits.length; i++){\r\n\t\t\t\t\t\t\tshas.push(commit.sha);\r\n\t\t\t\t\t\t}*/\r\n\t\t\t\t\t\tcallback(commits, nextLevel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\twalkLevel(nextLevel, callback);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\twalkLevel(headShas, callback);\r\n\t\t},\r\n\t\t_getCommitsForPush : function(baseRefs, remoteHeads, callback, error){\r\n\t\t\t\r\n\t\t\t// special case of empty remote. \r\n\t\t\tif (baseRefs.length == 1 && baseRefs[0].sha == "0000000000000000000000000000000000000000"){\r\n\t\t\t\tbaseRefs[0].name = \'refs/heads/master\';\r\n\t\t\t}\r\n\r\n\t\t\tvar self = this;\r\n\t\t\t// find the remote branch corresponding to our local one.\r\n\t\t\tvar remoteRef, headRef;\r\n\t\t\tthis.getHeadRef(function(refName){\r\n\t\t\t\theadRef = refName;\r\n\t\t\t\tfor (var i = 0; i < baseRefs.length; i++){\r\n\t\t\t\t\tif (baseRefs[i].name == headRef){\r\n\t\t\t\t\t\tremoteRef = baseRefs[i];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Didn\'t find a remote branch for our local so base the commits we \r\n\t\t\t\t// need to push on what we already know about the remote\r\n\t\t\t\tvar newBranch = !remoteRef;\r\n\t\t\t\tvar remoteShas = {};\r\n\t\t\t\tif (newBranch){\r\n\t\t\t\t\tremoteRef = {\r\n\t\t\t\t\t\tsha: "0000000000000000000000000000000000000000",\r\n\t\t\t\t\t\tname: headRef\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (var remoteHead in remoteHeads){\r\n\t\t\t\t\t\tvar remoteSha = remoteHeads[remoteHead];\r\n\t\t\t\t\t\tremoteShas[remoteSha] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar nonFastForward = function(){\r\n\t\t\t\t\terror({type: errutils.PUSH_NON_FAST_FORWARD, msg: errutils.PUSH_NON_FAST_FORWARD_MSG});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar checkRemoteHead = function(success){\r\n\t\t\t\t\t// See if the remote head exists in our repo.  \r\n\t\t\t\t\tif (remoteRef.sha != "0000000000000000000000000000000000000000"){\r\n\t\t\t\t\t\tself._retrieveObject(remoteRef.sha, \'Commit\', success, nonFastForward);\r\n\t\t\t\t\t}\t\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tsuccess();\r\n\t\t\t\t\t}\r\n\t\t\t\t} \r\n\r\n\r\n\t\t\t\tcheckRemoteHead(function(){\r\n\t\t\t\t\tself._getHeadForRef(headRef, function(sha){\r\n\r\n\t\t\t\t\t\tif (sha == remoteRef.sha){\r\n\t\t\t\t\t\t\terror({type: errutils.PUSH_NO_CHANGES, msg: errutils.PUSH_NO_CHANGES_MSG});\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tremoteRef.head = sha;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// case of new branch with no new commits\r\n\t\t\t\t\t\tif (newBranch && remoteShas[sha]){\r\n\t\t\t\t\t\t\tcallback([], remoteRef);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// we don\'t support local merge commits so finding commits to push should be a \r\n\t\t\t\t\t\t// matter of looking at a non-branching list of ancestors of the current commit.\r\n\t\t\t\t\t\tvar commits = [];\r\n\t\t\t\t\t\tvar getNextCommit = function(sha){\r\n\t\t\t\t\t\t\tself._retrieveObject(sha, \'Commit\', function(commit, rawObj){\r\n\t\t\t\t\t\t\t\tcommits.push({commit: commit, raw: rawObj});\r\n\t\t\t\t\t\t\t\tif (commit.parents.length > 1){\r\n\t\t\t\t\t\t\t\t\t// this would mean a local merge commit. It shouldn\'t happen, \r\n\t\t\t\t\t\t\t\t\t// therefore we\'ve strayed into somewhere we shouldn\'t be.\r\n\t\t\t\t\t\t\t\t\tnonFastForward();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if (commit.parents.length == 0 || commit.parents[0] == remoteRef.sha || remoteShas[commit.parents[0]]){\r\n\t\t\t\t\t\t\t\t\tcallback(commits, remoteRef);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\t\tgetNextCommit(commit.parents[0]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, nonFastForward);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tgetNextCommit(sha);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tfunction(e){\r\n\t\t\t\t\t\t// No commits yet\r\n\t\t\t\t\t\tif (e.name == "NotFoundError"){\r\n\t\t\t\t\t\t\terror({type: errutils.COMMIT_NO_CHANGES, msg: errutils.COMMIT_NO_CHANGES_MSG});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tself.fileError(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\r\n\t\t\t});\r\n\t\t\t\r\n\t\t},\r\n\t\tcreateNewRef : function(refName, sha, success){\r\n\t\t\tfileutils.mkfile(this.dir, \'.git/\' + refName, sha + \'\\n\', success, this.fileError);\r\n\t\t},\r\n\t\tsetHeadRef : function(refName, callback){\r\n\t\t\tfileutils.mkfile(this.dir, \'.git/HEAD\', \'ref: \' + refName + \'\\n\', callback, this.fileError);\r\n\t\t},\r\n\t\tgetHeadRef : function(callback){\r\n\t\t\tfileutils.readFile(this.dir, \'.git/HEAD\', \'Text\', function(headStr){\r\n\t\t\t\t// get rid of the initial \'ref: \' plus newline at end\r\n            \tvar headRefName = headStr.substring(5).trim();\r\n            \tcallback(headRefName);\r\n\t\t\t},this.fileError);\r\n\t\t},\r\n\t\tgetHeadSha : function(callback){\r\n\t\t\tvar self = this;\r\n\t\t\tthis.getHeadRef(function(ref){\r\n\t\t\t\tself._getHeadForRef(ref, callback, self.fileError);\r\n\t\t\t});\r\n\t\t},\r\n\t\tgetAllHeads : function(callback){\r\n\t\t\tvar fe = this.fileError;\r\n\t\t\tthis.dir.getDirectory(\'.git/refs/heads\', {create: false}, function(de){\r\n\t\t\t\tfileutils.ls(de, function(entries){\r\n\t\t\t\t\tvar branches = [];\r\n\t\t\t\t\tentries.forEach(function(entry){\r\n\t\t\t\t\t\tbranches.push(entry.name);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tcallback(branches);\r\n\t\t\t\t}, fe);\r\n\t\t\t}, \r\n\t\t\tfunction(e){\r\n\t\t\t\tif (e.name == "NotFoundError"){\r\n\t\t\t\t\tcallback([]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tfe(e);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\t_getHeadForRef : function(name, callback, onerror){\r\n\t\t\tfileutils.readFile(this.dir, \'.git/\' + name, \'Text\', function(data){callback(data.substring(0, 40));}, onerror) ;\t\r\n\t\t},\r\n\t\t\r\n\t\t_findLooseObject : function(sha, success, error){\r\n\t\t\tthis.objectsDir.getFile(sha.substring(0,2) + \'/\' + sha.substring(2), {create:false}, function(fileEntry){\r\n\t\t\t\tsuccess(fileEntry);\r\n\t\t\t},\r\n\t\t\tfunction(e){\r\n\t\t\t\terror(e);\r\n\t\t\t});\r\n\t\t},\r\n\t\t_findPackedObject : function(sha, success, error){\r\n\t\t\tfor (var i = 0; i < this.packs.length; i++){\r\n\t\t\t\tvar offset = this.packs[i].idx.getObjectOffset(sha);\r\n\t\t\t\tif (offset != -1){\r\n\t\t\t\t\tsuccess(offset, this.packs[i].pack);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\terror();\r\n\t\t},\r\n\t\t_retrieveRawObject : function(sha, dataType, callback, error){\r\n\t\t     var shaBytes;\r\n\t\t     if (sha instanceof Uint8Array){\r\n\t\t     \tshaBytes = sha;\r\n\t\t     \tsha = utils.convertBytesToSha(shaBytes);\r\n\t\t     }\r\n\t\t     else{\r\n\t\t     \tshaBytes = utils.convertShaToBytes(sha);\r\n\t\t     }\r\n\t\t     \r\n\t\t\t \r\n\t\t\t \r\n\t\t\t var thiz = this;\r\n\t\t\t this._findLooseObject(sha, function(fileEntry){\r\n\t\t\t \tfileutils.readFileEntry(fileEntry, \'ArrayBuffer\', function(buf){\r\n\t\t\t \t\tvar inflated = utils.inflate(new Uint8Array(buf));\r\n\t\t\t \t\tif (dataType == \'Raw\' || dataType == \'ArrayBuffer\'){\r\n\t\t\t \t\t\tvar buffer = utils.trimBuffer(inflated);\r\n\t\t\t \t\t\tcallback(new GitObjects.RawLooseObject(buffer));\r\n\t\t\t \t\t}\r\n\t\t\t \t\telse{\r\n\t\t\t \t\t\tfileutils.readBlob(new Blob([inflated]), dataType, function(data){\r\n\t\t\t\t\t\t\tcallback(new GitObjects.RawLooseObject(data));\r\n\t\t\t\t\t\t});\r\n\t\t\t \t\t}\r\n\t\t\t \t});\r\n\t\t\t }, function(e){\r\n\t\t\t \t\tthiz._findPackedObject(shaBytes, function(offset, pack){\r\n\t\t\t \t\t\tdataType = dataType == \'Raw\' ? \'ArrayBuffer\' : dataType;\r\n\t\t\t \t\t\tpack.matchAndExpandObjectAtOffset(offset, dataType, function(object){\r\n\t\t\t\t\t\t\tcallback(object);\r\n\t\t\t\t\t\t});\r\n\t\t\t \t}, function(){\r\n\t\t\t \t    if (error) error.call(thiz);\r\n\t\t\t \t    else throw(Error("Can\'t find object with SHA " + sha));\r\n\t\t\t \t});\r\n\t\t\t });\r\n\t\t},\r\n\t\t_retrieveBlobsAsStrings : function(shas, callback){\r\n\t\t\tvar blobs =new Array(shas.length),\r\n\t\t\t\tself = this;\r\n\t\t\t\t\r\n\t\t\tshas.asyncEach(function(sha, done, i){\r\n\t\t\t\tself._retrieveRawObject(sha, \'Text\', function(object){\r\n\t\t\t\t\tblobs[i] = new GitObjects.Blob(sha, object.data);\r\n\t\t\t\t\tdone();\r\n\t\t\t\t });\r\n\t\t\t},\r\n\t\t\tfunction(){\r\n\t\t\t\tcallback(blobs);\r\n\t\t\t});\r\n\t\t},\r\n\t\t_retrieveObjectList : function(shas, objType, callback){\r\n\t\t\tvar objects = new Array(shas.length),\r\n\t\t\t\tself = this;\r\n\t\t\t\t\r\n\t\t\tshas.asyncEach(function(sha, done, i){\r\n\t\t\t\tself._retrieveObject(sha, objType, function(obj){\r\n\t\t\t\t\tobjects[i] = obj;\r\n\t\t\t\t\tdone();\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tfunction(){\r\n\t\t\t\tcallback(objects);\r\n\t\t\t});\r\n\t\t},\r\n\t\t_retrieveObject : function(sha, objType, callback, error){\r\n\t\t\t var dataType = "ArrayBuffer";\r\n\t\t\t if (objType == "Commit"){\r\n\t\t\t \tdataType = "Text";\r\n\t\t\t }\r\n\t\t\t \r\n\t\t\t this._retrieveRawObject(sha, dataType, function(object){\r\n\t\t\t \tcallback(new GitObjects[objType](sha, object.data), object);\r\n\t\t\t }, error);\r\n\t\t},\r\n\r\n\t\tinit : function(success, error){\r\n\t\t\tvar root = this.dir;\r\n\t\t\tvar self = this;\r\n\t\t\tthis.error = error;\r\n\t\t\tthis.fileError = errutils.fileErrorFunc(error);\r\n\t\t\t\r\n\t\t\troot.getDirectory(\'.git\', {create:false}, function(gitDir){\r\n\t\t\t\tself.load(success);\r\n\t\t\t},\r\n\t\t\tfunction(e){\r\n\t\t\t\tif (e.name == "NotFoundError"){\r\n\t\t\t\t\tself._init(success);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tself.fileError(e);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t_init : function(success){\r\n\t\t\tvar root = this.dir;\r\n\t\t\tvar self = this;\r\n\t\t\tfileutils.mkdirs(root, \'.git/objects\', function(objectsDir){\r\n\t\t\t\tself.objectsDir = objectsDir;\r\n\t\t\t\tfileutils.mkfile(root, \'.git/HEAD\', \'ref: refs/heads/master\\n\', success, self.fileError);\r\n\t\t\t}, this.fileError);\r\n\r\n\t\t},\r\n\t\t\r\n\t\t_getTreesFromCommits : function(shas, callback){\r\n\t\t\tvar trees = [],\r\n\t\t\t    shaIndex = 0,\r\n\t\t\t\tself = this;\r\n\t\t\t\r\n\t\t\tvar fillTrees = function(){\r\n\t\t\t\tself._getTreeFromCommitSha(shas[shaIndex++], function(tree){\r\n\t\t\t\t\ttrees.push(tree);\r\n\t\t\t\t\tif (shaIndex >= shas.length){\r\n\t\t\t\t\t\tcallback(trees);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tfillTrees();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tfillTrees();\r\n\t\t},\r\n\t\t_getTreeFromCommitSha : function(sha, callback){\r\n\t\t\tvar self = this;\r\n\t\t\tthis._retrieveObject(sha, \'Commit\', function(commit){\r\n\t\t\t\tself._retrieveObject(commit.tree, \'Tree\', callback);\r\n\t\t\t});\r\n\t\t},\r\n\t\twriteRawObject : function(type, content, callback){\r\n\t\t\tvar bb = [];//new BlobBuilder();\r\n\t\t\tvar size = content.byteLength || content.length || content.size || 0;\r\n\t\t\tvar header = type + \' \' + String(size) ;\r\n\t\t\t\r\n\t\t\t//var store = header + content;\r\n\t\t\t\r\n\t\t\tbb.push(header);\r\n\t\t\tbb.push(new Uint8Array([0]));\r\n\t\t\tbb.push(content);\r\n\t\t\tvar thiz = this;\r\n\t\t\tvar fr = new FileReader();\r\n\t\t\tfr.onloadend = function(e){\r\n\t\t\t\tvar buf = fr.result;\r\n\t\t\t\tvar store = new Uint8Array(buf);\r\n\t\t\t\tvar digest = Crypto.SHA1(store);\r\n\t\t\t\tthiz._findPackedObject(utils.convertShaToBytes(digest), function(){callback(digest);}, function(){\r\n\t\t\t\t\tthiz._storeInFile(digest, store, callback);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfr.readAsArrayBuffer(new Blob(bb));   \r\n\t\t},\r\n\t\t\r\n\t\t_storeInFile : function(digest, store, callback){\r\n\t\t\tvar subDirName = digest.substr(0,2); \t\r\n\t\t\tvar objectFileName = digest.substr(2);\r\n\t\t\t\r\n\t\t\tthis.objectsDir.getDirectory(subDirName, {create:true}, function(dirEntry){\r\n\t\t\t\tdirEntry.getFile(objectFileName, {create:true}, function(fileEntry){\r\n\t\t\t\t\tfileEntry.file(function(file){\r\n\t\t\t\t\t\t if(!file.size){\r\n\t\t\t\t\t\t \tvar content = utils.deflate(store);\r\n\t\t\t\t\t\t \tfileEntry.createWriter(function(fileWriter){\r\n\t\t\t\t\t\t \t\tfileWriter.write(new Blob([content]));;\r\n\t\t\t\t\t\t \t\tcallback(digest);\r\n\t\t\t\t\t\t \t}, utils.errorHandler);\r\n\t\t\t\t\t\t }\r\n\t\t\t\t\t\t else{\r\n\t\t\t\t\t\t \tcallback(digest);\r\n\t\t\t\t\t\t }\r\n\t\t\t\t\t}, utils.errorHandler);\r\n\t\t\t\t\r\n\t\t\t\t}, utils.errorHandler);\r\n\t\t\t\t\r\n\t\t\t}, utils.errorHandler);\r\n\t\t},\r\n\r\n\t\t_writeTree : function(treeEntries, success){\r\n\t\t\tvar bb = [];//new BlobBuilder();\r\n\t\t\tfor (var i = 0; i < treeEntries.length; i++){\r\n\t\t\t\tbb.push((treeEntries[i].isBlob ? \'100644 \' : \'40000 \') + treeEntries[i].name);\r\n\t\t\t\tbb.push(new Uint8Array([0]));\r\n\t\t\t\tbb.push(treeEntries[i].sha);\r\n\t\t\t}\r\n\t\t\tthis.writeRawObject(\'tree\', new Blob(bb), function(sha){\r\n\t\t\t\tsuccess(sha);\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tgetConfig : function(success){\r\n\t\t\tvar fe = this.fileError;\r\n\r\n\t\t\tfileutils.readFile(this.dir, \'.git/config.json\', \'Text\', function(configStr){\r\n\t\t\t\tsuccess(JSON.parse(configStr));\r\n\t\t\t}, function(e){\r\n\t\t\t\tif (e.name == "NotFoundError"){\r\n\t\t\t\t\tsuccess({});\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tfe(e);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\tsetConfig : function(config, success){\r\n\t\t\tvar configStr = JSON.stringify(config);\r\n\t\t\tfileutils.mkfile(this.dir, \'.git/config.json\', configStr, success, this.fileError);\r\n\t\t},\r\n\r\n\t\tupdateLastChange : function(config, success){\r\n\t\t\tvar dir = this.dir,\r\n\t\t\t\tsetConfig = this.setConfig.bind(this);\r\n\t\t\t\tfe = this.fileError;\r\n\r\n\t\t\tvar doUpdate = function(config){\r\n\t\t\t\tconfig.time = new Date();\r\n\t\t\t\tsetConfig(config, success);\r\n\t\t\t}\r\n\t\t\tif (config){\r\n\t\t\t\tdoUpdate(config);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.getConfig(doUpdate);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\treturn FileObjectStore;\r\n});\r\n\r\n\n/*\r\n\r\nThis is a Javascript implementation of the C implementation of the CRC-32\r\nalgorithm available at http://www.w3.org/TR/PNG-CRCAppendix.html\r\n\r\nUsage License at\r\nhttp://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\r\n\r\nCopyright (C) W3C\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nPermission to copy, modify, and distribute this software and its\r\ndocumentation, with or without modification, for any purpose and without\r\nfee or royalty is hereby granted, provided that you include the\r\nfollowing on ALL copies of the software and documentation or portions\r\nthereof, including modifications:\r\n\r\n1. The full text of this NOTICE in a location viewable to users of\r\nthe redistributed or derivative work.\r\n2. Any pre-existing intellectual property disclaimers, notices, or\r\nterms and conditions. If none exist, the W3C Software Short Notice\r\nshould be included (hypertext is preferred, text is permitted)\r\nwithin the body of any redistributed or derivative code.\r\n3. Notice of any changes or modifications to the files,\r\nincluding the date changes were made. (We recommend you provide\r\nURIs to the location from which the code is derived.)\r\n\r\nTHIS SOFTWARE AND DOCUMENTATION IS PROVIDED "AS IS," AND\r\nCOPYRIGHT HOLDERS MAKE NO REPRESENTATIONS OR WARRANTIES,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, WARRANTIES OF\r\nMERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT\r\nTHE USE OF THE SOFTWARE OR DOCUMENTATION WILL NOT INFRINGE ANY\r\nTHIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.\r\n\r\nCOPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT,\r\nSPECIAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF ANY USE OF THE\r\nSOFTWARE OR DOCUMENTATION.\r\n\r\nThe name and trademarks of copyright holders may NOT be used in\r\nadvertising or publicity pertaining to the software without\r\nspecific, written prior permission. Title to copyright in this\r\nsoftware and any associated documentation will at all times\r\nremain with copyright holders.\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n*/\r\n\r\nvar crc32 = {\r\n    table: [\r\n        0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,\r\n             0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,\r\n             0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\r\n             0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,\r\n             0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\r\n             0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\r\n             0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,\r\n             0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,\r\n             0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\r\n             0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,\r\n             0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,\r\n             0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\r\n             0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,\r\n             0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,\r\n             0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\r\n             0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,\r\n             0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,\r\n             0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\r\n             0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,\r\n             0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\r\n             0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\r\n             0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,\r\n             0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,\r\n             0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\r\n             0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,\r\n             0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,\r\n             0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\r\n             0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,\r\n             0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,\r\n             0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\r\n             0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,\r\n             0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,\r\n    ],\r\n\r\n    crc: function(data)\r\n    {\r\n        var crc = 0xffffffff;\r\n\r\n        for(var i = 0; i < data.length; i++) {\r\n            var b = data[i];\r\n            crc = (crc >>> 8) ^ this.table[(crc ^ b) & 0xff];\r\n            //crc = this.table[(crc ^ data[i]) & 0xff] ^ (crc >> 8);\r\n        }\r\n\r\n        crc = crc ^ 0xffffffff;\r\n        return crc;\r\n    },\r\n};\ndefine("thirdparty/crc32", function(){});\n\nGitLiteWorkerMessages = {\r\n    PROGRESS : 0,\r\n    FINISHED: 1,\r\n    RETRIEVE_OBJECT: 2,\r\n    START: 4,\r\n    OBJECT_RETRIEVED: 5,\r\n\r\n    API_CALL_CLONE: 6,\r\n    API_CALL_COMMIT: 7,\r\n    API_CALL_PULL: 8,\r\n    API_CALL_PUSH: 9,\r\n    API_CALL_CHECKOUT: 12,\r\n    API_CALL_BRANCH: 14,\r\n    API_CALL_UNCOMMITTED: 15,\r\n    API_CALL_CURRENT_BRANCH: 16, \r\n    API_CALL_LOCAL_BRANCHES: 17,\r\n    API_CALL_REMOTE_BRANCHES: 18,\r\n\r\n    SUCCESS: 10,\r\n    ERROR: 11\r\n};\ndefine("workers/worker_messages", function(){});\n\n\r\ndefine(\'api\',[\'commands/clone\', \'commands/commit\', \'commands/init\', \'commands/pull\', \'commands/push\', \'commands/branch\', \'commands/checkout\', \'commands/conditions\', \'objectstore/file_repo\', \'formats/smart_http_remote\', \'utils/errors\', \'thirdparty/2.2.0-sha1\', \'thirdparty/crc32\', \'thirdparty/deflate.min\', \'thirdparty/inflate.min\', "workers/worker_messages"], function(clone, commit, init, pull, push, branch, checkout, Conditions, FileObjectStore, SmartHttpRemote, errutils){\r\n    \r\n    /** @exports GitApi */\r\n    var api = {\r\n\r\n        /** @desc Indicates an unexpected error in the HTML5 file system. */\r\n        FILE_IO_ERROR: errutils.FILE_IO_ERROR,\r\n        /** @desc Indicates an unexpected ajax error when trying to make a request */\r\n        AJAX_ERROR: errutils.AJAX_ERROR, \r\n        /** @desc trying to clone into a non-empty directory */\r\n        CLONE_DIR_NOT_EMPTY: errutils.CLONE_DIR_NOT_EMPTY,\r\n        /** @desc Trying to clone into directory that contains a .git directory that already contains objects */\r\n        CLONE_GIT_DIR_IN_USE: errutils.CLONE_GIT_DIR_IN_USE,\r\n        /** @desc No branch found with the name given.  */\r\n        REMOTE_BRANCH_NOT_FOUND: errutils.REMOTE_BRANCH_NOT_FOUND,\r\n        /** @desc A pull was attempted that would require a non-fast-forward. The API only supports fast forward merging at the moment. */\r\n        PULL_NON_FAST_FORWARD: errutils.PULL_NON_FAST_FORWARD,\r\n        /** @desc A pull was attempted but the local git repo is up to date */\r\n        PULL_UP_TO_DATE: errutils.PULL_UP_TO_DATE,\r\n        /** @desc A commit was attempted but the local git repo has no new changes to commit */\r\n        COMMIT_NO_CHANGES: errutils.COMMIT_NO_CHANGES,\r\n        /** @desc A push was attempted but the remote repo is up to date. */\r\n        PUSH_NO_CHANGES: errutils.PUSH_NO_CHANGES,\r\n        /** @desc A push was attempted but the remote has new commits that the local repo doesn\'t know about. \r\n         * You would normally do a pull and merge remote changes first. Unfortunately, this isn\'t possible with this API. \r\n         * As a workaround, you could create and checkout a new branch and then do a push. */\r\n        PUSH_NON_FAST_FORWARD: errutils.PUSH_NON_FAST_FORWARD,\r\n        /** @desc Indicates an unexpected problem retrieving objects */\r\n        OBJECT_STORE_CORRUPTED: errutils.OBJECT_STORE_CORRUPTED,\r\n        /** @desc A pull was attempted with uncommitted changed in the working copy */\r\n        UNCOMMITTED_CHANGES: errutils.UNCOMMITTED_CHANGES,\r\n        /** @desc 401 when attempting to make a request. */\r\n        HTTP_AUTH_ERROR: errutils.HTTP_AUTH_ERROR,\r\n\r\n        /** @desc The branch doesn\'t follow valid git branch naming rules. */\r\n        BRANCH_NAME_NOT_VALID: errutils.BRANCH_NAME_NOT_VALID,\r\n        /** @desc Trying to push a repo without a valid remote. \r\n         * This can happen if it\'s a first push to blank repo and a url wasn\'t specified as one of the options. */\r\n        PUSH_NO_REMOTE: errutils.PUSH_NO_REMOTE,\r\n        \r\n        /**\r\n         * Clones a remote git repo into a local HTML5 DirectoryEntry. It only requests a single branch. This will either\r\n         * be the branch specified or the HEAD at specified url. You can also specify the depth of the clone. It\'s recommended\r\n         * that a depth of 1 always be given since the api does not currently give a way \r\n         * to access the commit history of a repo.  \r\n         * \r\n         * @param {Object} options \r\n         * @param {DirectoryEntry} options.dir an HTML5 DirectoryEntry to clone the repo into\r\n         * @param {String} [options.branch=HEAD] the name of the remote branch to clone.\r\n         * @param {String} options.url the url of the repo to clone from\r\n         * @param {Number} [options.depth] the depth of the clone. Equivalent to the --depth option from git-clone\r\n         * @param {String} [options.username] User name to authenticate with if the repo supports basic auth\r\n         * @param {String} [options.password] password to authenticate with if the repo supports basic auth\r\n         * @param {progressCallback} [options.progress] callback that gets notified of progress events.\r\n         * @param {successCallback} success callback that gets notified after the clone is completed successfully\r\n         * @param {errorCallback} [error] callback that gets notified if there is an error\r\n         */\r\n        clone : function(options, success, error){\r\n            var objectStore = new FileObjectStore(options.dir);\r\n            objectStore.init(function(){\r\n                \r\n                clone({\r\n                        dir: options.dir, \r\n                        branch: options.branch, \r\n                        objectStore: objectStore, \r\n                        url: options.url, \r\n                        depth: options.depth, \r\n                        progress: options.progress,\r\n                        username: options.username,\r\n                        password: options.password\r\n                    }, \r\n                    success, error);\r\n\r\n            }, error);\r\n        },\r\n        /**\r\n         * Does a pull from the url the local repo was cloned from. Will only succeed for fast-forward pulls.\r\n         * If a merge is required, it calls the error callback \r\n         * \r\n         * @param {Object} options \r\n         * @param {DirectoryEntry} options.dir an HTML5 DirectoryEntry that contains a local git repo to pull updates into\r\n         * @param {String} [options.username] User name to authenticate with if the repo supports basic auth\r\n         * @param {String} [options.password] password to authenticate with if the repo supports basic auth\r\n         * @param {progressCallback} [options.progress] callback that gets notified of progress events.\r\n         * @param {successCallback} success callback that gets notified after the pull is completed successfully.\r\n         * @param {errorCallback} [error] callback that gets notified if there is an error\r\n         */\r\n        pull : function(options, success, error){\r\n            var objectStore = new FileObjectStore(options.dir);\r\n            objectStore.init(function(){\r\n                \r\n                pull({\r\n                        dir: options.dir, \r\n                        objectStore: objectStore,\r\n                        username: options.username,\r\n                        password: options.password,\r\n                        progress: options.progress\r\n                    }, \r\n                    success, error);\r\n\r\n            }, error);\r\n        },\r\n        /**\r\n         * Looks for changes in the working directory since the last commit and adds them to the local git repo history. Some caveats\r\n         *  \r\n         *  <ul>\r\n         *  <li>This is does an implicit "git add" of all changes including previously untracked files.</li>\r\n         *  <li>A Tree created by this command will only have two file modes: 40000 for folders (subtrees) and 100644 for files (blobs).</li>\r\n         *  <li>Ignores any rules in .gitignore</li>\r\n         *  </ul>\r\n         *\r\n         * @param {Object} options \r\n         * @param {DirectoryEntry} options.dir an HTML5 DirectoryEntry to look for changes and commit them to the .git subdirectory in the same driectory\r\n         * @param {String} options.name The name that will appear in the commit log as the name of the author and committer. \r\n         * @param {String} options.email The email that will appear in the commit log as the email of the author and committer.\r\n         * @param {String} options.commitMsg The message that will appear in the commit log\r\n         * @param {successCallback} success callback that gets notified after the commit is completed successfully.\r\n         * @param {errorCallback} [error] callback that gets notified if there is an error\r\n         * \r\n         */\r\n        commit : function(options, success, error){\r\n            var objectStore = new FileObjectStore(options.dir);\r\n            objectStore.init(function(){\r\n                \r\n                commit({\r\n                            dir: options.dir, \r\n                            username: options.name, \r\n                            email: options.email, \r\n                            commitMsg: options.commitMsg, \r\n                            objectStore: objectStore\r\n                        }, success, error);\r\n            }, error);\r\n        },\r\n        /**\r\n         * Pushes local commits to a remote repo. This is usually the remote repo the local repo was cloned from. It can also be \r\n         * the initial push to a blank repo.\r\n         * \r\n         * @param {Object} options \r\n         * @param {DirectoryEntry} options.dir an HTML5 DirectoryEntry to push changes from\r\n         * @param {String} [options.url] the remote url to push changes to. This defaults to the url the repo was cloned from. \r\n         * @param {String} [options.username] User name to authenticate with if the repo supports basic auth\r\n         * @param {String} [options.password] password to authenticate with if the repo supports basic auth\r\n         * @param {progressCallback} [options.progress] callback that gets notified of progress events.\r\n         * @param {successCallback} success callback that gets notified after the push is completed successfully.\r\n         * @param {errorCallback} [error] callback that gets notified if there is an error\r\n         */\r\n        push : function(options, success, error){\r\n            var objectStore = new FileObjectStore(options.dir);\r\n            objectStore.init(function(){\r\n                push({\r\n                        objectStore: objectStore, \r\n                        dir: options.dir, \r\n                        url: options.url,\r\n                        username: options.username,\r\n                        password: options.password,\r\n                        progress: options.progress\r\n                    }, \r\n                    success, error);\r\n            }, error);\r\n        },\r\n        /**\r\n         * Creates a local branch. You will need to call the checkout api command to check it out. \r\n         * \r\n         * @param {Object} options \r\n         * @param {DirectoryEntry} options.dir an HTML5 DirectoryEntry that contains a local git repo\r\n         * @param {String} options.branch Name of the branch to create\r\n         * @param {successCallback} success callback that gets notified after the push is completed successfully.\r\n         * @param {errorCallback} [error] callback that gets notified if there is an error\r\n         * \r\n         */\r\n        branch: function(options, success, error){\r\n            var objectStore = new FileObjectStore(options.dir);\r\n            objectStore.init(function(){\r\n                branch({\r\n                    objectStore: objectStore,\r\n                    dir: options.dir,\r\n                    branch: options.branch\r\n                }, success, error);\r\n            }, error);\r\n\r\n        },\r\n        /**\r\n         * Checks out a local branch. \r\n         * \r\n         * @param {Object} options \r\n         * @param {DirectoryEntry} options.dir an HTML5 DirectoryEntry that contains a local git repo\r\n         * @param {String} options.branch Name of the branch to checkout\r\n         * @param {successCallback} success callback that gets notified after the push is completed successfully.\r\n         * @param {errorCallback} [error] callback that gets notified if there is an error \r\n         */\r\n        checkout: function(options, success, error){\r\n            var objectStore = new FileObjectStore(options.dir);\r\n            objectStore.init(function(){\r\n                checkout({\r\n                    objectStore: objectStore,\r\n                    dir: options.dir,\r\n                    branch: options.branch\r\n                }, success, error);\r\n            }, error);\r\n        },\r\n\r\n        /**\r\n         * Looks in the working directory for uncommitted changes. This is faster than attempting a \r\n         * commit and having it fail.\r\n         * \r\n         * @param {Object} options \r\n         * @param {DirectoryEntry} options.dir an HTML5 DirectoryEntry that contains a local git repo\r\n         * @param {successCallback} success callback that gets notified after the push is completed successfully.\r\n         * @param {errorCallback} [error] callback that gets notified if there is an error  \r\n         */\r\n        checkForUncommittedChanges: function(options, success, error){\r\n            var objectStore = new FileObjectStore(options.dir);\r\n            objectStore.init(function(){\r\n                Conditions.checkForUncommittedChanges(options.dir, objectStore, success, error);\r\n            }, error);\r\n        },\r\n        /**\r\n         * Retrieves the name of the currently checked out local branch . \r\n         * \r\n         * @param {Object} options \r\n         * @param {DirectoryEntry} options.dir an HTML5 DirectoryEntry that contains a local git repo\r\n         * @param {successCallback} success callback that gets notified after the push is completed successfully.\r\n         * @param {errorCallback} [error] callback that gets notified if there is an error  \r\n         */\r\n        getCurrentBranch : function(options, success, error){\r\n            var objectStore = new FileObjectStore(options.dir);\r\n            objectStore.init(function(){\r\n                objectStore.getHeadRef(function(ref){\r\n                    success(ref.substring(\'refs/heads/\'.length));\r\n                });\r\n            }, error);\r\n        },\r\n        /**\r\n         * Gets a list of all local branches.\r\n         * \r\n         * @param {Object} options \r\n         * @param {DirectoryEntry} options.dir an HTML5 DirectoryEntry that contains a local git repo\r\n         * @param {successCallback} success callback that gets notified after the push is completed successfully.\r\n         * @param {errorCallback} [error] callback that gets notified if there is an error  \r\n         */\r\n        getLocalBranches : function(options, success, error){\r\n            var objectStore = new FileObjectStore(options.dir);\r\n            objectStore.init(function(){\r\n                objectStore.getAllHeads(success);\r\n            }, error);\r\n        },\r\n        /**\r\n         * Gets a list of all remote branches. \r\n         * \r\n         * @param {Object} options \r\n         * @param {String} options.url url of a remote git repo\r\n         * @param {String} [options.username] User name to authenticate with if the repo supports basic auth\r\n         * @param {String} [options.password] password to authenticate with if the repo supports basic auth\r\n         * @param {successCallback} success callback that gets notified after the push is completed successfully.\r\n         * @param {errorCallback} [error] callback that gets notified if there is an error  \r\n         */\r\n        getRemoteBranches : function(options, success, error){\r\n            var remote = SmartHttpRemote(null, null, options.url, options.username, options.password, error);\r\n            remote.fetchRefs(function(refs){\r\n                var remoteBranches = [];\r\n                refs.forEach(function(ref){\r\n                    if (ref.name.indexOf(\'refs/heads/\') == 0){\r\n                        remoteBranches.push(ref.name.substring(\'refs/heads/\'.length));\r\n                    }\r\n                });\r\n                success(remoteBranches);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * error callback that gets notified if there is an error  \r\n         * @callback errorCallback\r\n         * @param {Object} err Error data object\r\n         * @param {Number} err.type The type of error. Should be one of the error constants in the api like {@link FILE_IO_ERROR}\r\n         * @param {String} err.msg An explanation of the error in English. \r\n         */\r\n\r\n         /**\r\n         * progress callback that gets notified of the progress of various operaions  \r\n         * @callback progressCallback\r\n         * @param {Object} progress Progress data object\r\n         * @param {Number} progress.pct a number between 1-100 that indicates the percentage of the operation that is complete.\r\n         * @param {String} progress.msg An description of the current state of the operation in English. \r\n         */\r\n\r\n         /**\r\n          * success callback that gets notified when an operation completes successfully. \r\n          * @callback successCallback\r\n          */\r\n\r\n    }\r\n    return api;\r\n});\ndefine(\'workers/api-worker\',[\'api\', \'utils/errors\', \'workers/worker_messages\'], function(GitLite, errutils){\r\n\r\n    self.requestFileSystem = self.requestFileSystem || self.webkitRequestFileSystem;\r\n\r\n    var convertToDirEntry = function(dir, success, error){\r\n        self.requestFileSystem(PERSISTENT, 5 * 1024 * 1024 * 1024, function(fs){\r\n            fs.root.getDirectory(dir, {create: false}, success, error);\r\n        }, error);\r\n    };\r\n\r\n    return function(){\r\n        onmessage = function(evt){\r\n            var msg = evt.data;\r\n            var id = evt.data.id;\r\n            var scrubArgs = function(args){\r\n                for (var i = 0; i < args.length; i++){\r\n                    args[i] = args[i].fullPath || args[i];\r\n                }\r\n            }\r\n            var successCallback = function(){\r\n                var args = Array.prototype.slice.call(arguments);\r\n                scrubArgs(args);\r\n                postMessage({id: id, type: GitLiteWorkerMessages.SUCCESS, args: args});\r\n                //self.close();\r\n            }\r\n\r\n            var errCallback = function(e){\r\n                postMessage({id: id, type: GitLiteWorkerMessages.ERROR, error:e});\r\n                //self.close();\r\n            }\r\n            var progressCallback;\r\n            if (msg.options.progress){\r\n                progressCallback = function(){\r\n                    var args = Array.prototype.slice.call(arguments);\r\n                    postMessage({id: id, type: GitLiteWorkerMessages.PROGRESS, args: args});\r\n                }\r\n                msg.options.progress = progressCallback;\r\n            }\r\n            var ferror = errutils.fileErrorFunc(errCallback);\r\n\r\n            var doApiCall = function(func){\r\n                convertToDirEntry(msg.options.dir, function(dirEntry){\r\n                    msg.options.dir = dirEntry;\r\n                    func.call(null, msg.options, successCallback, errCallback);\r\n                }, ferror);\r\n            }\r\n\r\n            switch(msg.type){\r\n                \r\n                case GitLiteWorkerMessages.API_CALL_CLONE:\r\n                    doApiCall(GitLite.clone);\r\n                    break;\r\n                case GitLiteWorkerMessages.API_CALL_COMMIT:\r\n                    doApiCall(GitLite.commit);\r\n                    break;\r\n                case GitLiteWorkerMessages.API_CALL_PULL:\r\n                    doApiCall(GitLite.pull);\r\n                    break;\r\n                case GitLiteWorkerMessages.API_CALL_PUSH:\r\n                    doApiCall(GitLite.push);\r\n                    break;\r\n                case GitLiteWorkerMessages.API_CALL_BRANCH:\r\n                    doApiCall(GitLite.branch);\r\n                    break;\r\n                case GitLiteWorkerMessages.API_CALL_CHECKOUT:\r\n                    doApiCall(GitLite.checkout);\r\n                    break;\r\n                case GitLiteWorkerMessages.API_CALL_UNCOMMITTED:\r\n                    doApiCall(GitLite.checkForUncommittedChanges);\r\n                    break;\r\n                case GitLiteWorkerMessages.API_CALL_CURRENT_BRANCH:\r\n                    doApiCall(GitLite.getCurrentBranch);\r\n                    break;\r\n                case GitLiteWorkerMessages.API_CALL_LOCAL_BRANCHES:\r\n                    doApiCall(GitLite.getLocalBranches);\r\n                    break;\r\n                case GitLiteWorkerMessages.API_CALL_REMOTE_BRANCHES:\r\n                    doApiCall(GitLite.getRemoteBranches);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n});\n    //The modules for your project will be inlined above\r\n    //this snippet. Ask almond to synchronously require the\r\n    //module value for \'main\' here and return it as the\r\n    //value to use for the public API for the built file.\r\n    return require(\'workers/api-worker\');\r\n}));';});

define('utils/errors',[],function() {

    var errors = {
        // Indicates an unexpected error in the file system.
        FILE_IO_ERROR: 0,
        FILE_IO_ERROR_MSG: 'Unexpected File I/O error',
        // Indicates an unexpected ajax error when trying to make a request
        AJAX_ERROR: 1, 
        AJAX_ERROR_MSG: 'Unexpected ajax error',
        
        // trying to clone into a non-empty directory
        CLONE_DIR_NOT_EMPTY: 2,
        CLONE_DIR_NOT_EMPTY_MSG: 'The target directory contains files',
        // No .git directory
        CLONE_DIR_NOT_INTIALIZED: 3,
        CLONE_DIR_NOT_INTIALIZED_MSG: 'The target directory hasn\'t been initialized.',
        // .git directory already contains objects
        CLONE_GIT_DIR_IN_USE: 4,
        CLONE_GIT_DIR_IN_USE_MSG: 'The target directory contains a .git directory already in use.',
        // No branch found with the name given
        REMOTE_BRANCH_NOT_FOUND: 5,
        REMOTE_BRANCH_NOT_FOUND_MSG: 'Can\'t find the branch name in the remote repository',

        // only supports fast forward merging at the moment.
        PULL_NON_FAST_FORWARD: 6,
        PULL_NON_FAST_FORWARD_MSG: 'Pulling from the remote repo requires a merge.',
        // Branch is up to date
        PULL_UP_TO_DATE: 7,
        PULL_UP_TO_DATE_MSG: 'Everything is up to date',


        UNCOMMITTED_CHANGES: 11,
        UNCOMMITTED_CHANGES_MSG: 'There are changes in the working directory that haven\'t been committed',

        // Nothing to commit
        COMMIT_NO_CHANGES: 8,
        COMMIT_NO_CHANGES_MSG: 'No changes to commit',

        // The remote repo and the local repo share the same head.
        PUSH_NO_CHANGES: 9,
        PUSH_NO_CHANGES_MSG: 'No new commits to push to the repository',

        PUSH_NO_REMOTE: 16,
        PUSH_NO_REMOTE_MSG: 'No remote to push to',

        // Need to merge remote changes first. 
        PUSH_NON_FAST_FORWARD: 10,
        PUSH_NON_FAST_FORWARD_MSG: 'The remote repo has new commits on your current branch. You need to merge them first.',

        BRANCH_ALREADY_EXISTS: 14,
        BRANCH_ALREADY_EXISTS_MSG: 'A local branch with that name already exists',

        BRANCH_NAME_NOT_VALID: 12,
        BRANCH_NAME_NOT_VALID_MSG: 'The branch name is not valid.',

        CHECKOUT_BRANCH_NO_EXISTS: 15,
        CHECKOUT_BRANCH_NO_EXISTS_MSG: 'No local branch with that name exists',

        // unexpected problem retrieving objects
        OBJECT_STORE_CORRUPTED: 200,
        OBJECT_STORE_CORRUPTED_MSG: 'Git object store may be corrupted',

        HTTP_AUTH_ERROR: 201,
        HTTP_AUTH_ERROR_MSG: 'Http authentication failed',

        UNPACK_ERROR: 202,
        UNPACK_ERROR_MSG: 'The remote git server wasn\'t able to understand the push request.',

        
        fileErrorFunc : function(onError){
            if (!onError){
                return function(){};
            }
            return function(e) {
                var msg = errors.getFileErrorMsg(e);
                onError({type : errors.FILE_IO_ERROR, msg: msg, fe: e.name});
            }
        },

        ajaxErrorFunc : function(onError){
            return function(xhr){
                var url = this.url,
                    reqType = this.type;

                var httpErr;
                if (xhr.status == 401){
                    var auth = xhr.getResponseHeader('WWW-Authenticate');
                    httpErr = {type: errors.HTTP_AUTH_ERROR, msg: errors.HTTP_AUTH_ERROR_MSG, auth: auth};
                }
                else{
                    httpErr = {type: errors.AJAX_ERROR, url: url, reqType: reqType, statusText: xhr.statusText, status: xhr.status, msg: "Http error with status code: " + xhr.status + ' and status text: "' + xhr.statusText + '"'};
                }
                onError(httpErr);  
            }
        },

        getFileErrorMsg: function(e) {
            var msg = '';

            switch (e.name) {
                case "QuotaExceededError":
                    msg = 'QUOTA_EXCEEDED_ERR';
                    break;
                case "NotFoundError":
                    msg = 'NOT_FOUND_ERR';
                    break;
                case "SecurityError":
                    msg = 'SECURITY_ERR';
                    break;
                case "InvalidModificationError":
                    msg = 'INVALID_MODIFICATION_ERR';
                    break;
                case "InvalidStateError":
                    msg = 'INVALID_STATE_ERR';
                    break;
                case "AbortError":
                    msg = 'ABORT_ERR';
                    break;
                case "EncodingError":
                    msg = 'ENCODING_ERR';
                    break;
                case "NotReadableError":
                    msg = 'NOT_READABLE_ERR';
                    break;
                case "NoModificationAllowedError":
                    msg = 'NO_MODIFICATION_ALLOWED_ERR';
                    break;
                case "PathExistsError":
                    msg = 'PATH_EXISTS_ERR';
                    break;
                case "SyntaxError":
                    msg = 'SYNTAX_ERR';
                    break;
                case "TypeMismatchError":
                    msg = 'TYPE_MISMATCH_ERR';
                    break;
                default:
                    msg = 'Unknown Error ' + e.name;
                    break;
            };
        },
        errorHandler: function(e) {
            msg = utils.getFileErrorMsg(e);
            console.log('Error: ' + msg);
        }
    }
    return errors;

});
GitLiteWorkerMessages = {
    PROGRESS : 0,
    FINISHED: 1,
    RETRIEVE_OBJECT: 2,
    START: 4,
    OBJECT_RETRIEVED: 5,

    API_CALL_CLONE: 6,
    API_CALL_COMMIT: 7,
    API_CALL_PULL: 8,
    API_CALL_PUSH: 9,
    API_CALL_CHECKOUT: 12,
    API_CALL_BRANCH: 14,
    API_CALL_UNCOMMITTED: 15,
    API_CALL_CURRENT_BRANCH: 16, 
    API_CALL_LOCAL_BRANCHES: 17,
    API_CALL_REMOTE_BRANCHES: 18,

    SUCCESS: 10,
    ERROR: 11
};
define("workers/worker_messages", function(){});

define('workers/api-worker-proxy',['text!workers/api-worker-built.js', 'utils/errors', 'workers/worker_messages'],function(apiWorkerText, errutils){
    var workerBlob = new Blob([apiWorkerText], {type: "text/javascript"});
    var workerUrl = URL.createObjectURL(workerBlob);

    var newResponseHandler = function(success, error, progress, worker){
        var updateProgress = function(){}
        if (progress){
            updateProgress = function(msg){
                progress.apply(null, msg.args || []);
            }
        }
        error = error || function(e){console.error(e);}
        return function(evt){

            var msg = evt.data;
            switch(msg.type){
                case GitLiteWorkerMessages.SUCCESS:
                    console.log('success');
                    success.apply(null, msg.args || []);
                    //worker.terminate();
                    break;
                case GitLiteWorkerMessages.ERROR:
                    error(msg.error);
                    //worker.terminate();
                    break;
                case GitLiteWorkerMessages.PROGRESS:
                    updateProgress(msg);
                    break;
            }
        }
    }
    var id = 0;
    callbacks = {};
    var worker;
    var doApiCall = function(type, options, success, error){
        options.dir = options.dir.fullPath;
        if (!worker){
            worker = new Worker(workerUrl);
            var errorHandler = error || function(e){};
            worker.onmessage = function(evt){
                var msgHandler = callbacks[evt.data.id];
                msgHandler.call(null, evt);
                if (evt.data.type == GitLiteWorkerMessages.SUCCESS || evt.data.type == GitLiteWorkerMessages.ERROR){
                    delete callbacks[id];
                }
            }
            worker.onerror = function(e){
                errorHandler({msg: e.message});
            }
        }
        callbacks[id] = newResponseHandler(success, error, options.progress);
        if (options.progress){
            options.progress = true;
        }
        worker.postMessage({id: id++, type: type, options: options});
    }

    var api = {

         // Indicates an unexpected error in the file system.
        FILE_IO_ERROR: errutils.FILE_IO_ERROR,
        // Indicates an unexpected ajax error when trying to make a request
        AJAX_ERROR: errutils.AJAX_ERROR, 
        // trying to clone into a non-empty directory
        CLONE_DIR_NOT_EMPTY: errutils.CLONE_DIR_NOT_EMPTY,
        // .git directory already contains objects
        CLONE_GIT_DIR_IN_USE: errutils.CLONE_GIT_DIR_IN_USE,
        // No branch found with the name given
        REMOTE_BRANCH_NOT_FOUND: errutils.REMOTE_BRANCH_NOT_FOUND,
        // only supports fast forward merging at the moment.
        PULL_NON_FAST_FORWARD: errutils.PULL_NON_FAST_FORWARD,
        // Branch is up to date
        PULL_UP_TO_DATE: errutils.PULL_UP_TO_DATE,
        // Nothing to commit
        COMMIT_NO_CHANGES: errutils.COMMIT_NO_CHANGES,
        // The remote repo and the local repo share the same head.
        PUSH_NO_CHANGES: errutils.PUSH_NO_CHANGES,
        // Need to merge remote changes first.
        PUSH_NON_FAST_FORWARD: errutils.PUSH_NON_FAST_FORWARD,
        // unexpected problem retrieving objects
        OBJECT_STORE_CORRUPTED: errutils.OBJECT_STORE_CORRUPTED,
        // pull is attempted with uncommitted changed
        UNCOMMITTED_CHANGES: errutils.UNCOMMITTED_CHANGES,
        // 401 when attempting to make a request
        HTTP_AUTH_ERROR: errutils.HTTP_AUTH_ERROR,

        BRANCH_NAME_NOT_VALID: errutils.BRANCH_NAME_NOT_VALID,

        PUSH_NO_REMOTE: errutils.PUSH_NO_REMOTE,

        
        clone : function(options, success, error){
            // var objectStore = new FileObjectStore(options.dir);
            // objectStore.init(function(){
            //     //clone(dir, objectStore, url, callback);
            //     clone({dir: options.dir, branch: options.branch, objectStore: objectStore, url: options.url, depth: options.depth, progress: options.progress}, success, error);
            // }, error);
            doApiCall(GitLiteWorkerMessages.API_CALL_CLONE, options, success, error);
            
        },
        pull : function(options, success, error){
            // var objectStore = new FileObjectStore(options.dir);
            // objectStore.init(function(){
            //     //pull(dir, objectStore, url, callback);
            //     pull({dir: options.dir, objectStore: objectStore}, success, error);
            // }, error);
            doApiCall(GitLiteWorkerMessages.API_CALL_PULL, options, success, error);

        },
        commit : function(options, success, error){
            // var objectStore = new FileObjectStore(options.dir);
            // objectStore.init(function(){
            //     //commit(dir, objectStore, callback);
            //     commit({dir: options.dir, username: options.username, email: options.email, commitMsg: options.commitMsg, objectStore: objectStore}, success, error);
            // }, error);
            doApiCall(GitLiteWorkerMessages.API_CALL_COMMIT, options, success, error);
        },
        push : function(options, success, error){
            // var objectStore = new FileObjectStore(options.dir);
            // objectStore.init(function(){
            //     push({objectStore: objectStore, dir: options.dir, url: options.url}, success, error);
            // }, error);
            doApiCall(GitLiteWorkerMessages.API_CALL_PUSH, options, success, error);
        },

        branch : function(options, success, error){
            doApiCall(GitLiteWorkerMessages.API_CALL_BRANCH, options, success, error);
        },
        checkout : function(options, success, error){
            doApiCall(GitLiteWorkerMessages.API_CALL_CHECKOUT, options, success, error);
        },
        checkForUncommittedChanges: function(options, success, error){
            doApiCall(GitLiteWorkerMessages.API_CALL_UNCOMMITTED, options, success, error);
        },
        getCurrentBranch : function(options, success, error){
            doApiCall(GitLiteWorkerMessages.API_CALL_CURRENT_BRANCH, options, success, error);
        },
        getLocalBranches : function(options, success, error){
            doApiCall(GitLiteWorkerMessages.API_CALL_LOCAL_BRANCHES, options, success, error);
        },
        getRemoteBranches : function(options, success, error){
            doApiCall(GitLiteWorkerMessages.API_CALL_REMOTE_BRANCHES, options, success, error);
        }
    }
    return api;
});
    //The modules for your project will be inlined above
    //this snippet. Ask almond to synchronously require the
    //module value for 'main' here and return it as the
    //value to use for the public API for the built file.
    return require('workers/api-worker-proxy');
}));